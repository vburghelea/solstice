# AI Tools Integrations
URL: /docs/docs/ai-tools-integrations
Learn how to integrate Consent Management (c15t) with AI tools and language models through the standardized llms.txt file. This guide explains how to access and import the llms.txt file to enhance your development workflow with AI-powered tools like Cursor.
## Overview

The `llms.txt` file is a standardized resource designed to provide concise, LLM-friendly information about a website. By accessing this file, you can enhance your experience with tools that utilize language models, such as Cursor. This document will guide you on how to import the `llms.txt` file into your tools.

## Accessing the `llms.txt` or `llms-full.txt` File

To access the `llms.txt` or `llms-full.txt` file, simply navigate to the following URL in your web browser:

[https://c15t.com/llms.txt](https://c15t.com/llms.txt)
[https://c15t.com/llms-full.txt](https://c15t.com/llms-full.txt)

This file contains essential information structured in a way that is both human-readable and easily processed by language models. It includes:

- A brief overview of the project or website.
- Links to detailed documentation and resources.
- Additional context that can assist in understanding the content.

## Importing into Cursor

Once you have accessed the `llms.txt` file, you can import it into Cursor or similar tools by following these steps:

1. **Open Cursor**: Launch the Cursor application on your device.

2. **Navigate to Import Options**: Look for the import feature within the tool. This is typically found in the settings or tools menu.

3. **Enter the URL**: When prompted, enter the URL of the `llms.txt` file:
   ```
   https://c15t.com/llms.txt
   ```

4. **Confirm Import**: Follow any additional prompts to confirm the import. Cursor will fetch the content from the provided URL and integrate it into your workspace.

5. **Utilize the Information**: Once imported, you can leverage the structured information from the `llms.txt` file to enhance your queries, access relevant documentation, and improve your overall experience with the tool.

## Benefits of Using `llms.txt`

- **Concise Information**: Quickly access essential details without sifting through complex HTML pages.
- **Enhanced Context**: Get relevant links and descriptions that help you understand the content better.
- **Improved Workflow**: Streamline your development process by having all necessary information at your fingertips.


# Docs Preview GitHub Action
URL: /docs/docs/contributing/docs-preview-action
How our composite GitHub Action deploys the docs preview to Vercel and posts a sticky PR comment.
Our repository includes a composite GitHub Action that:

- Deploys the documentation site to Vercel (staging or production based on
  branch and inputs)
- Posts or updates a sticky PR comment with a preview link
- Optionally posts a commit comment on push events
- Skips unnecessary deployments based on file changes or template changes, and
  explains why when it skips

## Where it lives

- Action entry: `internals/c15t-github-action/action.yml` (composite)
- Runtime code: `internals/c15t-github-action/src/main.ts` and `src/steps/*`

## When it runs

The workflow `.github/workflows/deploy-docs.yml` triggers on:

- push on `main` and `canary`
- pull\_request on any branch
- a nightly schedule (to check for upstream template changes)

## Inputs (selected)

- `GITHUB_TOKEN`: token used by the action (required)
- `setup_docs`: fetches the private docs template into `.docs` (default: true)
- `only_if_changed`: deploy only when relevant files have changed (default: false)
- `change_globs`: newline-separated globs of files that trigger deploy
- `check_template_changes`: also deploy when the upstream template changed
- `vercel_token`, `vercel_project_id`, `vercel_org_id`: credentials for Vercel
- `target`: `production` or `staging`
- `assign_alias_on_branch`: branch name to assign the alias on (e.g. `canary`)
- `alias_domains`: newline-separated alias domains to assign (supports `{{PR_NUMBER}}`, `{{BRANCH}}`)
- `comment_on_push`: also post a commit comment on push events (default: false)
- `skip_unchanged`: don't update sticky comment if body unchanged (default: false)
- `post_skip_comment`: when a deployment is skipped, post a skip comment on the
  PR (or a commit comment on push with `comment_on_push: true`)
- `skip_message`: optional override body for the skip comment
- `post_skip_comment`: when a deployment is skipped, post a skip comment on the
  PR (or a commit comment on push with `comment_on_push: true`)
- `skip_message`: optional override body for the skip comment

## Preview comment content

We render a consistent, branded Markdown comment using `render-comment.ts`:

- ASCII art header (with special first-contribution banner on your first PR)
- A preview table with status and timestamp
- Footer with attribution

When a deployment is skipped, we still post a comment indicating "Skipped" and show the last successful Vercel URL when available.

## How skipping works

- If `only_if_changed` is enabled, the action looks at changed paths and skips when none match `change_globs`.
- If `check_template_changes` is enabled, the action compares the latest upstream template commit against the last recorded deployment and may skip when they match.
- On skip, if `post_skip_comment` is `true`, the action posts a sticky comment
  (on PR) or a commit comment (on push with `comment_on_push: true`). You can
  override the body with `skip_message`.

## Local development

The action is executed using `tsx` directly (composite action), so no bundling step is required locally or in CI.

```yaml
runs:
  using: composite
  steps:
    - name: Run c15t action (tsx)
      shell: bash
      working-directory: ${{ github.action_path }}
      run: pnpm -w exec tsx "$GITHUB_ACTION_PATH/src/main.ts"
```

## Troubleshooting

- No comment on push: set `comment_on_push: "true"` in workflow inputs.
- No deploy on PR: ensure your changes match `change_globs` or disable `only_if_changed`.
- Node engine warning during docs setup: the `.docs` template may require a newer Node for dev tooling, but CI uses its own Node for the action. This warning can be ignored if the install continues.

## Related files

- `internals/c15t-github-action/src/steps/deployment.ts`
- `internals/c15t-github-action/src/steps/render-comment.ts`
- `internals/c15t-github-action/src/steps/comments.ts`
- `internals/c15t-github-action/src/steps/push-comment.ts`


# Documentation System Setup
URL: /docs/docs/contributing/documentation-setup
Learn how to set up the unified documentation build system for local development and understand the production deployment process.
> ℹ️ **Info:**
> For Core Maintainers OnlyThis guide is for core maintainers and team members who have access to the private documentation template. External contributors won't be able to follow these steps since they require access to consentdotio/c15t-docs (a private repository).External contributors: You can still contribute to documentation by editing the MDX files in the docs/ directory and submitting pull requests. The live documentation site will be automatically updated when your changes are merged.

This guide will walk you through setting up the documentation system for local development and explain how production deployment works.

## Overview

The documentation system uses a private Next.js template that contains licensed components. To maintain compliance while keeping the main project open source, we fetch this template during build time rather than committing it to the repository.

**Key components:**

- **Private template**: `consentdotio/c15t-docs` (private repository)
- **Local folder**: `.docs` (excluded from workspace and git)
- **Unified script**: `scripts/setup-docs.ts` with mode and branch support

## Quick Setup

### Prerequisites

- Node.js v18 or higher
- pnpm package manager
- GitHub personal access token with read access to private repositories

### Development Installation

1. **Create your environment file** in the project root:

   ```bash
   echo "CONSENT_GIT_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxx" > .env
   ```

2. **Fetch and setup the documentation**:

   ```bash
   pnpm setup:docs
   ```

3. **Start the development server**:

   ```bash
   cd .docs && pnpm dev
   ```

4. **Open your browser** to [http://localhost:3000](http://localhost:3000)

That's it! The documentation site should now be running locally.

## Understanding the Build Modes

### Development Mode (Default)

When you run `pnpm setup:docs`, the script operates in development mode:

- **Token source**: Loads from your `.env` file
- **Dependencies**: Installs only .docs dependencies
- **Output**: Ready for immediate `pnpm dev` usage
- **Build**: Skips production build step

**Complete workflow:**

1. Validates token from `.env` file
2. Cleans existing directories
3. Clones private template repository
4. Syncs template to workspace
5. Installs .docs dependencies in isolation

### Production Mode (Vercel)

Production builds use the `--vercel` flag and additional steps:

- **Token source**: Uses environment variables (Vercel secrets)
- **Dependencies**: Installs workspace + .docs dependencies
- **Output**: Optimized production build
- **Build**: Generates static assets for deployment

**Complete workflow:**

1. Validates token from environment
2. Cleans existing directories
3. Clones private template repository
4. Syncs template to workspace
5. Installs workspace dependencies
6. Installs .docs dependencies
7. Builds production application

## Branch Selection

The fetch script supports different branches of the documentation template:

### Available Branches

- **`main`** (default) - Stable release branch
- **`canary`** - Latest features and updates
- **`develop`** - Development branch (if available)

### Using Different Branches

```bash
# Use default main branch
pnpm setup:docs

# Fetch from canary branch for latest features
pnpm setup:docs -- --branch=canary

# Fetch from development branch
pnpm setup:docs -- --branch=develop

# Production build with specific branch
CONSENT_GIT_TOKEN=xxx tsx scripts/setup-docs.ts --vercel --branch=canary
```

**Note**: The double dash (`--`) is required when passing flags through pnpm scripts.

## Available Commands

| Command                              | Mode        | Description                                              |
| ------------------------------------ | ----------- | -------------------------------------------------------- |
| `pnpm setup:docs`                    | Development | Fetch template and prepare for development (main branch) |
| `pnpm setup:docs -- --branch=canary` | Development | Fetch from canary branch for testing                     |
| `pnpm vercel-build`                  | Production  | Full production build for deployment                     |

## Authentication Setup

### Getting a GitHub Token

1. Go to [GitHub Settings > Personal Access Tokens](https://github.com/settings/tokens)
2. Click "Generate new token" → "Generate new token (classic)"
3. Set an expiration date
4. Select scopes: `repo` (full repository access)
5. Generate and copy the token

### Local Development Setup

Create a `.env` file in your project root:

```bash
# .env file
CONSENT_GIT_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxx
```

**Important**: Never commit this file. It's already in `.gitignore`.

### Production Setup (Vercel)

1. Go to your Vercel project dashboard
2. Navigate to Settings → Environment Variables
3. Add `CONSENT_GIT_TOKEN` with your token value
4. Save and redeploy

## File Structure

After running the setup, you'll see these generated files:

```text
scripts/
├── setup-docs.ts           # Unified documentation fetcher
└── README.md               # Technical documentation

Generated during build:
├── .docs/               # Next.js documentation app (gitignored)
│   ├── package.json        # App dependencies
│   ├── next.config.ts      # Next.js configuration
│   └── src/                # Application source code
└── /tmp/new-docs/          # Temporary clone location
```

## Development Workflow

### Starting Fresh

```bash
# Remove any existing setup
rm -rf .docs

# Fetch and setup everything
pnpm setup:docs

# Start development
cd .docs && pnpm dev
```

### Making Changes

The documentation content lives in the private template repository. For content changes:

1. Make changes in the private `consentdotio/c15t-docs` repository
2. Re-fetch the template: `pnpm setup:docs`
3. Restart your dev server: `cd .docs && pnpm dev`

### Working with Components

The template includes pre-built components for documentation. You can:

- Edit existing pages in `.docs/src/`
- Add new MDX content
- Customize styling and layout
- Test changes locally before deployment

## Troubleshooting

### Common Issues

**Token Authentication Failed**

```bash
❌ CONSENT_GIT_TOKEN missing. Cannot fetch consentdotio/c15t-docs
```

**Solutions:**

- Verify `.env` file exists in project root
- Check token has read access to private repository
- Ensure token hasn't expired

**Development Server Won't Start**

```bash
Error: Cannot find module 'next'
```

**Solutions:**

- Run `pnpm setup:docs` first to install dependencies
- Ensure you're in the `.docs` directory when running `pnpm dev`
- Check that the fetch process completed successfully

**Build Failures**

```bash
💥 development setup failed: Command execution failed
```

**Solutions:**

- Check network connectivity
- Verify private repository exists and is accessible
- Review command output for specific error details

### Debug Mode

The script automatically shows detailed progress:

```bash
🔄 Installing .docs dependencies in isolation...
   Running: pnpm --prefix .docs install --ignore-workspace --frozen-lockfile
✅ Installing .docs dependencies in isolation completed successfully
```

### Clean Reset

If you encounter persistent issues:

```bash
# Remove all generated files
rm -rf .docs
rm -rf /tmp/new-docs

# Clear any cached data
pnpm store prune

# Start fresh
pnpm setup:docs
```

## Security Considerations

### Why This Approach?

- **License Compliance**: Private components stay private
- **Open Source Friendly**: Main codebase remains fully open
- **Secure Access**: Only authorized users can build documentation
- **Vercel Compatible**: Works seamlessly with deployment platform

### Access Control

- **Public forks**: Cannot build documentation (no token access)
- **Contributors**: Need to be granted repository access
- **Vercel deployments**: Use environment secrets for authentication

### Best Practices

- **Never commit** the `.env` file or any private content
- **Rotate tokens** regularly for security
- **Use minimal permissions** (read-only access to private repository)
- **Monitor access logs** in GitHub for unauthorized attempts

## Production Deployment

### Vercel Configuration

When deploying to Vercel, the system automatically:

1. **Detects production mode** via the `--vercel` flag
2. **Uses environment tokens** instead of `.env` file
3. **Installs full workspace** dependencies for build context
4. **Generates optimized build** for fast loading
5. **Serves static assets** via Vercel's edge network

### Build Optimization

The production build includes:

- **Static page generation** for fast loading
- **JavaScript optimization** and code splitting
- **Asset optimization** for images, CSS, and fonts
- **SEO metadata** generation

### Deployment Workflow

1. **Push changes** to your main repository
2. **Vercel detects** the push and starts build
3. **Script runs** `tsx scripts/setup-docs.ts --vercel`
4. **Template fetched** using environment token
5. **Dependencies installed** and app built
6. **Static assets** deployed to edge network

## Next Steps

Once you have the documentation running locally:

- **Explore the template structure** in `.docs/src/`
- **Review existing documentation** to understand the content structure
- **Test responsive design** across different screen sizes
- **Familiarize yourself** with the MDX components available
- **Check the build process** by running a local production build

For questions about the documentation system, check the [technical README](../../scripts/README.md) or reach out to the maintainers.


# Contributing
URL: /docs/docs/contributing

# Contributing

## How to contribute

1. Fork the repository
2. Create a new branch
3. Make your changes
4. Push your changes to your fork
5. Open a pull request against the upstream repository (e.g., main)

## Related guides

- [Documentation system setup](./documentation-setup)
- [Docs preview GitHub Action](./docs-preview-action)


# Frameworks
URL: /docs/docs/frameworks
Get started with c15t and your favorite frontend framework.


# Callbacks
URL: /docs/docs/frameworks/javascript/callbacks
Learn how to use callbacks to respond to c15t events in your application.
## Implementing Callbacks

```tsx
import { configureConsentManager, type ConsentManagerOptions } from 'c15t';

export const c15tConfig: ConsentManagerOptions = {
  mode: 'c15t',
  backendURL: "https://your-instance.c15t.dev",
  callbacks: {
    onBannerFetched(response) {
      console.log('Consent banner fetched', response);
    },
    onConsentSet(response) {
      console.log('Consent has been saved', response);
    },
    onError(error) {
      console.log('Error', error);
    },
  }
};

const c15t = configureConsentManager(c15tConfig);
```

## Available callbacks

### onBannerFetched

Called when the consent banner is fetched; not invoked when the banner is in offline mode.

| Property          | Type                                               | Description | Default |  Required  |
| :---------------- | :------------------------------------------------- | :---------- | :------ | :--------: |
| showConsentBanner | boolean                                            |             | -       | ✅ Required |
| jurisdiction      | JurisdictionInfo                                   |             | -       | ✅ Required |
| location          | \{ countryCode: string; regionCode: string; }      |             | -       | ✅ Required |
| translations      | \{ language: string; translations: Translations; } |             | -       | ✅ Required |

### onConsentSet

Called when the consent is set.

| Property    | Type         | Description | Default |  Required  |
| :---------- | :----------- | :---------- | :------ | :--------: |
| preferences | ConsentState |             | -       | ✅ Required |

### onError

Called when an error occurs.

| Property | Type   | Description | Default |  Required  |
| :------- | :----- | :---------- | :------ | :--------: |
| error    | string |             | -       | ✅ Required |


# Google Tag Manager
URL: /docs/docs/frameworks/javascript/google-tag-manager
Learn how to integrate c15t with Google Tag Manager (GTM).
c15t supports Google Tag Manager (GTM) out of the box. It will automatically inject the GTM script into your page and update the consent state in GTM. This feature is currently marked as experimental as we want feedback from users.

## Implementation

1. **Creating a Tag Manager Container**

   > ℹ️ Info:
   >
   > This step is optional if you already have a Tag Manager container. Ensure your container has consent overview enabled.

   After signing into Google Tag Manager, you can create a new container.
   Continue to Google Tag Manager

   In Tag Manager, click Admin > Container Settings.Under Additional Settings, select "Enable consent overview".

   Enable consent overview

2. **Setting up c15t with Google Tag Manager** After creating your container, you can set up c15t with Google Tag Manager.

   All you need to do is copy and paste your container ID into the unstable\_googleTagManager.id property.

   This begins with "GTM-".

   ```tsx
   <ConsentManagerProvider
     options={{
       mode: 'c15t',
       backendURL: 'https://your-instance.c15t.dev',
       unstable_googleTagManager: {
         id: 'GTM-XXXXXXX',
       },
     }}
   >
   ```

   If you have GTM in your site already, you can remove the GTM script from your head section.

### All Done!

c15t will automatically inject the GTM script into your page and update the consent state in GTM.


# iframe blocking
URL: /docs/docs/frameworks/javascript/iframe-blocking
Learn how to block iframes based on consent.
## Overview

Iframe blocking is a feature that allows you to block iframes based on consent. This is useful for blocking iframes that are not allowed to load until consent is given.
This should be used when an iframe sets cookies such as a YouTube embed.

## Headless Usage

```html
// Will render immediately - No blocking
<iframe src="https://youtube.com/embed/unblocked" />

// Does not render until consent is granted
<iframe data-src="https://youtube.com/embed/123" data-category="marketing" />
```

> ℹ️ **Info:**
> The iframe blocker will only block iframes that have a data-category & data-src attribute.No fallback is provided for blocked iframes using this method.


# Internationalization (i18n)
URL: /docs/docs/frameworks/javascript/internationalization
Learn how to add translations to your Consent Manager.
## Overview

c15t supports internationalization (i18n) through the `translations` property in the `ConsentManagerOptions` object and has support for both server-side and client-side rendering.

| Server-side                                                                                                                                                                                                                                                                                                                                                                     | Client-side                                                                                                                                                                                                                            |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| The best way to reduce bundle size and improve performance. We can detect the user's language based on the browser's language settings, allowing for the most accurate translations. By default, when using a [consent.io](https://consent.io) hosted instance, [these languages](https://github.com/c15t/c15t/tree/main/packages/translations/src/translations) are supported. | Bundled with the application allowing for multiple languages to be supported without the need for a backend. The more translations you have, the larger the bundle size will be, which may impact the performance of your application. |

c15t supports partial translations, letting you supply only the changed keys without passing the whole translations object. When a requested language isn't available, the system falls back to the configured default/base language. Client-side translations take precedence over server-side translations, so client values override server values.

## Implementation

You can pass the `translations` object in your `ConsentManagerOptions` object to configure the translations for your application.

```tsx
import { configureConsentManager, type ConsentManagerOptions } from 'c15t';

const c15tConfig: ConsentManagerOptions = {
  // ... rest of your config
  translations: {
    defaultLanguage: 'en', // Optional: The default language to use if the browser's language is not supported.
    translations: {
      en: {
        common: {
          acceptAll: 'Accept all',
        },
        cookieBanner: {
          title: 'Cookie Banner',
          description: 'This is a cookie banner',
        },
      },
    },
  },
};

const c15t = configureConsentManager(c15tConfig);
```

## Types

### TranslationConfig

| Property    | Value                                    |
| :---------- | :--------------------------------------- |
| Type Name   | \`TranslationConfig\`                    |
| Source Path | \`./packages/translations/src/index.ts\` |

\*AutoTypeTable: Could not extract \`TranslationConfig\` from \`./packages/translations/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*

<import>./translation-types.mdx</import>


# JavaScript Quickstart
URL: /docs/docs/frameworks/javascript/quickstart
Learn how to integrate c15t into your Javacript application with this step-by-step guide. Well cover installation, configuration, and basic usage.
## CLI Setup (Recommended)

1. **Generate Schema + Code**

   | Package manager | Command                       |
   | :-------------- | :---------------------------- |
   | npm             | `npx @c15t/cli generate`      |
   | pnpm            | `pnpm dlx @c15t/cli generate` |
   | yarn            | `yarn dlx @c15t/cli generate` |
   | bun             | `bunx @c15t/cli generate`     |

2. **Run Database Migrations (Optional)**

   > ℹ️ Info:
   >
   > This is only required if you are self-hosting c15t.

   | Package manager | Command                      |
   | :-------------- | :--------------------------- |
   | npm             | `npx @c15t/cli migrate`      |
   | pnpm            | `pnpm dlx @c15t/cli migrate` |
   | yarn            | `yarn dlx @c15t/cli migrate` |
   | bun             | `bunx @c15t/cli migrate`     |

## Manual Setup

1. **Install c15t Package**

   | Package manager | Command            |
   | :-------------- | :----------------- |
   | npm             | `npm install c15t` |
   | pnpm            | `pnpm add c15t`    |
   | yarn            | `yarn add c15t`    |
   | bun             | `bun add c15t`     |

2. **Add to Your JavaScript Application**

   ```tsx
   import { configureConsentManager, createConsentManagerStore } from 'c15t';

   export const consentManager = configureConsentManager({ mode: "c15t", backendURL: "https://your-instance.c15t.dev" });
   export const store = createConsentManagerStore(consentManager, {
     initialGdprTypes: ["necessary", "marketing"], // Optional: Specify which consent categories to show in the banner.
     ignoreGeoLocation: true // Useful for development to always view the banner.
   });
   ```

   The consent manager is now ready to use. For example:

   ```tsx
   store.getState().setConsent('marketing', true); // set consent to marketing
   store.getState().showPopup; // should show popup?
   ```

   > 💡 Tip:
   >
   > You can create an instance at consent.io (recommended) or use c15t offline by setting mode: 'offline'.

***

## Hosting Options

### Creating a consent.io Instance (Recommended)

> ℹ️ **Info:**
> Using consent.io is the recommended method as it is the easiest way to get started and requires little maintenance.

[consent.io](https://consent.io) provides a fully managed consent management service. This is the recommended method as it is the easiest way to get started and requires little maintenance.

1. **Sign up for a consent.io account.**

2. **After signing up, create a new instance, located in the top-right corner.**

   > ℹ️ Info:
   >
   > When creating an instance it is important to list all the trusted origins for your application such as "localhost", your production domain, etc.

3. **After the instance is created, you will be given a backendURL, which you can add to your ConsentManagerOptions.** A backend URL might look like this: https\://\<my-instance>.c15t.dev/.

### Alternative Storage Options

> ℹ️ **Info:**
> For more advanced setup options, choose the approach that best suits your requirements.

For more advanced setup options, please refer to:

- [Overview](/docs/storing-consent/overview) - Compare different approaches to storing consent decisions in your application
- [Hosted c15t](/docs/storing-consent/hosted-c15t) - Complete guide to using consent.io
- [Offline Mode](/docs/storing-consent/offline-mode) - Complete guide to using c15t without a backend
- [Custom Client](/docs/storing-consent/custom-client) - Advanced implementation with custom handlers for full control

## Decision Guide

> ℹ️ **Info:**
> Use this flowchart to determine which c15t configuration is best for your needs.

```mermaid
flowchart TD
Start([Start here]) --> StoreConsent

StoreConsent{Need to store
consent choices?}
StoreConsent -->|Yes| ManagedService
StoreConsent -->|No| OfflineMode

ManagedService{Want a managed
service?}
ManagedService -->|Yes| ConsentIO
ManagedService -->|No| CustomClient

OfflineMode([c15t Offline Mode]):::optionStyle
OfflineMode -.-> OfflineNote[Client-side only
Stores in localStorage]:::noteStyle

ConsentIO([consent.io]):::recommendStyle
ConsentIO -.-> ConsentIONote[Fully managed
Simplest setup]:::noteStyle

CustomClient([Custom Client]):::optionStyle
CustomClient -.-> CustomNote[Full control
Requires implementation]:::noteStyle
```


# Script Loader
URL: /docs/docs/frameworks/javascript/script-loader
Load scripts based on consent. Used to load scripts that are not necessary for the users consent, such as analytics scripts.
## Overview

c15t provides the ability to load and unload scripts based on consent. This is useful for loading scripts that are not necessary for the user's consent, such as analytics scripts.

One common flaw of CMPs is they'll maintain a list of scripts that are blocked and then unblocked based on consent. This is a problem because it's not always accurate and can lead to scripts being missed or incorrectly blocked.

Our approach gives you, the developer, full control over the scripts that are loaded and unloaded, as no one knows your site better than you do.

> ℹ️ **Info:**
> When using the Script Loader, the tracking blocker will be disabled automatically (If enabled). This is because the tracking blocker is deprecated and may cause conflicts with the script loader. The current approach of the tracking blocker will only be available in v1.x of c15t, and will be removed in v2.0.

## Implementation

```ts
import { configureConsentManager } from 'c15t';
import { googleTagManager } from 'c15t/scripts/google-tag-manager';

const c15t = configureConsentManager({
  scripts: [
    {
      id: 'example',
      src: 'https://analytics.example.com/script.js',
      category: 'analytics',
    },
    googleTagManager({
      id: 'GTM-XXXXXXX',
    }), // We can also use the prebuilt script
  ]
});
```

## Prebuilt Scripts

A lot of scripts you may need to implement may be common, such as Google Tag Manager (GTM), PostHog, Meta Pixel, etc. To save you time, we have provided a set of prebuilt scripts for you to use.

These scripts are available in the `@c15t/scripts` package.

### All Prebuilt Scripts

| Script             | Guide                                          |
| ------------------ | ---------------------------------------------- |
| Google Tag Manager | [Guide](/docs/integrations/google-tag-manager) |
| Meta Pixel         | [Guide](/docs/integrations/meta-pixel)         |
| PostHog            | [Guide](/docs/integrations/posthog)            |
| TikTok Pixel       | [Guide](/docs/integrations/tiktok-pixel)       |
| LinkedIn Insights  | [Guide](/docs/integrations/linkedin-insights)  |
| Microsoft UET      | [Guide](/docs/integrations/microsoft-uet)      |
| X Pixel            | [Guide](/docs/integrations/x-pixel)            |

## Always Load Scripts

Some tracking scripts, like Google Tag Manager or PostHog, manage their own consent state internally. For these scripts, you'll want them to load immediately and never be unloaded, regardless of the consent state in c15t.

The `alwaysLoad` property allows you to bypass consent checks and ensure these scripts are always present on the page.

### When to Use Always Load

Use `alwaysLoad: true` for:

- **Tag Management Systems** (e.g., Google Tag Manager) that handle consent internally
- **Analytics Platforms** (e.g., PostHog) with built-in consent management & cookieless behavior
- **Scripts that must initialize early** and configure themselves based on consent

> ⚠️ **Warning:**
> When using alwaysLoad, you are responsible for ensuring the script respects user consent through its own consent management API. The script will load regardless of the user's consent choices in c15t.

### Behavior

Scripts with `alwaysLoad: true` have the following characteristics:

- **Load immediately** when the consent manager initializes, bypassing consent checks
- **Never unload** when consent is revoked or changed
- **Persist through** `clearAllScripts` calls
- **Still trigger callbacks** like `onBeforeLoad`, `onLoad`, and `onConsentChange`

## Types

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# Available Callbacks
URL: /docs/docs/frameworks/javascript/shared/available-callbacks
A list of all the callbacks that are available in the Consent Manager.
## Available callbacks

### onBannerFetched

Called when the consent banner is fetched; not invoked when the banner is in offline mode.

| Property          | Type                                               | Description | Default |  Required  |
| :---------------- | :------------------------------------------------- | :---------- | :------ | :--------: |
| showConsentBanner | boolean                                            |             | -       | ✅ Required |
| jurisdiction      | JurisdictionInfo                                   |             | -       | ✅ Required |
| location          | \{ countryCode: string; regionCode: string; }      |             | -       | ✅ Required |
| translations      | \{ language: string; translations: Translations; } |             | -       | ✅ Required |

### onConsentSet

Called when the consent is set.

| Property    | Type         | Description | Default |  Required  |
| :---------- | :----------- | :---------- | :------ | :--------: |
| preferences | ConsentState |             | -       | ✅ Required |

### onError

Called when an error occurs.

| Property | Type   | Description | Default |  Required  |
| :------- | :----- | :---------- | :------ | :--------: |
| error    | string |             | -       | ✅ Required |


# iframe blocking
URL: /docs/docs/frameworks/javascript/shared/iframe-blocking
Learn how to block iframes based on consent.
<section id="overview">
  ## Overview

  Iframe blocking is a feature that allows you to block iframes based on consent. This is useful for blocking iframes that are not allowed to load until consent is given.
  This should be used when an iframe sets cookies such as a YouTube embed.
</section>

<section id="headless-usage">
  ## Headless Usage

  ```html
  // Will render immediately - No blocking
  <iframe src="https://youtube.com/embed/unblocked" />

  // Does not render until consent is granted
  <iframe data-src="https://youtube.com/embed/123" data-category="marketing" />
  ```

  > ℹ️ **Info:**
  > The iframe blocker will only block iframes that have a data-category & data-src attribute.No fallback is provided for blocked iframes using this method.
</section>


# Internationalization (i18n)
URL: /docs/docs/frameworks/javascript/shared/internationalization
Learn how to add translations to your Consent Manager
<section id="overview">
  ## Overview

  c15t supports internationalization (i18n) through the `translations` property in the `ConsentManagerOptions` object and has support for both server-side and client-side rendering.

  | Server-side                                                                                                                                                                                                                                                                                                                                                                     | Client-side                                                                                                                                                                                                                            |
  | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
  | The best way to reduce bundle size and improve performance. We can detect the user's language based on the browser's language settings, allowing for the most accurate translations. By default, when using a [consent.io](https://consent.io) hosted instance, [these languages](https://github.com/c15t/c15t/tree/main/packages/translations/src/translations) are supported. | Bundled with the application allowing for multiple languages to be supported without the need for a backend. The more translations you have, the larger the bundle size will be, which may impact the performance of your application. |

  c15t supports partial translations, letting you supply only the changed keys without passing the whole translations object. When a requested language isn't available, the system falls back to the configured default/base language. Client-side translations take precedence over server-side translations, so client values override server values.
</section>

<section id="types">
  ## Types

  ### TranslationConfig

  | Property    | Value                                    |
  | :---------- | :--------------------------------------- |
  | Type Name   | \`TranslationConfig\`                    |
  | Source Path | \`./packages/translations/src/index.ts\` |

  \*AutoTypeTable: Could not extract \`TranslationConfig\` from \`./packages/translations/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*

  ### Translations

  | Property             | Type                                                                                                                                                                                                                                                   | Description | Default |  Required  |
  | :------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------- | :------ | :--------: |
  | common               | Partial\<CommonTranslations>                                                                                                                                                                                                                           |             | -       | ✅ Required |
  | cookieBanner         | Partial\<CookieBannerTranslations>                                                                                                                                                                                                                     |             | -       | ✅ Required |
  | consentManagerDialog | Partial\<ConsentManagerDialogTranslations>                                                                                                                                                                                                             |             | -       | ✅ Required |
  | consentTypes         | \{ experience?: Partial\<ConsentTypeTranslations>; functionality?: Partial\<ConsentTypeTranslations>; marketing?: Partial\<ConsentTypeTranslations>; measurement?: Partial\<ConsentTypeTranslations>; necessary?: Partial\<ConsentTypeTranslations>; } |             | -       | ✅ Required |
  | frame                | Partial\<FrameTranslations>                                                                                                                                                                                                                            |             | -       |  Optional  |

  ### CommonTranslations

  | Property  | Type   | Description | Default |  Required  |
  | :-------- | :----- | :---------- | :------ | :--------: |
  | acceptAll | string |             | -       | ✅ Required |
  | rejectAll | string |             | -       | ✅ Required |
  | customize | string |             | -       | ✅ Required |
  | save      | string |             | -       | ✅ Required |

  ### CookieBannerTranslations

  | Property    | Type   | Description | Default |  Required  |
  | :---------- | :----- | :---------- | :------ | :--------: |
  | title       | string |             | -       | ✅ Required |
  | description | string |             | -       | ✅ Required |

  ### ConsentManagerDialogTranslations

  | Property    | Type   | Description | Default |  Required  |
  | :---------- | :----- | :---------- | :------ | :--------: |
  | title       | string |             | -       | ✅ Required |
  | description | string |             | -       | ✅ Required |

  ### ConsentTypeTranslations

  | Property    | Type   | Description | Default |  Required  |
  | :---------- | :----- | :---------- | :------ | :--------: |
  | title       | string |             | -       | ✅ Required |
  | description | string |             | -       | ✅ Required |
</section>


# Script Loader
URL: /docs/docs/frameworks/javascript/shared/script-loader
Load scripts based on consent. Used to load scripts that are not necessary for the users consent, such as analytics scripts.
<section id="tracking-blocker">
  > ℹ️ **Info:**
  > When using the Script Loader, the tracking blocker will be disabled automatically (If enabled). This is because the tracking blocker is deprecated and may cause conflicts with the script loader. The current approach of the tracking blocker will only be available in v1.x of c15t, and will be removed in v2.0.
</section>

<section id="overview">
  ## Overview

  c15t provides the ability to load and unload scripts based on consent. This is useful for loading scripts that are not necessary for the user's consent, such as analytics scripts.

  One common flaw of CMPs is they'll maintain a list of scripts that are blocked and then unblocked based on consent. This is a problem because it's not always accurate and can lead to scripts being missed or incorrectly blocked.

  Our approach gives you, the developer, full control over the scripts that are loaded and unloaded, as no one knows your site better than you do.
</section>

<section id="prebuilt-scripts">
  ## Prebuilt Scripts

  A lot of scripts you may need to implement may be common, such as Google Tag Manager (GTM), PostHog, Meta Pixel, etc. To save you time, we have provided a set of prebuilt scripts for you to use.

  These scripts are available in the `@c15t/scripts` package.
</section>

<section id="scripts-table">
  ### All Prebuilt Scripts

  | Script             | Guide                                          |
  | ------------------ | ---------------------------------------------- |
  | Google Tag Manager | [Guide](/docs/integrations/google-tag-manager) |
  | Meta Pixel         | [Guide](/docs/integrations/meta-pixel)         |
  | PostHog            | [Guide](/docs/integrations/posthog)            |
  | TikTok Pixel       | [Guide](/docs/integrations/tiktok-pixel)       |
  | LinkedIn Insights  | [Guide](/docs/integrations/linkedin-insights)  |
  | Microsoft UET      | [Guide](/docs/integrations/microsoft-uet)      |
  | X Pixel            | [Guide](/docs/integrations/x-pixel)            |
</section>

<section id="always-load">
  ## Always Load Scripts

  Some tracking scripts, like Google Tag Manager or PostHog, manage their own consent state internally. For these scripts, you'll want them to load immediately and never be unloaded, regardless of the consent state in c15t.

  The `alwaysLoad` property allows you to bypass consent checks and ensure these scripts are always present on the page.

  ### When to Use Always Load

  Use `alwaysLoad: true` for:

  - **Tag Management Systems** (e.g., Google Tag Manager) that handle consent internally
  - **Analytics Platforms** (e.g., PostHog) with built-in consent management & cookieless behavior
  - **Scripts that must initialize early** and configure themselves based on consent

  > ⚠️ **Warning:**
  > When using alwaysLoad, you are responsible for ensuring the script respects user consent through its own consent management API. The script will load regardless of the user's consent choices in c15t.

  ### Behavior

  Scripts with `alwaysLoad: true` have the following characteristics:

  - **Load immediately** when the consent manager initializes, bypassing consent checks
  - **Never unload** when consent is revoked or changed
  - **Persist through** `clearAllScripts` calls
  - **Still trigger callbacks** like `onBeforeLoad`, `onLoad`, and `onConsentChange`
</section>

<section id="script-type">
  ### Script

  | Property                   | Type                               | Description| Default |  Required  |
  | :------------------------- | :--------------------------------- || :------ | :--------: |
  | id                         | string                             | Unique identifier for the script| -       | ✅ Required |
  | src                        | string                             | URL of the script to load| -       |  Optional  |
  | textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
  | category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
  | callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
  | persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | false   |  Optional  |
  | alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
  | fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | -       |  Optional  |
  | attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
  | async                      | boolean                            | Whether to use async loading| -       |  Optional  |
  | defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
  | nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
  | anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
  | onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
  | onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
  | onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
  | onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
  | onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |
</section>


# Checking consent
URL: /docs/docs/frameworks/javascript/shared/store/checking-consent
Check if the user has given consent for a specific purpose with the has() method.
The `has()` method returns a `boolean` value and checks if the user has given consent for a specific purpose. It allows for simple & complex checks. This can be used to conditionally render content based on the user's consent, for example.

```tsx
// Simple check
const hasAnalytics = has('measurement');
const hasMarketing = has('marketing');

// Complex check
const hasAnalyticsAndMarketing = has({
  and: ['measurement', 'marketing'],
})

const hasEitherAnalyticsOrMarketing = has({
  or: ['measurement', 'marketing'],
})

const doesNotHaveMarketing = has({
  not: 'marketing',
})

// Nested checks
const condition = has({
  and: [
    'necessary',
    { or: ['measurement', 'marketing'] },
    { not: 'advertising' },
  ]
})
```


# Location Info
URL: /docs/docs/frameworks/javascript/shared/store/location-info
How to view and update the users location
The `locationInfo` property stores the user's location (for example, to determine whether to show an EU GDPR banner).

This property is updated when the consent banner is fetched, and defaults to null when the location cannot be determined, such as in offline mode.
The location information can be updated via the `setLocationInfo()` method, which accepts a LocationInfo object or null.

## Usage

```tsx
setLocationInfo({
  countryCode: 'US',
  regionCode: 'CA',
  jurisdiction: 'CCPA'
});

console.log(locationInfo);
```

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`LocationInfo\`                 |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`LocationInfo\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Overview
URL: /docs/docs/frameworks/javascript/shared/store/overview
The store is a global state that can be used to access the consent managers state.
<section id="overview">
  The store is the global state for the consent manager. It includes the user's consent preferences, location, consent banner state, and methods to update them.
</section>

<section id="returns">
  ## Returns

  | Property    | Value                            |
  | :---------- | :------------------------------- |
  | Type Name   | \`PrivacyConsentState\`          |
  | Source Path | \`./packages/core/src/index.ts\` |

  \*AutoTypeTable: Could not extract \`PrivacyConsentState\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*
</section>


# Setting consent
URL: /docs/docs/frameworks/javascript/shared/store/setting-consent
Methods for managing a users consent.
### setSelectedConsent()

This method sets a user's consent choice but doesn't save it.

```tsx
setSelectedConsent('marketing', true) 
```

### saveConsents()

This method should be called after the user saves their consent preferences, e.g., via an 'Accept all' button or a dialog save. This function handles logic such as calling the backend and the `onConsentSet` callback.

```tsx
saveConsents('all') // User has accepted to all
saveConsents('custom') // Uses the consents set by setSelectedConsent()
saveConsents('necessary') // User rejects all 
```

### setConsent()

Useful for buttons like "Enable Marketing Consent", this will save the user's new consent by calling `saveConsents()`.

```tsx
setConsent('marketing', true) 
```


# Hosted
URL: /docs/docs/frameworks/javascript/shared/storing-consent/hosted
Use consent.io for an easy, managed consent storage solution with minimal setup
<section id="overview">
  ## Managed Service vs Self-Hosting

  Using [consent.io](https://consent.io) is the easiest way to get started with c15t. It's a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates, and compliance monitoring. For organizations with specific requirements, we also offer [self-hosting](/docs/self-host/v2) options.

  ## Using consent.io

  > ℹ️ **Info:**
  > Congratulations, you've chosen the best way to deploy to production!consent.io provides a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates & analytics. For organizations with specific requirements, it is possible to self-host the backend, allowing you to have full control over your data.

  ### Key Benefits

  - **Zero Backend Maintenance** - No server setup or management required
  - **Automatic Updates** - Easy updates & migrations to new versions
  - **Built-in Scaling** - Handles traffic spikes without configuration
  - **Geographic Detection** - Built-in jurisdiction detection for compliance
  - **Analytics Dashboard** - Insights into consent patterns and compliance
</section>

<section id="using-consent-io">
  ### Creating an instance with consent.io

  1. **Sign up for a consent.io account**

  2. **Create a new instance in the dashboard** For production applications, we recommend enabling usage billing so you can configure your instance to only allow trusted origins to send requests to it.

  3. **Copy the provided backendURL (e.g., https\://your-instance.c15t.dev)**
</section>


# Offline
URL: /docs/docs/frameworks/javascript/shared/storing-consent/offline
Store consent decisions in the browser with offline mode, perfect for sites without backend requirements
<section id="overview">
  The offline mode provides a simple, browser-based approach to storing user consent decisions without requiring a backend server.

  ## Key Characteristics

  - **No backend required** - Everything is stored locally in the browser
  - **Simplified setup** - Get started quickly with minimal configuration
  - **Independence** - Works without external services or APIs
  - **Fast implementation** - Ideal for prototyping and simpler sites
</section>

<section id="how-it-works">
  ## How It Works

  > ℹ️ **Info:**
  > Offline mode provides the same API interface as the standard client but operates completely client-side.

  The offline mode implements the same interface as the standard client, but with the following differences:

  1. **Storage**: All consent preferences are stored in the browser's localStorage using the configured key
  2. **Network**: No network requests are made, all operations happen locally
  3. **Consent Banner**: The banner visibility is determined by checking if a value exists in localStorage
  4. **Consent Verification**: Always returns a successful response
</section>


# Overview
URL: /docs/docs/frameworks/javascript/shared/storing-consent/overview
Compare different approaches to storing consent decisions in your application
## Available Storage Options

| Storage Option | Description                                      | Best For                                                                                          | Guide                                                        |
| -------------- | ------------------------------------------------ | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
| **Hosted**     | Using consent.io managed service or self-hosting | Production apps with minimal backend maintenance or Organizations requiring complete data control | [Guide](/docs/frameworks/javascript/storing-consent/hosted)  |
| **Offline**    | Browser-based storage with no server             | Simple implementations or dev environments                                                        | [Guide](/docs/frameworks/javascript/storing-consent/offline) |
| **Custom**     | Fully customized storage implementation          | Complex integrations with existing systems                                                        | TBD                                                          |

> 💡 **Tip:**
> For most applications, we recommend starting with Hosted (consent.io) for the simplest setup with the most features.

## Choosing the Right Approapusch

Use this flowchart to determine which c15t configuration is best for your needs:

```mermaid
flowchart TD
Start([Start here]) --> StoreConsent

StoreConsent{Need to store
consent choices?}
StoreConsent -->|Yes| ManagedService
StoreConsent -->|No| OfflineMode

ManagedService{Want a managed
service?}
ManagedService -->|Yes| ConsentIO
ManagedService -->|No| SelfHosted

OfflineMode([c15t Offline Mode]):::optionStyle
OfflineMode -.-> OfflineNote[Client-side only
Stores in localStorage]:::noteStyle

ConsentIO([consent.io]):::recommendStyle
ConsentIO -.-> ConsentIONote[Fully managed
Simplest setup]:::noteStyle

SelfHosted([Self-hosted Instance]):::optionStyle
SelfHosted -.-> SelfHostedNote[Full control
Requires maintenance]:::noteStyle
```


# Translation Types
URL: /docs/docs/frameworks/javascript/shared/translation-types
Various translation types for c15t
### Translations

| Property             | Type                                                                                                                                                                                                                                                   | Description | Default |  Required  |
| :------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------- | :------ | :--------: |
| common               | Partial\<CommonTranslations>                                                                                                                                                                                                                           |             | -       | ✅ Required |
| cookieBanner         | Partial\<CookieBannerTranslations>                                                                                                                                                                                                                     |             | -       | ✅ Required |
| consentManagerDialog | Partial\<ConsentManagerDialogTranslations>                                                                                                                                                                                                             |             | -       | ✅ Required |
| consentTypes         | \{ experience?: Partial\<ConsentTypeTranslations>; functionality?: Partial\<ConsentTypeTranslations>; marketing?: Partial\<ConsentTypeTranslations>; measurement?: Partial\<ConsentTypeTranslations>; necessary?: Partial\<ConsentTypeTranslations>; } |             | -       | ✅ Required |
| frame                | Partial\<FrameTranslations>                                                                                                                                                                                                                            |             | -       |  Optional  |

### CommonTranslations

| Property  | Type   | Description | Default |  Required  |
| :-------- | :----- | :---------- | :------ | :--------: |
| acceptAll | string |             | -       | ✅ Required |
| rejectAll | string |             | -       | ✅ Required |
| customize | string |             | -       | ✅ Required |
| save      | string |             | -       | ✅ Required |

### CookieBannerTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |

### ConsentManagerDialogTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |

### ConsentTypeTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |


# Checking consent
URL: /docs/docs/frameworks/javascript/store/checking-consent
Check if the user has given consent for a specific purpose with the has() method.
The `has()` method returns a `boolean` value and checks if the user has given consent for a specific purpose. It allows for simple & complex checks. This can be used to conditionally render content based on the user's consent, for example.

```tsx
// Simple check
const hasAnalytics = has('measurement');
const hasMarketing = has('marketing');

// Complex check
const hasAnalyticsAndMarketing = has({
  and: ['measurement', 'marketing'],
})

const hasEitherAnalyticsOrMarketing = has({
  or: ['measurement', 'marketing'],
})

const doesNotHaveMarketing = has({
  not: 'marketing',
})

// Nested checks
const condition = has({
  and: [
    'necessary',
    { or: ['measurement', 'marketing'] },
    { not: 'advertising' },
  ]
})
```


# Location Info
URL: /docs/docs/frameworks/javascript/store/location-info
How to view and update the users location
The `locationInfo` property stores the user's location (for example, to determine whether to show an EU GDPR banner).

This property is updated when the consent banner is fetched, and defaults to null when the location cannot be determined, such as in offline mode.
The location information can be updated via the `setLocationInfo()` method, which accepts a LocationInfo object or null.

## Usage

```tsx
setLocationInfo({
  countryCode: 'US',
  regionCode: 'CA',
  jurisdiction: 'CCPA'
});

console.log(locationInfo);
```

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`LocationInfo\`                 |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`LocationInfo\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Overview
URL: /docs/docs/frameworks/javascript/store/overview
The store is a global state that can be used to access the consent managers state.
The store is the global state for the consent manager. It includes the user's consent preferences, location, consent banner state, and methods to update them.

## Usage

```ts
import { createConsentManagerStore } from 'c15t';

const store = createConsentManagerStore(consentManager);

const hasFunctionality = store.getState().has('functionality');
```

## Returns

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`PrivacyConsentState\`          |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`PrivacyConsentState\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Setting consent
URL: /docs/docs/frameworks/javascript/store/setting-consent
Learn how to manage a users consent
### setSelectedConsent()

This method sets a user's consent choice but doesn't save it.

```tsx
setSelectedConsent('marketing', true) 
```

### saveConsents()

This method should be called after the user saves their consent preferences, e.g., via an 'Accept all' button or a dialog save. This function handles logic such as calling the backend and the `onConsentSet` callback.

```tsx
saveConsents('all') // User has accepted to all
saveConsents('custom') // Uses the consents set by setSelectedConsent()
saveConsents('necessary') // User rejects all 
```

### setConsent()

Useful for buttons like "Enable Marketing Consent", this will save the user's new consent by calling `saveConsents()`.

```tsx
setConsent('marketing', true) 
```


# Hosted
URL: /docs/docs/frameworks/javascript/storing-consent/hosted
Use consent.io for an easy, managed consent storage solution with minimal setup
## Managed Service vs Self-Hosting

Using [consent.io](https://consent.io) is the easiest way to get started with c15t. It's a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates, and compliance monitoring. For organizations with specific requirements, we also offer [self-hosting](/docs/self-host/v2) options.

## Using consent.io

> ℹ️ **Info:**
> Congratulations, you've chosen the best way to deploy to production!consent.io provides a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates & analytics. For organizations with specific requirements, it is possible to self-host the backend, allowing you to have full control over your data.

### Key Benefits

- **Zero Backend Maintenance** - No server setup or management required
- **Automatic Updates** - Easy updates & migrations to new versions
- **Built-in Scaling** - Handles traffic spikes without configuration
- **Geographic Detection** - Built-in jurisdiction detection for compliance
- **Analytics Dashboard** - Insights into consent patterns and compliance

## Implementation

```tsx
import { configureConsentManager, type ConsentManagerOptions } from 'c15t';

export const c15tConfig: ConsentManagerOptions = {
  mode: 'c15t',
  backendURL: "https://your-instance.c15t.dev",
  consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner. 
  ignoreGeoLocation: true, // Useful for development to always view the banner.
};

const c15t = configureConsentManager(c15tConfig);
```

### Creating an instance with consent.io

1. **Sign up for a consent.io account**

2. **Create a new instance in the dashboard** For production applications, we recommend enabling usage billing so you can configure your instance to only allow trusted origins to send requests to it.

3. **Copy the provided backendURL (e.g., https\://your-instance.c15t.dev)**


# Offline
URL: /docs/docs/frameworks/javascript/storing-consent/offline
Store consent decisions in the browser with offline mode, perfect for sites without backend requirements
The offline mode provides a simple, browser-based approach to storing user consent decisions without requiring a backend server.

## Key Characteristics

- **No backend required** - Everything is stored locally in the browser
- **Simplified setup** - Get started quickly with minimal configuration
- **Independence** - Works without external services or APIs
- **Fast implementation** - Ideal for prototyping and simpler sites

## Implementation

```tsx
import { configureConsentManager, type ConsentManagerOptions } from 'c15t';

export const c15tConfig: ConsentManagerOptions = {
  mode: 'offline',
  consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner. 
};

const c15t = configureConsentManager(c15tConfig);
```

## How It Works

> ℹ️ **Info:**
> Offline mode provides the same API interface as the standard client but operates completely client-side.

The offline mode implements the same interface as the standard client, but with the following differences:

1. **Storage**: All consent preferences are stored in the browser's localStorage using the configured key
2. **Network**: No network requests are made, all operations happen locally
3. **Consent Banner**: The banner visibility is determined by checking if a value exists in localStorage
4. **Consent Verification**: Always returns a successful response


# Overview
URL: /docs/docs/frameworks/javascript/storing-consent/overview
Compare different approaches to storing consent decisions in your application
## Available Storage Options

| Storage Option | Description                                      | Best For                                                                                          | Guide                                                        |
| -------------- | ------------------------------------------------ | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
| **Hosted**     | Using consent.io managed service or self-hosting | Production apps with minimal backend maintenance or Organizations requiring complete data control | [Guide](/docs/frameworks/javascript/storing-consent/hosted)  |
| **Offline**    | Browser-based storage with no server             | Simple implementations or dev environments                                                        | [Guide](/docs/frameworks/javascript/storing-consent/offline) |
| **Custom**     | Fully customized storage implementation          | Complex integrations with existing systems                                                        | TBD                                                          |

> 💡 **Tip:**
> For most applications, we recommend starting with Hosted (consent.io) for the simplest setup with the most features.

## Choosing the Right Approapusch

Use this flowchart to determine which c15t configuration is best for your needs:

```mermaid
flowchart TD
Start([Start here]) --> StoreConsent

StoreConsent{Need to store
consent choices?}
StoreConsent -->|Yes| ManagedService
StoreConsent -->|No| OfflineMode

ManagedService{Want a managed
service?}
ManagedService -->|Yes| ConsentIO
ManagedService -->|No| SelfHosted

OfflineMode([c15t Offline Mode]):::optionStyle
OfflineMode -.-> OfflineNote[Client-side only
Stores in localStorage]:::noteStyle

ConsentIO([consent.io]):::recommendStyle
ConsentIO -.-> ConsentIONote[Fully managed
Simplest setup]:::noteStyle

SelfHosted([Self-hosted Instance]):::optionStyle
SelfHosted -.-> SelfHostedNote[Full control
Requires maintenance]:::noteStyle
```


# Callbacks
URL: /docs/docs/frameworks/next/callbacks
Learn how to use callbacks to respond to c15t events in your Next.js application.
## Implementing Callbacks

**App Directory**

Due to the nature of Next.js App Directory, we have to define callbacks to run in a client component.

```ts title="app/layout.client.tsx"
'use client';

import { ConsentManagerCallbacks } from '@c15t/nextjs/client';

export function ClientLayout() {
	return (
		<ConsentManagerCallbacks
			callbacks={{
				onBannerFetched(response) {
					console.log('Consent banner fetched', response);
				},
				onConsentSet(response) {
					console.log('Consent has been saved locally', response);
				},
				onError(error) {
					console.log('Error', error);
				},
			}}
		/>
	);
}
```

> ℹ️ **Info:**
> Ensure you import this component inside the ConsentManagerProvider component in your app/layout.tsx file.

```ts title="app/layout.tsx"
import { ConsentManagerProvider } from '@c15t/nextjs';
import { ClientLayout } from './layout.client';
import type { ReactNode } from 'react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <ConsentManagerProvider options={{
      // your options here
    }}>
      <ClientLayout />
      {children}
    </ConsentManagerProvider>
  );
}
```

**Pages Directory**

```ts title="pages/_app.tsx"
import { ConsentManagerProvider } from '@c15t/nextjs/pages';
import type { AppProps } from 'next/app';

export default function App({ Component, pageProps }: AppProps) {
return (
<ConsentManagerProvider options={{
  callbacks: {
    onBannerFetched(response) {
      console.log('Consent banner fetched', response);
    },
    onConsentSet(response) {
      console.log('Consent has been saved', response);
    },
    onError(error) {
      console.log('Error', error);
    },
  }
}}>
  <Component {...pageProps} />
</ConsentManagerProvider>
);
}

```

## Available callbacks

### onBannerFetched

Called when the consent banner is fetched; not invoked when the banner is in offline mode.

| Property          | Type                                               | Description | Default |  Required  |
| :---------------- | :------------------------------------------------- | :---------- | :------ | :--------: |
| showConsentBanner | boolean                                            |             | -       | ✅ Required |
| jurisdiction      | JurisdictionInfo                                   |             | -       | ✅ Required |
| location          | \{ countryCode: string; regionCode: string; }      |             | -       | ✅ Required |
| translations      | \{ language: string; translations: Translations; } |             | -       | ✅ Required |

### onConsentSet

Called when the consent is set.

| Property    | Type         | Description | Default |  Required  |
| :---------- | :----------- | :---------- | :------ | :--------: |
| preferences | ConsentState |             | -       | ✅ Required |

### onError

Called when an error occurs.

| Property | Type   | Description | Default |  Required  |
| :------- | :----- | :---------- | :------ | :--------: |
| error    | string |             | -       | ✅ Required |


# Consent Manager Dialog
URL: /docs/docs/frameworks/next/components/consent-manager-dialog
An accessible, animated modal interface that wraps the Consent Manager Widget for a focused privacy customization experience.
The Consent Manager Dialog provides a clean, focused way for users to customize their privacy preferences. This dialog is required by various privacy regulations like GDPR.

<ResponsivePreview
  src="https://c15t-examples.vercel.app/react/simple-consent-dialog"
  code={`
export function SimpleConsentDialog({ children }: { children?: ReactNode }) {
return (
<ConsentManagerProvider
options={{
mode: 'offline',
consentCategories: ['experience', 'marketing', 'functionality', 'necessary'],
}}
>
<ConsentManagerDialog />
<ConsentManagerDialogButton />
{children}
</ConsentManagerProvider>
);
}

function ConsentManagerDialogButton() {
const { setIsPrivacyDialogOpen, isPrivacyDialogOpen } = useConsentManager();

useEffect(() => {
setIsPrivacyDialogOpen(true);
}, [setIsPrivacyDialogOpen]);

if (isPrivacyDialogOpen) {
return null;
}

return (
<button type="button" onClick={() => setIsPrivacyDialogOpen(!isPrivacyDialogOpen)}>
Open Consent Dialog
</button>
);
}
`}
  expectedHeight={600}
/>

## Usage

**Recommended**

```tsx
import { ConsentManagerProvider, CookieBanner, ConsentManagerDialog } from "@c15t/react";

export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CookieBanner /> 
      <ConsentManagerDialog />
    </ConsentManagerProvider>
  );
};

```

**expanded**

```tsx
import { ConsentManagerProvider, CookieBanner, ConsentManagerWidget } from "@c15t/react";

const CustomDialog = () => {
	return (
    <ConsentManagerDialog.Root>
      <ConsentManagerDialog.Card>
        <ConsentManagerDialog.Header>
          <ConsentManagerDialog.HeaderTitle>
            Custom Title
          </ConsentManagerDialog.HeaderTitle>
          <ConsentManagerDialog.HeaderDescription>
            Custom Description
          </ConsentManagerDialog.HeaderDescription>
        </ConsentManagerDialog.Header>
        <ConsentManagerDialog.Content>
          <ConsentManagerWidget />
        </ConsentManagerDialog.Content>
        <ConsentManagerDialog.Footer themeKey="dialog.footer">
          Custom Footer
        </ConsentManagerDialog.Footer>
      </ConsentManagerDialog.Card>
    </ConsentManagerDialog.Root>
	);
};


export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CookieBanner />
      <CustomDialog /> 
    </ConsentManagerProvider>
  );
};
```

## Styling

The Consent Manager Dialog is designed to adapt to your application's visual style. Learn more about our [styling system](/docs/react/styling/overview).

### Theme Variables

These keys are available on the theme object to customize your dialog.

The dialog also contains the `ConsentManagerWidget` component so the theme keys are available to customize the widget.

| Property                  | Type| Description                              | Default |  Required  |
| :------------------------ || :--------------------------------------- | :------ | :--------: |
| ConsentManagerDialogTheme | Partial\<\{ dialog: import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.root': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.header': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.title': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.description': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.content': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.footer': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.overlay': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; } & Partial\<\{ 'widget.root': ThemeValue; 'widget.branding': ThemeValue; 'widget.footer': ThemeValue; 'widget.footer.sub-group': ThemeValue; 'widget.footer.reject-button': ThemeValue; 'widget.footer.accept-button': ThemeValue; 'widget.footer.customize-button': ThemeValue; 'widget.footer.save-button': ThemeValue; 'widget.accordion': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionRootCSSVariables>; 'widget.accordion.trigger': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.trigger-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.item': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionItemCSSVariables>; 'widget.accordion.icon': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.open': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.close': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.content': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.accordion.content-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.switch': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchCSSVariables>; 'widget.switch.track': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchTrackCSSVariables>; 'widget.switch.thumb': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchThumbCSSVariables>; }>> | Type alias for ConsentManagerDialogTheme | -       | ✅ Required |

## Accessibility Features

The dialog implements several accessibility best practices:

### Focus Management

When the dialog opens, it:

1. Traps focus within the dialog
2. Sets initial focus on the first interactive element
3. Remembers and restores the previous focus position when closed

### Focus Trapping

The dialog implements focus trapping to ensure keyboard navigation remains within the dialog while it's open. This is crucial for:

- **Keyboard users**: Prevents users from accidentally interacting with content hidden behind the modal
- **Screen reader users**: Maintains proper context and prevents confusion
- **WCAG compliance**: Supports 2.4.3 Focus Order and provides proper modal functionality

#### How Focus Trapping Works

The `ConsentManagerDialog` uses the `useFocusTrap` hook internally to:

1. Capture the element that had focus before the dialog opened
2. Set initial focus to the first interactive element inside the dialog
3. Keep focus cycling within the dialog when users press Tab or Shift+Tab
4. Restore focus to the original element when the dialog closes

You can control focus trapping with the `trapFocus` prop:

```tsx
// Default behavior (recommended for accessibility)
<ConsentManagerDialog trapFocus={true} />

// Disable focus trapping (not recommended)
<ConsentManagerDialog trapFocus={false} />
```

> ℹ️ **Info:**
> Focus trapping is enabled by default and is recommended for WCAG compliance. Only disable it if you have a specific reason and are implementing alternative accessibility measures.

### Keyboard Navigation

Users can:

- Close the dialog with the Escape key
- Navigate controls with Tab
- Interact with all elements using only the keyboard

### Screen Readers

The dialog announces itself appropriately with:

- Proper ARIA roles and attributes
- Clear labeling of controls
- Status updates when opened/closed

## API Reference

### ConsentManagerDialog

The main component accepts these props:

| Property | Type    | Description                                                                                            | Default | Required |
| :------- | :------ | :----------------------------------------------------------------------------------------------------- | :------ | :------: |
| open     | boolean | Control the open state. If omitted the dialog follows&#xA;\`useConsentManager().isPrivacyDialogOpen\`. | -       | Optional |

### Compound Components

| Property                 | Type | Description | Default |  Required  |
| :----------------------- | :--- | :---------- | :------ | :--------: |
| Card                     | any  |             | -       | ✅ Required |
| Header                   | any  |             | -       | ✅ Required |
| HeaderTitle              | any  |             | -       | ✅ Required |
| HeaderDescription        | any  |             | -       | ✅ Required |
| Content                  | any  |             | -       | ✅ Required |
| Footer                   | any  |             | -       | ✅ Required |
| ConsentCustomizationCard | any  |             | -       | ✅ Required |
| DialogFooter             | any  |             | -       | ✅ Required |
| DialogHeader             | any  |             | -       | ✅ Required |
| DialogHeaderTitle        | any  |             | -       | ✅ Required |
| DialogHeaderDescription  | any  |             | -       | ✅ Required |
| DialogContent            | any  |             | -       | ✅ Required |
| Overlay                  | any  |             | -       | ✅ Required |
| Root                     | any  |             | -       | ✅ Required |


# Consent Manager Widget
URL: /docs/docs/frameworks/next/components/consent-manager-widget
A flexible, composable widget for building custom privacy consent interfaces. The widget provides granular control over privacy preferences while handling all the compliance requirements for you.
The Consent Manager Widget allows for detailed privacy consent management in your application. While the Cookie Banner handles initial consent, this widget enables users to fine-tune their privacy preferences through an intuitive accordion interface.

If you just want a dialog, consider using the [Consent Manager Dialog](/docs/frameworks/react/components/consent-manager-dialog) instead (which handles the overlay logic for you).

## Usage

**Recommended**

```tsx
import { ConsentManagerProvider,  ConsentManagerWidget } from "@c15t/react";
import { useState } from 'react';

export default function App() {
  const [isWidgetOpen, setIsWidgetOpen] = useState(false);

  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev/',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <button type="button" onClick={() => setIsWidgetOpen(!isWidgetOpen)}>
        {isWidgetOpen ? 'Close' : 'Open'}
      </button>

      {isWidgetOpen && (
        <div className="w-1/2 rounded-lg bg-white px-5 pt-8">
          <ConsentManagerWidget />
        </div>
      )}
    </ConsentManagerProvider>
  );
};

```

**expanded**

```tsx
import { ConsentManagerProvider, ConsentManagerWidget } from "@c15t/react";

const CustomWidget = () => {
	return (
			<div className="w-1/2 rounded-lg bg-white px-5 pt-8">
				<ConsentManagerWidget.Root>
					<ConsentManagerWidget.Accordion
						themeKey="widget.accordion"
						type="multiple"
						value={openItems}
						onValueChange={setOpenItems}
					>
						<ConsentManagerWidget.AccordionItems />
					</ConsentManagerWidget.Accordion>
					<ConsentManagerWidget.Footer>
						<ConsentManagerWidget.FooterSubGroup themeKey="widget.footer.sub-group">
							<ConsentManagerWidget.RejectButton themeKey="widget.footer.reject-button">
								Reject All Text
							</ConsentManagerWidget.RejectButton>
							<ConsentManagerWidget.AcceptAllButton themeKey="widget.footer.accept-button">
								Accept All
							</ConsentManagerWidget.AcceptAllButton>
						</ConsentManagerWidget.FooterSubGroup>
						<ConsentManagerWidget.SaveButton themeKey="widget.footer.save-button">
							Save
						</ConsentManagerWidget.SaveButton>
					</ConsentManagerWidget.Footer>
				</ConsentManagerWidget.Root>
			</div>
	);
};


export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev/',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <button type="button" onClick={() => setIsWidgetOpen(!isWidgetOpen)}>
        {isWidgetOpen ? 'Close' : 'Open'}
      </button>

      {isWidgetOpen && (
        <div className="w-1/2 rounded-lg bg-white px-5 pt-8">
          <CustomWidget />
        </div>
      )}
    </ConsentManagerProvider>
  );
};
```

## Styling

The Consent Manager Widget is designed to adapt to your application's visual style. Learn more about our [styling system](/docs/react/styling/overview).

### Theme Variables

These keys are available on the theme object to customize your banner.

| Property                  | Type| Description                              | Default |  Required  |
| :------------------------ || :--------------------------------------- | :------ | :--------: |
| ConsentManagerWidgetTheme | Partial\<\{ 'widget.root': ThemeValue; 'widget.branding': ThemeValue; 'widget.footer': ThemeValue; 'widget.footer.sub-group': ThemeValue; 'widget.footer.reject-button': ThemeValue; 'widget.footer.accept-button': ThemeValue; 'widget.footer.customize-button': ThemeValue; 'widget.footer.save-button': ThemeValue; 'widget.accordion': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionRootCSSVariables>; 'widget.accordion.trigger': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.trigger-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.item': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionItemCSSVariables>; 'widget.accordion.icon': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.open': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.close': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.content': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.accordion.content-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.switch': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchCSSVariables>; 'widget.switch.track': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchTrackCSSVariables>; 'widget.switch.thumb': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchThumbCSSVariables>; }> | Type alias for ConsentManagerWidgetTheme | -       | ✅ Required |

## API Reference

The main component accepts these props:

| Property    | Type    | Description | Default | Required |
| :---------- | :------ | :---------- | :------ | :------: |
| hideBrading | boolean |             | -       | Optional |

### Compound Components

| Property              | Type | Description | Default |  Required  |
| :-------------------- | :--- | :---------- | :------ | :--------: |
| AccordionTrigger      | any  |             | -       | ✅ Required |
| AccordionTriggerInner | any  |             | -       | ✅ Required |
| AccordionContent      | any  |             | -       | ✅ Required |
| AccordionArrow        | any  |             | -       | ✅ Required |
| Accordion             | any  |             | -       | ✅ Required |
| Switch                | any  |             | -       | ✅ Required |
| AccordionItems        | any  |             | -       | ✅ Required |
| AccordionItem         | any  |             | -       | ✅ Required |
| Root                  | any  |             | -       | ✅ Required |
| AcceptAllButton       | any  |             | -       | ✅ Required |
| CustomizeButton       | any  |             | -       | ✅ Required |
| SaveButton            | any  |             | -       | ✅ Required |
| RejectButton          | any  |             | -       | ✅ Required |
| Footer                | any  |             | -       | ✅ Required |
| FooterSubGroup        | any  |             | -       | ✅ Required |


# Cookie Banner
URL: /docs/docs/frameworks/next/components/cookie-banner
A customizable cookie consent banner that handles privacy compliance with zero configuration required.
The Cookie Banner component provides an elegant way to obtain and manage consent from your users. It handles all the complexity of privacy regulations while providing a smooth user experience that integrates naturally with your application.

<ResponsivePreview
  src="https://c15t-examples.vercel.app/react/simple-cookie-banner"
  code={`
export function SimpleCookieBanner({ children }: { children?: ReactNode }) {
return (
<ConsentManagerProvider
options={{
mode: 'offline',
consentCategories: ['experience', 'marketing', 'functionality', 'necessary'],
}}
>
<CookieBanner />
{children}
</ConsentManagerProvider>
);
}
`}
  expectedHeight={300}
/>

## Usage

The Cookie Banner uses a compound component pattern, giving you complete control over its structure when needed. Think of it like building blocks – you can use the pre-assembled version, or arrange the pieces yourself for custom layouts.

**Recommended**

```tsx
import { ConsentManagerProvider, CookieBanner } from "@c15t/react";

export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CookieBanner /> 
    </ConsentManagerProvider>
  );
};

```

**expanded**

```tsx
import { ConsentManagerProvider, CookieBanner } from "@c15t/react";

const CustomCookieBanner = () => {
	return (
    <CookieBanner.Root>
      <CookieBanner.Card>
        <CookieBanner.Header>
          <CookieBanner.Title>Custom Title</CookieBanner.Title>
          <CookieBanner.Description>
            Your detailed description here
          </CookieBanner.Description>
        </CookieBanner.Header>
        <CookieBanner.Footer>
          <CookieBanner.FooterSubGroup>
            <CookieBanner.RejectButton themeKey="banner.footer.customize-button">
              Decline All
            </CookieBanner.RejectButton>
            <CookieBanner.AcceptButton themeKey="banner.footer.customize-button">
              Accept All
            </CookieBanner.AcceptButton>
          </CookieBanner.FooterSubGroup>
          <CookieBanner.CustomizeButton themeKey="banner.footer.customize-button">
            Preferences
          </CookieBanner.CustomizeButton>
        </CookieBanner.Footer>
      </CookieBanner.Card>
    </CookieBanner.Root>
	);
};


export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CustomCookieBanner /> 
    </ConsentManagerProvider>
  );
};
```

## Styling

The Cookie Banner is designed to adapt to your application's visual style. Learn more about our [styling system](/docs/react/styling/overview).

### Theme Variables

These keys are available on the theme object to customize your banner.

| Property          | Type| Description                      | Default |  Required  |
| :---------------- || :------------------------------- | :------ | :--------: |
| CookieBannerTheme | Partial\<\{ 'banner.root': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<RootCSSVariables>; 'banner.card': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<CardCSSVariables>; 'banner.header.root': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<HeaderCSSVariables>; 'banner.header.title': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<TitleCSSVariables>; 'banner.header.description': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<DescriptionCSSVariables>; 'banner.footer': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<FooterCSSVariables>; 'banner.footer.sub-group': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'banner.footer.reject-button': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/button/button.types").ButtonCSSVariables>; 'banner.footer.customize-button': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/button/button.types").ButtonCSSVariables>; 'banner.footer.accept-button': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/button/button.types").ButtonCSSVariables>; 'banner.overlay': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<OverlayCSSVariables>; }> | Type alias for CookieBannerTheme | -       | ✅ Required |

## Scroll Locking

The Cookie Banner supports scroll locking, a technique that prevents users from interacting with your website until they've made a cookie consent choice.

```tsx
<CookieBanner lockScroll={true} />
```

When enabled, scroll locking:

- Prevents page scrolling and interaction
- Displays a background overlay
- Ensures users must make a privacy choice before accessing content

For best results, use scroll locking together with [focus trapping](#focus-trapping) to ensure complete keyboard accessibility.

> ℹ️ **Info:**
> For detailed implementation guides, best practices, and compliance considerations, see our Scroll Locking Guide.

## Accessibility

The Cookie Banner is built with accessibility in mind:

- Proper ARIA roles and labels (role="dialog", aria-modal="true")
- Keyboard navigation and interaction support
- Focus management and trapping
- Screen reader announcements
- Semantic HTML structure

These features work automatically, ensuring all users can interact with your privacy controls effectively.

### Focus Trapping

The Cookie Banner implements focus trapping when it's displayed, which is an essential accessibility feature that prevents keyboard focus from moving outside the banner. This behavior:

- **Ensures users complete the consent flow** before interacting with other page elements
- **Prevents accidental interaction** with content that shouldn't be accessible yet
- **Helps compliance** with accessibility guidelines like WCAG 2.4.3 (Focus Order)

> ℹ️ **Info:**
> Focus trapping is enabled by default and recommended for accessibility compliance. For more details on implementation and best practices, see our useFocusTrap hook documentation.

## Best Practices

Follow these guidelines for optimal implementation:

1. Place the banner at the root level of your application
2. Keep the title and description clear and concise
3. Use the pre-assembled version unless you need custom layouts
4. Test the banner across different screen sizes
5. Ensure your theme maintains sufficient contrast ratios
6. Consider [scroll locking](#scroll-locking) for strict compliance scenarios
7. Test with keyboard navigation to ensure accessibility

## API Reference

### CookieBanner

The main component accepts these props:

| Property            | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | Description                                                   | Default   | Required |
| :------------------ || :------------------------------------------------------------ | :-------- | :------: |
| theme               | Partial\<\{ 'banner.root': ThemeValue\<RootCSSVariables>; 'banner.card': ThemeValue\<CardCSSVariables>; 'banner.header.root': ThemeValue\<HeaderCSSVariables>; 'banner.header.title': ThemeValue\<TitleCSSVariables>; 'banner.header.description': ThemeValue\<DescriptionCSSVariables>; 'banner.footer': ThemeValue\<FooterCSSVariables>; 'banner.footer.sub-group': ThemeValue; 'banner.footer.reject-button': ThemeValue\<ButtonCSSVariables>; 'banner.footer.customize-button': ThemeValue\<ButtonCSSVariables>; 'banner.footer.accept-button': ThemeValue\<ButtonCSSVariables>; 'banner.overlay': ThemeValue\<OverlayCSSVariables>; }> | Custom styles to apply to the banner and its child components | undefined | Optional |
| noStyle             | boolean| When true, removes all default styling from the component     | false     | Optional |
| title               | ReactNode| Content to display as the banner's title                      | undefined | Optional |
| description         | ReactNode| Content to display as the banner's description                | undefined | Optional |
| rejectButtonText    | ReactNode                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Content to display on the reject button                       | undefined | Optional |
| customizeButtonText | ReactNode| Content to display on the customize button                    | undefined | Optional |
| acceptButtonText    | ReactNode| Content to display on the accept button                       | undefined | Optional |
| scrollLock          | boolean                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | When true, the cookie banner will lock the scroll of the page | false     | Optional |
| trapFocus           | boolean| When true, the cookie banner will trap focus                  | true      | Optional |
| disableAnimation    | boolean| When true, disables the entrance/exit animations              | false     | Optional |

### Compound Components

| Property        | Type | Description | Default |  Required  |
| :-------------- | :--- | :---------- | :------ | :--------: |
| Root            | any  |             | -       | ✅ Required |
| Card            | any  |             | -       | ✅ Required |
| Header          | any  |             | -       | ✅ Required |
| Title           | any  |             | -       | ✅ Required |
| Description     | any  |             | -       | ✅ Required |
| Footer          | any  |             | -       | ✅ Required |
| FooterSubGroup  | any  |             | -       | ✅ Required |
| RejectButton    | any  |             | -       | ✅ Required |
| CustomizeButton | any  |             | -       | ✅ Required |
| AcceptButton    | any  |             | -       | ✅ Required |
| Overlay         | any  |             | -       | ✅ Required |


# Frame
URL: /docs/docs/frameworks/next/components/frame
Conditionally render children based on consent, with a placeholder for when consent is not given.
The Frame component provides an elegant way to conditionally render children based on consent, with a placeholder for when consent is not given. This is designed perfectly for Iframe components like youtube embeds that should only be shown when consent is granted.

## Usage

The frame component provides a pre-built placeholder, however, this can be modified with a more custom placeholder to suit your needs.

**Recommended**

```tsx
export default function App() {
  return (
    <>
      <Frame category="marketing" style={{ width: '500px', height: '500px' }}>
        <iframe
          title="Cool Duck Video"
          src="https://www.youtube.com/embed/mQJ6q1ZCzsg"
          width="100%"
          height="100%"
        />
      </Frame>
    </>
  );
};

```

**expanded**

```tsx

const CustomFrame = () => {
	return (
   	<Frame.Root>
      <Frame.Title> hello </Frame.Title>
      <Frame.Button category="marketing"> world </Frame.Button>{' '}
    </Frame.Root>
	);
};


export default function App() {
  return (
   	<Frame
				category="marketing"
      style={{ width: '500px', height: '500px' }}
				placeholder={
					<CustomFrame />
				}
			>
				<iframe
					title="Cool Duck Video"
					src="https://www.youtube.com/embed/mQJ6q1ZCzsg"
					width="100%"
					height="100%"
				/>
			</Frame>
  );
};
```

## API Reference

### Frame

The main component accepts these props:

| Property    | Type                                                                                                                                                                               | Description                                                                                                                                        | Default   |  Required  |
| :---------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------- | :-------- | :--------: |
| children    | ReactNode                                                                                                                                                                          | Content rendered when consent is granted. Children are not mounted until&#xA;consent is given, preventing unnecessary network requests.            | -         | ✅ Required |
| category    | AllConsentNames                                                                                                                                                                    | Consent category required to render children.                                                                                                      | -         | ✅ Required |
| placeholder | ReactNode                                                                                                                                                                          | A custom placeholder component to display when consent is not met.&#xA;If not provided, a default placeholder will be displayed.                   | -         |  Optional  |
| noStyle     | boolean                                                                                                                                                                            | When true, removes all default styling from the component                                                                                          | false     |  Optional  |
| theme       | Partial\<\{ 'frame.placeholder.root': ThemeValue\<PlaceholderCSSVariables>; 'frame.placeholder.title': ThemeValue; 'frame.placeholder.button': ThemeValue\<ButtonCSSVariables>; }> | Custom theme to override default styles while maintaining structure and&#xA;accessibility. Merges with defaults. Ignored when \`noStyle=\{true}\`. | undefined |  Optional  |

### Compound Components

| Property | Type | Description | Default |  Required  |
| :------- | :--- | :---------- | :------ | :--------: |
| Root     | any  |             | -       | ✅ Required |
| Title    | any  |             | -       | ✅ Required |
| Button   | any  |             | -       | ✅ Required |


# Google Tag Manager
URL: /docs/docs/frameworks/next/google-tag-manager
Learn how to integrate c15t with Google Tag Manager (GTM).
c15t supports Google Tag Manager (GTM) out of the box. It will automatically inject the GTM script into your page and update the consent state in GTM. This feature is currently marked as experimental as we want feedback from users.

## Implementation

1. **Creating a Tag Manager Container**

   > ℹ️ Info:
   >
   > This step is optional if you already have a Tag Manager container. Ensure your container has consent overview enabled.

   After signing into Google Tag Manager, you can create a new container.
   Continue to Google Tag Manager

   In Tag Manager, click Admin > Container Settings.Under Additional Settings, select "Enable consent overview".

   Enable consent overview

2. **Setting up c15t with Google Tag Manager** After creating your container, you can set up c15t with Google Tag Manager.

   All you need to do copy and paste your container ID into the unstable\_googleTagManager.id property.

   This begins with "GTM-".

   ```tsx
   <ConsentManagerProvider
     options={{
       mode: 'c15t',
       backendURL: 'https://your-instance.c15t.dev',
       unstable_googleTagManager: {
         id: 'GTM-XXXXXXX',
       },
     }}
   >
   ```

   If you have GTM in your site already, you can remove the GTM script from your head section.

### All Done!

c15t will automatically inject the GTM script into your page and update the consent state in GTM.


# Headless
URL: /docs/docs/frameworks/next/headless
Reduce bundle size and improve performance by using the headless package.
If you are using your own custom components for c15t, you can use the headless package to reduce bundle size and improve performance. This package still exports all the same hooks and functions as the standard package, but without the UI components.

**App Directory**

```ts
import { ConsentManagerProvider } from '@c15t/nextjs/headless';
```

**Pages Directory**

```ts
import { ConsentManagerProvider } from '@c15t/nextjs/pages/headless';
```


# Checking consent
URL: /docs/docs/frameworks/next/hooks/use-consent-manager/checking-consent
Check if the user has given consent for a specific purpose with the has() method.
The `has()` method returns a `boolean` value and checks if the user has given consent for a specific purpose. It allows for simple & complex checks. This can be used to conditionally render content based on the user's consent, for example.

```tsx
// Simple check
const hasAnalytics = has('measurement');
const hasMarketing = has('marketing');

// Complex check
const hasAnalyticsAndMarketing = has({
  and: ['measurement', 'marketing'],
})

const hasEitherAnalyticsOrMarketing = has({
  or: ['measurement', 'marketing'],
})

const doesNotHaveMarketing = has({
  not: 'marketing',
})

// Nested checks
const condition = has({
  and: [
    'necessary',
    { or: ['measurement', 'marketing'] },
    { not: 'advertising' },
  ]
})
```


# Location Info
URL: /docs/docs/frameworks/next/hooks/use-consent-manager/location-info
How to view and update the users location
The `locationInfo` property stores the user's location (for example, to determine whether to show an EU GDPR banner).

This property is updated when the consent banner is fetched, and defaults to null when the location cannot be determined, such as in offline mode.
The location information can be updated via the `setLocationInfo()` method, which accepts a LocationInfo object or null.

## Usage

```tsx
setLocationInfo({
  countryCode: 'US',
  regionCode: 'CA',
  jurisdiction: 'CCPA'
});

console.log(locationInfo);
```

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`LocationInfo\`                 |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`LocationInfo\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Overview
URL: /docs/docs/frameworks/next/hooks/use-consent-manager/overview
The useConsentManager hook is a React hook that provides access to the consent managers state.
The store is the global state for the consent manager. It includes the user's consent preferences, location, consent banner state, and methods to update them.

## Usage

```tsx
import { useConsentManager } from '@c15t/react';

const { has } = useConsentManager();

const hasFunctionality = has('functionality');
```

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`PrivacyConsentState\`          |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`PrivacyConsentState\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Setting consent
URL: /docs/docs/frameworks/next/hooks/use-consent-manager/setting-consent
Learn how to manage a users consent
### setSelectedConsent()

This method sets a user's consent choice but doesn't save it.

```tsx
setSelectedConsent('marketing', true) 
```

### saveConsents()

This method should be called after the user saves their consent preferences, e.g., via an 'Accept all' button or a dialog save. This function handles logic such as calling the backend and the `onConsentSet` callback.

```tsx
saveConsents('all') // User has accepted to all
saveConsents('custom') // Uses the consents set by setSelectedConsent()
saveConsents('necessary') // User rejects all 
```

### setConsent()

Useful for buttons like "Enable Marketing Consent", this will save the user's new consent by calling `saveConsents()`.

```tsx
setConsent('marketing', true) 
```


# useFocusTrap
URL: /docs/docs/frameworks/next/hooks/use-focus-trap
The useFocusTrap hook provides accessibility-focused keyboard navigation management, keeping focus trapped within modal components for better user experience.
The `useFocusTrap` hook creates an accessible experience by preventing keyboard focus from leaving a specific container element (like a dialog or modal) until it's dismissed. This is essential for users navigating with keyboards or screen readers.

## Usage

```tsx
import { useRef } from 'react';
import { useFocusTrap } from '@c15t/react';

const CustomCard = ({ children, ref, ...props }) => {
  const localRef = useRef(null);
  const cardRef = ref || localRef;
  
  useFocusTrap(true, cardRef);
  
  return (
    <div
      ref={cardRef}
      tabIndex={0}
      aria-modal={true}
      role="dialog"
      {...props}
    >
      {children}
    </div>
  );
};
```

## How It Works

When activated, the `useFocusTrap` hook:

1. Stores the element that was focused before trapping began
2. Finds all focusable elements within the container
3. Sets initial focus to the first focusable element (or the container itself)
4. Captures Tab and Shift+Tab keystrokes to cycle focus within the container
5. Restores focus to the original element when the component unmounts or `shouldTrap` becomes false

## Notes

- Hook must be called with a valid element reference that contains focusable elements
- Adding `tabIndex={0}` to the container ensures it can receive focus if no focusable children exist
- Always include proper ARIA attributes (`role="dialog"` and `aria-modal="true"`) for screen reader accessibility
- The hook automatically restores focus to the previously focused element when the component unmounts
- Set `shouldTrap` to false when you want to disable focus trapping temporarily

## Accessibility Compliance

Using this hook helps your application comply with these WCAG 2.1 requirements:

- [2.1.2: No Keyboard Trap](https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html) - While this criterion warns against trapping keyboard focus, modal dialogs are an exception when implemented properly
- [2.4.3: Focus Order](https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html) - Ensures focus moves in a meaningful sequence


# useTranslations
URL: /docs/docs/frameworks/next/hooks/use-translations
The useTranslations hook provides access to the consent managers translations.
The `useTranslations` hook provides access to the consent manager's translations found in the store and updates when the translations change.

## Usage

```tsx
function MyComponent() {
  const translations = useTranslations();
  
  const title = translations.cookieBanner.title;
  // Use the translations in your component
  return <h1>{title}</h1>;
}
```

## Returns

The `useTranslations` hook returns the translations object.

### Translations

| Property             | Type                                                                                                                                                                                                                                                   | Description | Default |  Required  |
| :------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------- | :------ | :--------: |
| common               | Partial\<CommonTranslations>                                                                                                                                                                                                                           |             | -       | ✅ Required |
| cookieBanner         | Partial\<CookieBannerTranslations>                                                                                                                                                                                                                     |             | -       | ✅ Required |
| consentManagerDialog | Partial\<ConsentManagerDialogTranslations>                                                                                                                                                                                                             |             | -       | ✅ Required |
| consentTypes         | \{ experience?: Partial\<ConsentTypeTranslations>; functionality?: Partial\<ConsentTypeTranslations>; marketing?: Partial\<ConsentTypeTranslations>; measurement?: Partial\<ConsentTypeTranslations>; necessary?: Partial\<ConsentTypeTranslations>; } |             | -       | ✅ Required |
| frame                | Partial\<FrameTranslations>                                                                                                                                                                                                                            |             | -       |  Optional  |

### CommonTranslations

| Property  | Type   | Description | Default |  Required  |
| :-------- | :----- | :---------- | :------ | :--------: |
| acceptAll | string |             | -       | ✅ Required |
| rejectAll | string |             | -       | ✅ Required |
| customize | string |             | -       | ✅ Required |
| save      | string |             | -       | ✅ Required |

### CookieBannerTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |

### ConsentManagerDialogTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |

### ConsentTypeTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |


# iframe blocking
URL: /docs/docs/frameworks/next/iframe-blocking
Learn how to block iframes based on consent.
## Overview

Iframe blocking is a feature that allows you to block iframes based on consent. This is useful for blocking iframes that are not allowed to load until consent is given.
This should be used when an iframe sets cookies such as a YouTube embed.

c15t provides two ways to block iframes:

- Headless: This is a headless implementation that does not render any DOM elements. It only manages the src/data-src attributes of existing iframe elements.
- Frame Component (React only): This is a React component that conditionally renders content and provides a pre-built/customizable placeholder providing great UX. [Learn more about the Frame component](/docs/frameworks/react/components/frame)

## Frame Component (Recommended)

```tsx
 export default function App() {
   return (
     <>
       <Frame category="marketing" style={{ width: '500px', height: '500px' }}>
         <iframe
           title="Cool Duck Video"
           src="https://www.youtube.com/embed/mQJ6q1ZCzsg"
           width="100%"
           height="100%"
         />
       </Frame>
     </>
   );
 };
```

## Headless Usage

```html
// Will render immediately - No blocking
<iframe src="https://youtube.com/embed/unblocked" />

// Does not render until consent is granted
<iframe data-src="https://youtube.com/embed/123" data-category="marketing" />
```

> ℹ️ **Info:**
> The iframe blocker will only block iframes that have a data-category & data-src attribute.No fallback is provided for blocked iframes using this method.


# Internationalization (i18n)
URL: /docs/docs/frameworks/next/internationalization
Learn how to add translations to your Consent Manager.
## Overview

c15t supports internationalization (i18n) through the `translations` property in the `ConsentManagerOptions` object and has support for both server-side and client-side rendering.

| Server-side                                                                                                                                                                                                                                                                                                                                                                     | Client-side                                                                                                                                                                                                                            |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| The best way to reduce bundle size and improve performance. We can detect the user's language based on the browser's language settings, allowing for the most accurate translations. By default, when using a [consent.io](https://consent.io) hosted instance, [these languages](https://github.com/c15t/c15t/tree/main/packages/translations/src/translations) are supported. | Bundled with the application allowing for multiple languages to be supported without the need for a backend. The more translations you have, the larger the bundle size will be, which may impact the performance of your application. |

c15t supports partial translations, letting you supply only the changed keys without passing the whole translations object. When a requested language isn't available, the system falls back to the configured default/base language. Client-side translations take precedence over server-side translations, so client values override server values.

## Implementation

Pass the `translations` object in your `ConsentManagerProvider` options to configure the translations for your application.

```tsx title="app/layout.tsx"
import { ConsentManagerProvider } from '@c15t/nextjs';

export default function Layout({ children }: { children: React.ReactNode }) {
	return (
		<ConsentManagerProvider options={{
      // ... rest of your config
      translations: {
        defaultLanguage: 'en',
        translations: {
          en: {
            common: {
              acceptAll: 'Accept all',
            },
            cookieBanner: {
              title: 'Cookie Banner',
              description: 'This is a cookie banner',
            },
          },
        },
      },
    }}>
			{children}
		</ConsentManagerProvider>
	);
}
```

## Types

### TranslationConfig

| Property    | Value                                    |
| :---------- | :--------------------------------------- |
| Type Name   | \`TranslationConfig\`                    |
| Source Path | \`./packages/translations/src/index.ts\` |

\*AutoTypeTable: Could not extract \`TranslationConfig\` from \`./packages/translations/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*

<import>./translation-types.mdx</import>


# Quickstart (Pages Directory)
URL: /docs/docs/frameworks/next/quickstart-pages
Integrate c15t into your Next.js pages directory application with this step-by-step guide. Well cover installation, configuration, and basic usage.
## CLI Setup (Recommended)

You can get started with the `@c15t/cli` which will generate the code for you!

| Package manager | Command                       |
| :-------------- | :---------------------------- |
| npm             | `npx @c15t/cli generate`      |
| pnpm            | `pnpm dlx @c15t/cli generate` |
| yarn            | `yarn dlx @c15t/cli generate` |
| bun             | `bunx @c15t/cli generate`     |

## Manual Setup

1. **Install @c15t/nextjs Package**

   | Package manager | Command                    |
   | :-------------- | :------------------------- |
   | npm             | `npm install @c15t/nextjs` |
   | pnpm            | `pnpm add @c15t/nextjs`    |
   | yarn            | `yarn add @c15t/nextjs`    |
   | bun             | `bun add @c15t/nextjs`     |

2. **Next.js Rewrites (Optional)**

   > 💡 Tip:
   >
   > You can use Next.js Rewrites to redirect requests to the c15t backend. This is useful if you want to hide the c15t backend url from your users. Learn more about Next.js Rewrites.

   ```ts
   import type { NextConfig } from 'next';

   const config: NextConfig = {
   	async rewrites() {
   		return [
   			{
   				source: '/api/c15t/:path*',
   				destination: `${process.env.NEXT_PUBLIC_C15T_URL}/:path*`,
   			},
   		];
   	},
   };

   export default config;
   ```

3. **Adding it to your Next Application**

   ```tsx
   import { 
     ConsentManagerDialog,
     ConsentManagerProvider,
     CookieBanner,
   } from '@c15t/nextjs/pages';
   import type { AppProps } from 'next/app';

   export default function App({ Component, pageProps }: AppProps) {
     return (
       <ConsentManagerProvider
         initialData={pageProps.initialC15TData}
         options={{
           mode: 'c15t',
           backendURL: '/api/c15t',
           consentCategories: ['necessary', 'marketing'],
           ignoreGeoLocation: true,
         }}
       >
         <CookieBanner />
         <ConsentManagerDialog />
         <Component {...pageProps} />
       </ConsentManagerProvider>
     );
   }
   ```

   In every page you want to pre-fetch the data server-side, you can use the withInitialC15TData helper. Otherwise, it will be fetched client-side.

   ```tsx
   import { withInitialC15TData } from '@c15t/nextjs/pages';

   // This helper accepts a 2nd argument to wrap around your getServerSideProps existing function.
   export const getServerSideProps = withInitialC15TData('/api/c15t');

   ```

   > 💡 Tip:
   >
   > If you're using Next.js Rewrites, you can use the backendURL option to redirect requests to the c15t backend by setting it to /api/c15t.

***

## Storing Consent

We recommend using the [hosted solution](/docs/frameworks/next/storing-consent/hosted) with [consent.io](https://consent.io) to store your consent.


# Quickstart
URL: /docs/docs/frameworks/next/quickstart
Integrate c15t into your Next.js application with this step-by-step guide. Well cover installation, configuration, and basic usage.
## CLI Setup (Recommended)

You can get started with the `@c15t/cli` which will generate the code for you!

| Package manager | Command                       |
| :-------------- | :---------------------------- |
| npm             | `npx @c15t/cli generate`      |
| pnpm            | `pnpm dlx @c15t/cli generate` |
| yarn            | `yarn dlx @c15t/cli generate` |
| bun             | `bunx @c15t/cli generate`     |

## Manual Setup

1. **Install @c15t/nextjs Package**

   | Package manager | Command                    |
   | :-------------- | :------------------------- |
   | npm             | `npm install @c15t/nextjs` |
   | pnpm            | `pnpm add @c15t/nextjs`    |
   | yarn            | `yarn add @c15t/nextjs`    |
   | bun             | `bun add @c15t/nextjs`     |

2. **Next.js Rewrites (Optional)**

   > 💡 Tip:
   >
   > You can use Next.js Rewrites to redirect requests to the c15t backend. This is useful if you want to hide the c15t backend url from your users. Learn more about Next.js Rewrites.

   ```ts
   import type { NextConfig } from 'next';

   const config: NextConfig = {
   	async rewrites() {
   		return [
   			{
   				source: '/api/c15t/:path*',
   				destination: `${process.env.NEXT_PUBLIC_C15T_URL}/:path*`,
   			},
   		];
   	},
   };

   export default config;
   ```

3. **Adding it to your Next Application**

   ```tsx
   import { 
     ConsentManagerDialog,
     ConsentManagerProvider,
     CookieBanner,
   } from '@c15t/nextjs';
   import type { ReactNode } from 'react';

   export default function Layout({ children }: { children: ReactNode }) {
     return (
       <ConsentManagerProvider
         options={{
           mode: 'c15t',
           backendURL: '/api/c15t',
           consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner.
           ignoreGeoLocation: true, // Useful for development to always view the banner.
         }}
       >
         <CookieBanner />
         <ConsentManagerDialog />   
         {children}
       </ConsentManagerProvider>
     );
   };
   ```

   > 💡 Tip:
   >
   > If you're using Next.js Rewrites, you can use the backendURL option to redirect requests to the c15t backend by setting it to /api/c15t.

***

## Storing Consent

We recommend using the [hosted solution](/docs/frameworks/next/storing-consent/hosted) with [consent.io](https://consent.io) to store your consent.


# Script Loader
URL: /docs/docs/frameworks/next/script-loader
Load scripts based on consent. Used to load scripts that require the users consent, such as analytics scripts.
## Overview

c15t provides the ability to load and unload scripts based on consent. This is useful for loading scripts that are not necessary for the user's consent, such as analytics scripts.

One common flaw of CMPs is they'll maintain a list of scripts that are blocked and then unblocked based on consent. This is a problem because it's not always accurate and can lead to scripts being missed or incorrectly blocked.

Our approach gives you, the developer, full control over the scripts that are loaded and unloaded, as no one knows your site better than you do.

> ℹ️ **Info:**
> When using the Script Loader, the tracking blocker will be disabled automatically (If enabled). This is because the tracking blocker is deprecated and may cause conflicts with the script loader. The current approach of the tracking blocker will only be available in v1.x of c15t, and will be removed in v2.0.

## Implementation

**App Directory**

Due to the nature of Next.js App Directory, we have to define callbacks to run in a client component.

```ts title="app/consent-manager.client.tsx"
'use client';

import { ClientSideOptionsProvider } from '@c15t/nextjs/client';
import { googleTagManager } from '@c15t/scripts/google-tag-manager';

export function ConsentManagerClient() {
	return (
		<ClientSideOptionsProvider
			scripts={[
				googleTagManager({
					id: 'GTM-XXXXXXX',
				}), // Prebuilt script or...
				{
					id: 'example',
					src: 'https://analytics.example.com/script.js',
					category: 'analytics',
				}
			]}
		/>
	);
}
```

> ℹ️ **Info:**
> Ensure you import this component in your app/layout.tsx file.

```ts title="app/consent-manager.tsx"
import { ConsentManagerProvider } from '@c15t/nextjs';
import { ConsentManagerClient } from './consent-manager.client';
import type { ReactNode } from 'react';

export default function ConsentManager({ children }: { children: ReactNode }) {
  return (
    <ConsentManagerProvider options={{
      // your options here
    }}>
      <ClientProvider />
      {children}
    </ConsentManagerProvider>
  );
}
```

**Pages Directory**

```ts title="pages/_app.tsx"
import { ConsentManagerProvider } from '@c15t/nextjs/pages';
import { googleTagManager } from '@c15t/scripts/google-tag-manager';
import type { AppProps } from 'next/app';

export default function App({ Component, pageProps }: AppProps) {
return (
  <ConsentManagerProvider options={{
    scripts: [
      googleTagManager({
        id: 'GTM-XXXXXXX',
      }), // Prebuilt script or...
      {
        id: 'example',
        src: 'https://analytics.example.com/script.js',
        category: 'analytics',
      }
    ]
  }}>
    <Component {...pageProps} />
  </ConsentManagerProvider>
);
}
```

## Prebuilt Scripts

A lot of scripts you may need to implement may be common, such as Google Tag Manager (GTM), PostHog, Meta Pixel, etc. To save you time, we have provided a set of prebuilt scripts for you to use.

These scripts are available in the `@c15t/scripts` package.

### All Prebuilt Scripts

| Script             | Guide                                          |
| ------------------ | ---------------------------------------------- |
| Google Tag Manager | [Guide](/docs/integrations/google-tag-manager) |
| Meta Pixel         | [Guide](/docs/integrations/meta-pixel)         |
| PostHog            | [Guide](/docs/integrations/posthog)            |
| TikTok Pixel       | [Guide](/docs/integrations/tiktok-pixel)       |
| LinkedIn Insights  | [Guide](/docs/integrations/linkedin-insights)  |
| Microsoft UET      | [Guide](/docs/integrations/microsoft-uet)      |
| X Pixel            | [Guide](/docs/integrations/x-pixel)            |

## Always Load Scripts

Some tracking scripts, like Google Tag Manager or PostHog, manage their own consent state internally. For these scripts, you'll want them to load immediately and never be unloaded, regardless of the consent state in c15t.

The `alwaysLoad` property allows you to bypass consent checks and ensure these scripts are always present on the page.

### When to Use Always Load

Use `alwaysLoad: true` for:

- **Tag Management Systems** (e.g., Google Tag Manager) that handle consent internally
- **Analytics Platforms** (e.g., PostHog) with built-in consent management & cookieless behavior
- **Scripts that must initialize early** and configure themselves based on consent

> ⚠️ **Warning:**
> When using alwaysLoad, you are responsible for ensuring the script respects user consent through its own consent management API. The script will load regardless of the user's consent choices in c15t.

### Behavior

Scripts with `alwaysLoad: true` have the following characteristics:

- **Load immediately** when the consent manager initializes, bypassing consent checks
- **Never unload** when consent is revoked or changed
- **Persist through** `clearAllScripts` calls
- **Still trigger callbacks** like `onBeforeLoad`, `onLoad`, and `onConsentChange`

## Types

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# Hosted
URL: /docs/docs/frameworks/next/storing-consent/hosted
Use consent.io for an easy, managed consent storage solution with minimal setup
## Managed Service vs Self-Hosting

Using [consent.io](https://consent.io) is the easiest way to get started with c15t. It's a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates, and compliance monitoring. For organizations with specific requirements, we also offer [self-hosting](/docs/self-host/v2) options.

## Using consent.io

> ℹ️ **Info:**
> Congratulations, you've chosen the best way to deploy to production!consent.io provides a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates & analytics. For organizations with specific requirements, it is possible to self-host the backend, allowing you to have full control over your data.

### Key Benefits

- **Zero Backend Maintenance** - No server setup or management required
- **Automatic Updates** - Easy updates & migrations to new versions
- **Built-in Scaling** - Handles traffic spikes without configuration
- **Geographic Detection** - Built-in jurisdiction detection for compliance
- **Analytics Dashboard** - Insights into consent patterns and compliance

## Implementation

```tsx title="app/layout.tsx"
import { 
  ConsentManagerDialog,
  ConsentManagerProvider,
  CookieBanner,
} from '@c15t/nextjs';

export default function Layout ({ children }: { children: ReactNode }) => {
  return (
      <ConsentManagerProvider
        options={{
          mode: 'c15t',
          backendURL: '/api/c15t',
          consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner.
          ignoreGeoLocation: true, // Useful for development to always view the banner.
        }}
      >
        <CookieBanner />
        <ConsentManagerDialog />   
        {children}
      </ConsentManagerProvider>
  );
};
```

### Creating an instance with consent.io

1. **Sign up for a consent.io account**

2. **Create a new instance in the dashboard** For production applications, we recommend enabling usage billing so you can configure your instance to only allow trusted origins to send requests to it.

3. **Copy the provided backendURL (e.g., https\://your-instance.c15t.dev)**


# Offline
URL: /docs/docs/frameworks/next/storing-consent/offline
Store consent decisions in the browser with offline mode, perfect for sites without backend requirements
The offline mode provides a simple, browser-based approach to storing user consent decisions without requiring a backend server.

## Key Characteristics

- **No backend required** - Everything is stored locally in the browser
- **Simplified setup** - Get started quickly with minimal configuration
- **Independence** - Works without external services or APIs
- **Fast implementation** - Ideal for prototyping and simpler sites

## Implementation

```tsx title="app/layout.tsx"
import { 
  ConsentManagerDialog,
  ConsentManagerProvider,
  CookieBanner,
} from '@c15t/nextjs';

export default function Layout ({ children }: { children: ReactNode }) => {
  return (
      <ConsentManagerProvider
        options={{
          mode: 'offline',
          consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner.
        }}
      >
        <CookieBanner />
        <ConsentManagerDialog />   
        {children}
      </ConsentManagerProvider>
  );
};
```

## How It Works

> ℹ️ **Info:**
> Offline mode provides the same API interface as the standard client but operates completely client-side.

The offline mode implements the same interface as the standard client, but with the following differences:

1. **Storage**: All consent preferences are stored in the browser's localStorage using the configured key
2. **Network**: No network requests are made, all operations happen locally
3. **Consent Banner**: The banner visibility is determined by checking if a value exists in localStorage
4. **Consent Verification**: Always returns a successful response


# Overview
URL: /docs/docs/frameworks/next/storing-consent/overview
Compare different approaches to storing consent decisions in your application
## Available Storage Options

| Storage Option | Description                                      | Best For                                                                                          | Guide                                                  |
| -------------- | ------------------------------------------------ | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------ |
| **Hosted**     | Using consent.io managed service or self-hosting | Production apps with minimal backend maintenance or Organizations requiring complete data control | [Guide](/docs/frameworks/next/storing-consent/hosted)  |
| **Offline**    | Browser-based storage with no server             | Simple implementations or dev environments                                                        | [Guide](/docs/frameworks/next/storing-consent/offline) |
| **Custom**     | Fully customized storage implementation          | Complex integrations with existing systems                                                        | TBD                                                    |

> 💡 **Tip:**
> For most applications, we recommend starting with Hosted (consent.io) for the simplest setup with the most features.

## Choosing the Right Approach

Use this flowchart to determine which c15t configuration is best for your needs:

```mermaid
flowchart TD
Start([Start here]) --> StoreConsent

StoreConsent{Need to store
consent choices?}
StoreConsent -->|Yes| ManagedService
StoreConsent -->|No| OfflineMode

ManagedService{Want a managed
service?}
ManagedService -->|Yes| ConsentIO
ManagedService -->|No| SelfHosted

OfflineMode([c15t Offline Mode]):::optionStyle
OfflineMode -.-> OfflineNote[Client-side only
Stores in localStorage]:::noteStyle

ConsentIO([consent.io]):::recommendStyle
ConsentIO -.-> ConsentIONote[Fully managed
Simplest setup]:::noteStyle

SelfHosted([Self-hosted Instance]):::optionStyle
SelfHosted -.-> SelfHostedNote[Full control
Requires maintenance]:::noteStyle
```


# Styling with CSS Classes
URL: /docs/docs/frameworks/next/styling/classnames
Learn how to customize components using CSS class names and class-based styling.
c15t supports multiple syntax approaches to styling components, a simple class based approach, or an object syntax allowing you to combine class names with inline styles.

## Class-Based Styling

The simplest way to style a component is by providing class names directly to theme keys:

```tsx
<CookieBanner 
  theme={{
    'banner.root': 'my-banner-container',
    'banner.header.title': 'banner-title',
    'banner.header.description': 'banner-description',
    'banner.footer': 'banner-footer'
  }}
/>
```

## Object Syntax

You can also use the object syntax with the `className` property:

```tsx
import styles from './Banner.module.css';

<CookieBanner 
  theme={{
    'banner.root': {
      className: 'my-banner-container',
      style: {
        borderColor: dynamicBorderColor
      }
    },
    'banner.header.title': styles.title // CSS Modules work too!
  }}
/>
```

## Tailwind CSS

c15t supports Tailwind CSS classes, however there may be some cases where you need to add the `!important` flag to override the default styles.

```tsx
<CookieBanner 
  theme={{
    'banner.card': '!bg-red-500'
  }}
/>
```


# Color Scheme (Light/Dark Mode)
URL: /docs/docs/frameworks/next/styling/color-scheme
Manage your components light, dark, and system color schemes.
## Overview

c15t provides built-in support for managing color schemes for your components, allowing you to implement light mode, dark mode, or system-based preferences with minimal configuration.
By default, c15t detects your theme by checking if you have a `.dark` class on the root element.

## Usage

```tsx
<ConsentManagerProvider
  options={{
    // ... rest of your config
    react: {
      colorScheme: 'light',
    },
  }}
>
  <CookieBanner />
  <ConsentManagerDialog />
</ConsentManagerProvider>
```

## CSS Classes

The color scheme is decided based on two classes:

- `.dark` - By default, c15t checks for this class on the root element to determine the color scheme if none is provided.
- `.c15t-dark` - This class is automatically added/removed based on the color scheme.


# Styling with CSS Variables
URL: /docs/docs/frameworks/next/styling/css-variables
Learn how to use CSS variables to create flexible and dynamic themes for c15t components.
CSS Variables are our recommended way to style your components. They provide a powerful way to create dynamic, maintainable themes for components. This approach is particularly useful for dark mode, theming, and responsive design.

## Basic Usage

Each component has a set of predefined CSS variables that you can override:

```tsx
<CookieBanner
  theme={{
    'banner.card': {
      style: {
        '--banner-background-color': 'red',
        '--banner-border-radius': '0px',
      },
    },
  }}
/>
```

## All CSS Variables

| Component              | CSS Variables                                                                                                                 |
| ---------------------- | ----------------------------------------------------------------------------------------------------------------------------- |
| Cookie Banner          | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/cookie-banner/theme.ts)                 |
| Consent Manager Dialog | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/consent-manager-dialog/theme.ts)        |
| Consent Manager Widget | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/consent-manager-widget/theme.ts)        |
| Button                 | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/shared/ui/button/button.types.ts)       |
| Accordion              | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/shared/ui/accordion/accordion.types.ts) |
| Switch                 | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/shared/ui/switch/switch.types.ts)       |


# General Styling
URL: /docs/docs/frameworks/next/styling/overview
Learn the core concepts of the c15t theming system and how it enables flexible component styling.
## Understanding the Theming System

Think of our theming system as a set of style instructions that cascade through your components, similar to CSS but with more structure and type safety. Each component has specific customizable areas, called theme keys, that you can target for styling.

The theming system provides a structured way to customize the appearance of components while maintaining their functionality and accessibility. It allows you to:

- Target specific elements within a component
- Apply consistent styling across your application
- Ensure type safety and prevent styling errors

## Theme Key Structure

Every theme key in our system follows a predictable pattern that makes it easy to target specific elements within a component:

```
'componentName.elementPath.subElement'
```

1. **Component Name**: The base name of the component (e.g., `banner`, `widget`, `dialog`)
2. **Element Path**: The path to the element within the component (e.g., `header.title`, `footer.accept-button`)
3. **State Variations**: Optional state indicators (e.g., `switch.thumb.checked`, `button.hover`)

### Component Hierarchies

Components are structured in a hierarchical manner, which is reflected in their theme keys:

```tsx
// Example of nested component styling
const theme = {
  'widget.root': 'container mx-auto',
  'widget.accordion': 'space-y-2',
  'widget.accordion.item': 'border rounded-sm',
  'widget.accordion.trigger': 'p-4 hover:bg-gray-50',
  'widget.accordion.trigger-inner': '',
  'widget.accordion.content': 'p-4 bg-gray-50'
}
```

Each level in the hierarchy can be styled independently, giving you fine-grained control over the appearance.

### Visualizing the Hierarchy

Here's a simplified visualization of a typical accordion component:

```
widget.root
└── widget.accordion
    └── widget.accordion.item
        ├── widget.accordion.trigger
        │   └── widget.accordion.trigger-inner
        └── widget.accordion.content
```

## Using Theme Context

For consistent styling across your application, you can use the `ThemeProvider` component to apply a global theme:

```tsx
const globalTheme = {
  'banner.root': 'bg-white rounded-lg shadow-lg',
  'dialog.root': 'bg-white rounded-lg shadow-xl',
  'widget.root': 'bg-gray-50 rounded border'
}

function App() {
  return (
    <ThemeProvider theme={globalTheme}>
      <YourApp />
    </ThemeProvider>
  )
}
```

### Theme Inheritance

Components can still define their own themes, which will merge with and override the global theme:

```tsx
<ThemeProvider theme={globalTheme}>
  {/* Uses the global theme */}
  <CookieBanner />
  
  {/* Overrides parts of the global theme */}
  <CookieBanner 
    theme={{
      'banner.root': 'bg-blue-50 p-4 rounded-lg'
    }}
  />
</ThemeProvider>
```

## Type-Safe Styling

Our theming system includes TypeScript support to help prevent errors:

```tsx
// TypeScript will catch invalid theme keys
const theme: CookieBannerTheme = {
  'banner.root': 'bg-white p-4 rounded-lg shadow-lg',
  'banner.invalid': 'TypeScript error!' // Error: invalid key
}
```

## Disabling Default Styles

Sometimes you might want to start from scratch. Use the `noStyle` prop to remove all default styling:

```tsx
<CookieBanner noStyle theme={yourCustomTheme} />
```


# Callbacks
URL: /docs/docs/frameworks/react/callbacks
Learn how to use callbacks to respond to c15t events in your React application.
## Implementing Callbacks

```tsx title="src/App.tsx"
import { 
  ConsentManagerDialog,
  ConsentManagerProvider,
  CookieBanner,
  type ConsentManagerOptions
} from '@c15t/react';

export default function App() {
  const options: ConsentManagerOptions = {
    mode: 'c15t', 
    backendURL: process.env.REACT_APP_C15T_URL,
    consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner. 
    ignoreGeoLocation: true, // Useful for development to always view the banner.
    callbacks: {
      onBannerFetched(response) {
        console.log('Consent banner fetched', response);
      },
      onConsentSet(response) {
        console.log('Consent has been saved', response);
      },
      onError(response) {
        console.log('Error', response);
      },
    },
  };

  return (
    <ConsentManagerProvider options={options}>
      <div className="App">
        {/* Your application content */}
      </div>
      <CookieBanner />
      <ConsentManagerDialog />
    </ConsentManagerProvider>
  );
}
```

## Available callbacks

### onBannerFetched

Called when the consent banner is fetched; not invoked when the banner is in offline mode.

| Property          | Type                                               | Description | Default |  Required  |
| :---------------- | :------------------------------------------------- | :---------- | :------ | :--------: |
| showConsentBanner | boolean                                            |             | -       | ✅ Required |
| jurisdiction      | JurisdictionInfo                                   |             | -       | ✅ Required |
| location          | \{ countryCode: string; regionCode: string; }      |             | -       | ✅ Required |
| translations      | \{ language: string; translations: Translations; } |             | -       | ✅ Required |

### onConsentSet

Called when the consent is set.

| Property    | Type         | Description | Default |  Required  |
| :---------- | :----------- | :---------- | :------ | :--------: |
| preferences | ConsentState |             | -       | ✅ Required |

### onError

Called when an error occurs.

| Property | Type   | Description | Default |  Required  |
| :------- | :----- | :---------- | :------ | :--------: |
| error    | string |             | -       | ✅ Required |


# Consent Manager Dialog
URL: /docs/docs/frameworks/react/components/consent-manager-dialog
An accessible, animated modal interface that wraps the Consent Manager Widget for a focused privacy customization experience.
The Consent Manager Dialog provides a clean, focused way for users to customize their privacy preferences. This dialog is required by various privacy regulations like GDPR.

<ResponsivePreview
  src="https://c15t-examples.vercel.app/react/simple-consent-dialog"
  code={`
export function SimpleConsentDialog({ children }: { children?: ReactNode }) {
return (
<ConsentManagerProvider
options={{
mode: 'offline',
consentCategories: ['experience', 'marketing', 'functionality', 'necessary'],
}}
>
<ConsentManagerDialog />
<ConsentManagerDialogButton />
{children}
</ConsentManagerProvider>
);
}

function ConsentManagerDialogButton() {
const { setIsPrivacyDialogOpen, isPrivacyDialogOpen } = useConsentManager();

useEffect(() => {
setIsPrivacyDialogOpen(true);
}, [setIsPrivacyDialogOpen]);

if (isPrivacyDialogOpen) {
return null;
}

return (
<button type="button" onClick={() => setIsPrivacyDialogOpen(!isPrivacyDialogOpen)}>
Open Consent Dialog
</button>
);
}
`}
  expectedHeight={600}
/>

## Usage

**Recommended**

```tsx
import { ConsentManagerProvider, CookieBanner, ConsentManagerDialog } from "@c15t/react";

export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CookieBanner /> 
      <ConsentManagerDialog />
    </ConsentManagerProvider>
  );
};

```

**expanded**

```tsx
import { ConsentManagerProvider, CookieBanner, ConsentManagerWidget } from "@c15t/react";

const CustomDialog = () => {
	return (
    <ConsentManagerDialog.Root>
      <ConsentManagerDialog.Card>
        <ConsentManagerDialog.Header>
          <ConsentManagerDialog.HeaderTitle>
            Custom Title
          </ConsentManagerDialog.HeaderTitle>
          <ConsentManagerDialog.HeaderDescription>
            Custom Description
          </ConsentManagerDialog.HeaderDescription>
        </ConsentManagerDialog.Header>
        <ConsentManagerDialog.Content>
          <ConsentManagerWidget />
        </ConsentManagerDialog.Content>
        <ConsentManagerDialog.Footer themeKey="dialog.footer">
          Custom Footer
        </ConsentManagerDialog.Footer>
      </ConsentManagerDialog.Card>
    </ConsentManagerDialog.Root>
	);
};


export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CookieBanner />
      <CustomDialog /> 
    </ConsentManagerProvider>
  );
};
```

## Styling

The Consent Manager Dialog is designed to adapt to your application's visual style. Learn more about our [styling system](/docs/react/styling/overview).

### Theme Variables

These keys are available on the theme object to customize your dialog.

The dialog also contains the `ConsentManagerWidget` component so the theme keys are available to customize the widget.

| Property                  | Type| Description                              | Default |  Required  |
| :------------------------ || :--------------------------------------- | :------ | :--------: |
| ConsentManagerDialogTheme | Partial\<\{ dialog: import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.root': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.header': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.title': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.description': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.content': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.footer': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'dialog.overlay': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; } & Partial\<\{ 'widget.root': ThemeValue; 'widget.branding': ThemeValue; 'widget.footer': ThemeValue; 'widget.footer.sub-group': ThemeValue; 'widget.footer.reject-button': ThemeValue; 'widget.footer.accept-button': ThemeValue; 'widget.footer.customize-button': ThemeValue; 'widget.footer.save-button': ThemeValue; 'widget.accordion': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionRootCSSVariables>; 'widget.accordion.trigger': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.trigger-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.item': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionItemCSSVariables>; 'widget.accordion.icon': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.open': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.close': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.content': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.accordion.content-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.switch': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchCSSVariables>; 'widget.switch.track': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchTrackCSSVariables>; 'widget.switch.thumb': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchThumbCSSVariables>; }>> | Type alias for ConsentManagerDialogTheme | -       | ✅ Required |

## Accessibility Features

The dialog implements several accessibility best practices:

### Focus Management

When the dialog opens, it:

1. Traps focus within the dialog
2. Sets initial focus on the first interactive element
3. Remembers and restores the previous focus position when closed

### Focus Trapping

The dialog implements focus trapping to ensure keyboard navigation remains within the dialog while it's open. This is crucial for:

- **Keyboard users**: Prevents users from accidentally interacting with content hidden behind the modal
- **Screen reader users**: Maintains proper context and prevents confusion
- **WCAG compliance**: Supports 2.4.3 Focus Order and provides proper modal functionality

#### How Focus Trapping Works

The `ConsentManagerDialog` uses the `useFocusTrap` hook internally to:

1. Capture the element that had focus before the dialog opened
2. Set initial focus to the first interactive element inside the dialog
3. Keep focus cycling within the dialog when users press Tab or Shift+Tab
4. Restore focus to the original element when the dialog closes

You can control focus trapping with the `trapFocus` prop:

```tsx
// Default behavior (recommended for accessibility)
<ConsentManagerDialog trapFocus={true} />

// Disable focus trapping (not recommended)
<ConsentManagerDialog trapFocus={false} />
```

> ℹ️ **Info:**
> Focus trapping is enabled by default and is recommended for WCAG compliance. Only disable it if you have a specific reason and are implementing alternative accessibility measures.

### Keyboard Navigation

Users can:

- Close the dialog with the Escape key
- Navigate controls with Tab
- Interact with all elements using only the keyboard

### Screen Readers

The dialog announces itself appropriately with:

- Proper ARIA roles and attributes
- Clear labeling of controls
- Status updates when opened/closed

## API Reference

### ConsentManagerDialog

The main component accepts these props:

| Property | Type    | Description                                                                                            | Default | Required |
| :------- | :------ | :----------------------------------------------------------------------------------------------------- | :------ | :------: |
| open     | boolean | Control the open state. If omitted the dialog follows&#xA;\`useConsentManager().isPrivacyDialogOpen\`. | -       | Optional |

### Compound Components

| Property                 | Type | Description | Default |  Required  |
| :----------------------- | :--- | :---------- | :------ | :--------: |
| Card                     | any  |             | -       | ✅ Required |
| Header                   | any  |             | -       | ✅ Required |
| HeaderTitle              | any  |             | -       | ✅ Required |
| HeaderDescription        | any  |             | -       | ✅ Required |
| Content                  | any  |             | -       | ✅ Required |
| Footer                   | any  |             | -       | ✅ Required |
| ConsentCustomizationCard | any  |             | -       | ✅ Required |
| DialogFooter             | any  |             | -       | ✅ Required |
| DialogHeader             | any  |             | -       | ✅ Required |
| DialogHeaderTitle        | any  |             | -       | ✅ Required |
| DialogHeaderDescription  | any  |             | -       | ✅ Required |
| DialogContent            | any  |             | -       | ✅ Required |
| Overlay                  | any  |             | -       | ✅ Required |
| Root                     | any  |             | -       | ✅ Required |


# Consent Manager Widget
URL: /docs/docs/frameworks/react/components/consent-manager-widget
A flexible, composable widget for building custom privacy consent interfaces. The widget provides granular control over privacy preferences.
The Consent Manager Widget allows for detailed privacy consent management in your application. While the Cookie Banner handles initial consent, this widget enables users to fine-tune their privacy preferences through an intuitive accordion interface.

If you just want a dialog, consider using the [Consent Manager Dialog](/docs/frameworks/react/components/consent-manager-dialog) instead (which handles the overlay logic for you).

## Usage

**Recommended**

```tsx
import { ConsentManagerProvider,  ConsentManagerWidget } from "@c15t/react";
import { useState } from 'react';

export default function App() {
  const [isWidgetOpen, setIsWidgetOpen] = useState(false);

  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev/',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <button type="button" onClick={() => setIsWidgetOpen(!isWidgetOpen)}>
        {isWidgetOpen ? 'Close' : 'Open'}
      </button>

      {isWidgetOpen && (
        <div className="w-1/2 rounded-lg bg-white px-5 pt-8">
          <ConsentManagerWidget />
        </div>
      )}
    </ConsentManagerProvider>
  );
};

```

**expanded**

```tsx
import { ConsentManagerProvider, ConsentManagerWidget } from "@c15t/react";

const CustomWidget = () => {
	return (
			<div className="w-1/2 rounded-lg bg-white px-5 pt-8">
				<ConsentManagerWidget.Root>
					<ConsentManagerWidget.Accordion
						themeKey="widget.accordion"
						type="multiple"
						value={openItems}
						onValueChange={setOpenItems}
					>
						<ConsentManagerWidget.AccordionItems />
					</ConsentManagerWidget.Accordion>
					<ConsentManagerWidget.Footer>
						<ConsentManagerWidget.FooterSubGroup themeKey="widget.footer.sub-group">
							<ConsentManagerWidget.RejectButton themeKey="widget.footer.reject-button">
								Reject All Text
							</ConsentManagerWidget.RejectButton>
							<ConsentManagerWidget.AcceptAllButton themeKey="widget.footer.accept-button">
								Accept All
							</ConsentManagerWidget.AcceptAllButton>
						</ConsentManagerWidget.FooterSubGroup>
						<ConsentManagerWidget.SaveButton themeKey="widget.footer.save-button">
							Save
						</ConsentManagerWidget.SaveButton>
					</ConsentManagerWidget.Footer>
				</ConsentManagerWidget.Root>
			</div>
	);
};


export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev/',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <button type="button" onClick={() => setIsWidgetOpen(!isWidgetOpen)}>
        {isWidgetOpen ? 'Close' : 'Open'}
      </button>

      {isWidgetOpen && (
        <div className="w-1/2 rounded-lg bg-white px-5 pt-8">
          <CustomWidget />
        </div>
      )}
    </ConsentManagerProvider>
  );
};
```

## Styling

The Consent Manager Widget is designed to adapt to your application's visual style. Learn more about our [styling system](/docs/react/styling/overview).

### Theme Variables

These keys are available on the theme object to customize your banner.

| Property                  | Type| Description                              | Default |  Required  |
| :------------------------ || :--------------------------------------- | :------ | :--------: |
| ConsentManagerWidgetTheme | Partial\<\{ 'widget.root': ThemeValue; 'widget.branding': ThemeValue; 'widget.footer': ThemeValue; 'widget.footer.sub-group': ThemeValue; 'widget.footer.reject-button': ThemeValue; 'widget.footer.accept-button': ThemeValue; 'widget.footer.customize-button': ThemeValue; 'widget.footer.save-button': ThemeValue; 'widget.accordion': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionRootCSSVariables>; 'widget.accordion.trigger': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.trigger-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionTriggerCSSVariables>; 'widget.accordion.item': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionItemCSSVariables>; 'widget.accordion.icon': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.open': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.arrow\.close': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionIconCSSVariables>; 'widget.accordion.content': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.accordion.content-inner': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/accordion/accordion.types").AccordionContentCSSVariables>; 'widget.switch': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchCSSVariables>; 'widget.switch.track': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchTrackCSSVariables>; 'widget.switch.thumb': ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/switch/switch.types").SwitchThumbCSSVariables>; }> | Type alias for ConsentManagerWidgetTheme | -       | ✅ Required |

## API Reference

The main component accepts these props:

| Property    | Type    | Description | Default | Required |
| :---------- | :------ | :---------- | :------ | :------: |
| hideBrading | boolean |             | -       | Optional |

### Compound Components

| Property              | Type | Description | Default |  Required  |
| :-------------------- | :--- | :---------- | :------ | :--------: |
| AccordionTrigger      | any  |             | -       | ✅ Required |
| AccordionTriggerInner | any  |             | -       | ✅ Required |
| AccordionContent      | any  |             | -       | ✅ Required |
| AccordionArrow        | any  |             | -       | ✅ Required |
| Accordion             | any  |             | -       | ✅ Required |
| Switch                | any  |             | -       | ✅ Required |
| AccordionItems        | any  |             | -       | ✅ Required |
| AccordionItem         | any  |             | -       | ✅ Required |
| Root                  | any  |             | -       | ✅ Required |
| AcceptAllButton       | any  |             | -       | ✅ Required |
| CustomizeButton       | any  |             | -       | ✅ Required |
| SaveButton            | any  |             | -       | ✅ Required |
| RejectButton          | any  |             | -       | ✅ Required |
| Footer                | any  |             | -       | ✅ Required |
| FooterSubGroup        | any  |             | -       | ✅ Required |


# Cookie Banner
URL: /docs/docs/frameworks/react/components/cookie-banner
A customizable cookie consent banner that handles privacy compliance with zero configuration required.
The Cookie Banner component provides an elegant way to obtain and manage consent from your users. It handles all the complexity of privacy regulations while providing a smooth user experience that integrates naturally with your application.

<ResponsivePreview
  src="https://c15t-examples.vercel.app/react/simple-cookie-banner"
  code={`
export function SimpleCookieBanner({ children }: { children?: ReactNode }) {
return (
<ConsentManagerProvider
options={{
mode: 'offline',
consentCategories: ['experience', 'marketing', 'functionality', 'necessary'],
}}
>
<CookieBanner />
{children}
</ConsentManagerProvider>
);
}
`}
  expectedHeight={300}
/>

## Usage

The Cookie Banner uses a compound component pattern, giving you complete control over its structure when needed. Think of it like building blocks – you can use the pre-assembled version, or arrange the pieces yourself for custom layouts.

**Recommended**

```tsx
import { ConsentManagerProvider, CookieBanner } from "@c15t/react";

export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CookieBanner /> 
    </ConsentManagerProvider>
  );
};

```

**expanded**

```tsx
import { ConsentManagerProvider, CookieBanner } from "@c15t/react";

const CustomCookieBanner = () => {
	return (
    <CookieBanner.Root>
      <CookieBanner.Card>
        <CookieBanner.Header>
          <CookieBanner.Title>Custom Title</CookieBanner.Title>
          <CookieBanner.Description>
            Your detailed description here
          </CookieBanner.Description>
        </CookieBanner.Header>
        <CookieBanner.Footer>
          <CookieBanner.FooterSubGroup>
            <CookieBanner.RejectButton themeKey="banner.footer.customize-button">
              Decline All
            </CookieBanner.RejectButton>
            <CookieBanner.AcceptButton themeKey="banner.footer.customize-button">
              Accept All
            </CookieBanner.AcceptButton>
          </CookieBanner.FooterSubGroup>
          <CookieBanner.CustomizeButton themeKey="banner.footer.customize-button">
            Preferences
          </CookieBanner.CustomizeButton>
        </CookieBanner.Footer>
      </CookieBanner.Card>
    </CookieBanner.Root>
	);
};


export default function App() {
  return (
    <ConsentManagerProvider options={{
      mode: 'c15t',
      backendURL: 'https://your-instance.c15t.dev',
      consentCategories: ['necessary', 'marketing'],
    }}>
      <CustomCookieBanner /> 
    </ConsentManagerProvider>
  );
};
```

## Styling

The Cookie Banner is designed to adapt to your application's visual style. Learn more about our [styling system](/docs/react/styling/overview).

### Theme Variables

These keys are available on the theme object to customize your banner.

| Property          | Type| Description                      | Default |  Required  |
| :---------------- || :------------------------------- | :------ | :--------: |
| CookieBannerTheme | Partial\<\{ 'banner.root': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<RootCSSVariables>; 'banner.card': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<CardCSSVariables>; 'banner.header.root': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<HeaderCSSVariables>; 'banner.header.title': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<TitleCSSVariables>; 'banner.header.description': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<DescriptionCSSVariables>; 'banner.footer': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<FooterCSSVariables>; 'banner.footer.sub-group': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue; 'banner.footer.reject-button': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/button/button.types").ButtonCSSVariables>; 'banner.footer.customize-button': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/button/button.types").ButtonCSSVariables>; 'banner.footer.accept-button': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<import("/vercel/path1/.c15t/packages/react/src/components/shared/ui/button/button.types").ButtonCSSVariables>; 'banner.overlay': import("/vercel/path1/.c15t/packages/react/src/types/theme/style-types").ThemeValue\<OverlayCSSVariables>; }> | Type alias for CookieBannerTheme | -       | ✅ Required |

## Scroll Locking

The Cookie Banner supports scroll locking, a technique that prevents users from interacting with your website until they've made a cookie consent choice.

```tsx
<CookieBanner lockScroll={true} />
```

When enabled, scroll locking:

- Prevents page scrolling and interaction
- Displays a background overlay
- Ensures users must make a privacy choice before accessing content

For best results, use scroll locking together with [focus trapping](#focus-trapping) to ensure complete keyboard accessibility.

> ℹ️ **Info:**
> For detailed implementation guides, best practices, and compliance considerations, see our Scroll Locking Guide.

## Accessibility

The Cookie Banner is built with accessibility in mind:

- Proper ARIA roles and labels (role="dialog", aria-modal="true")
- Keyboard navigation and interaction support
- Focus management and trapping
- Screen reader announcements
- Semantic HTML structure

These features work automatically, ensuring all users can interact with your privacy controls effectively.

### Focus Trapping

The Cookie Banner implements focus trapping when it's displayed, which is an essential accessibility feature that prevents keyboard focus from moving outside the banner. This behavior:

- **Ensures users complete the consent flow** before interacting with other page elements
- **Prevents accidental interaction** with content that shouldn't be accessible yet
- **Helps compliance** with accessibility guidelines like WCAG 2.4.3 (Focus Order)

> ℹ️ **Info:**
> Focus trapping is enabled by default and recommended for accessibility compliance. For more details on implementation and best practices, see our useFocusTrap hook documentation.

## Best Practices

Follow these guidelines for optimal implementation:

1. Place the banner at the root level of your application
2. Keep the title and description clear and concise
3. Use the pre-assembled version unless you need custom layouts
4. Test the banner across different screen sizes
5. Ensure your theme maintains sufficient contrast ratios
6. Consider [scroll locking](#scroll-locking) for strict compliance scenarios
7. Test with keyboard navigation to ensure accessibility

## API Reference

### CookieBanner

The main component accepts these props:

| Property            | Type| Description                                                   | Default   | Required |
| :------------------ || :------------------------------------------------------------ | :-------- | :------: |
| theme               | Partial\<\{ 'banner.root': ThemeValue\<RootCSSVariables>; 'banner.card': ThemeValue\<CardCSSVariables>; 'banner.header.root': ThemeValue\<HeaderCSSVariables>; 'banner.header.title': ThemeValue\<TitleCSSVariables>; 'banner.header.description': ThemeValue\<DescriptionCSSVariables>; 'banner.footer': ThemeValue\<FooterCSSVariables>; 'banner.footer.sub-group': ThemeValue; 'banner.footer.reject-button': ThemeValue\<ButtonCSSVariables>; 'banner.footer.customize-button': ThemeValue\<ButtonCSSVariables>; 'banner.footer.accept-button': ThemeValue\<ButtonCSSVariables>; 'banner.overlay': ThemeValue\<OverlayCSSVariables>; }> | Custom styles to apply to the banner and its child components | undefined | Optional |
| noStyle             | boolean| When true, removes all default styling from the component     | false     | Optional |
| title               | ReactNode| Content to display as the banner's title                      | undefined | Optional |
| description         | ReactNode| Content to display as the banner's description                | undefined | Optional |
| rejectButtonText    | ReactNode| Content to display on the reject button                       | undefined | Optional |
| customizeButtonText | ReactNode| Content to display on the customize button                    | undefined | Optional |
| acceptButtonText    | ReactNode| Content to display on the accept button                       | undefined | Optional |
| scrollLock          | boolean| When true, the cookie banner will lock the scroll of the page | false     | Optional |
| trapFocus           | boolean| When true, the cookie banner will trap focus                  | true      | Optional |
| disableAnimation    | boolean| When true, disables the entrance/exit animations              | false     | Optional |

### Compound Components

| Property        | Type | Description | Default |  Required  |
| :-------------- | :--- | :---------- | :------ | :--------: |
| Root            | any  |             | -       | ✅ Required |
| Card            | any  |             | -       | ✅ Required |
| Header          | any  |             | -       | ✅ Required |
| Title           | any  |             | -       | ✅ Required |
| Description     | any  |             | -       | ✅ Required |
| Footer          | any  |             | -       | ✅ Required |
| FooterSubGroup  | any  |             | -       | ✅ Required |
| RejectButton    | any  |             | -       | ✅ Required |
| CustomizeButton | any  |             | -       | ✅ Required |
| AcceptButton    | any  |             | -       | ✅ Required |
| Overlay         | any  |             | -       | ✅ Required |


# Frame
URL: /docs/docs/frameworks/react/components/frame
Conditionally render children based on consent, with a placeholder for when consent is not given.
The Frame component provides an elegant way to conditionally render children based on consent, with a placeholder for when consent is not given. This is designed perfectly for Iframe components like youtube embeds that should only be shown when consent is granted.

## Usage

The frame component provides a pre-built placeholder, however, this can be modified with a more custom placeholder to suit your needs.

**Recommended**

```tsx
export default function App() {
  return (
    <>
      <Frame category="marketing" style={{ width: '500px', height: '500px' }}>
        <iframe
          title="Cool Duck Video"
          src="https://www.youtube.com/embed/mQJ6q1ZCzsg"
          width="100%"
          height="100%"
        />
      </Frame>
    </>
  );
};

```

**expanded**

```tsx

const CustomFrame = () => {
	return (
   	<Frame.Root>
      <Frame.Title> hello </Frame.Title>
      <Frame.Button category="marketing"> world </Frame.Button>{' '}
    </Frame.Root>
	);
};


export default function App() {
  return (
   	<Frame
				category="marketing"
      style={{ width: '500px', height: '500px' }}
				placeholder={
					<CustomFrame />
				}
			>
				<iframe
					title="Cool Duck Video"
					src="https://www.youtube.com/embed/mQJ6q1ZCzsg"
					width="100%"
					height="100%"
				/>
			</Frame>
  );
};
```

## API Reference

### Frame

The main component accepts these props:

| Property    | Type                                                                                                                                                                               | Description                                                                                                                                        | Default   |  Required  |
| :---------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------- | :-------- | :--------: |
| children    | ReactNode                                                                                                                                                                          | Content rendered when consent is granted. Children are not mounted until&#xA;consent is given, preventing unnecessary network requests.            | -         | ✅ Required |
| category    | AllConsentNames                                                                                                                                                                    | Consent category required to render children.                                                                                                      | -         | ✅ Required |
| placeholder | ReactNode                                                                                                                                                                          | A custom placeholder component to display when consent is not met.&#xA;If not provided, a default placeholder will be displayed.                   | -         |  Optional  |
| noStyle     | boolean                                                                                                                                                                            | When true, removes all default styling from the component                                                                                          | false     |  Optional  |
| theme       | Partial\<\{ 'frame.placeholder.root': ThemeValue\<PlaceholderCSSVariables>; 'frame.placeholder.title': ThemeValue; 'frame.placeholder.button': ThemeValue\<ButtonCSSVariables>; }> | Custom theme to override default styles while maintaining structure and&#xA;accessibility. Merges with defaults. Ignored when \`noStyle=\{true}\`. | undefined |  Optional  |

### Compound Components

| Property | Type | Description | Default |  Required  |
| :------- | :--- | :---------- | :------ | :--------: |
| Root     | any  |             | -       | ✅ Required |
| Title    | any  |             | -       | ✅ Required |
| Button   | any  |             | -       | ✅ Required |


# Google Tag Manager
URL: /docs/docs/frameworks/react/google-tag-manager
Learn how to integrate c15t with Google Tag Manager (GTM).
c15t supports Google Tag Manager (GTM) out of the box. It will automatically inject the GTM script into your page and update the consent state in GTM. This feature is currently marked as experimental as we want feedback from users.

## Implementation

1. **Creating a Tag Manager Container**

   > ℹ️ Info:
   >
   > This step is optional if you already have a Tag Manager container. Ensure your container has consent overview enabled.

   After signing into Google Tag Manager, you can create a new container.
   Continue to Google Tag Manager

   In Tag Manager, click Admin > Container Settings.Under Additional Settings, select "Enable consent overview".

   Enable consent overview

2. **Setting up c15t with Google Tag Manager** After creating your container, you can set up c15t with Google Tag Manager.

   All you need to do copy and paste your container ID into the unstable\_googleTagManager.id property.

   This begins with "GTM-".

   ```tsx
   <ConsentManagerProvider
     options={{
       mode: 'c15t',
       backendURL: 'https://your-instance.c15t.dev',
       unstable_googleTagManager: {
         id: 'GTM-XXXXXXX',
       },
     }}
   >
   ```

   If you have GTM in your site already, you can remove the GTM script from your head section.

### All Done!

c15t will automatically inject the GTM script into your page and update the consent state in GTM.


# Headless
URL: /docs/docs/frameworks/react/headless
Reduce bundle size and improve performance by using the headless package.
If you are using your own custom components for c15t, you can use the headless package to reduce bundle size and improve performance. This package still exports all the same hooks and functions as the standard package, but without the UI components.

```ts
import { ConsentManagerProvider } from '@c15t/react/headless';
```


# Checking consent
URL: /docs/docs/frameworks/react/hooks/use-consent-manager/checking-consent
Check if the user has given consent for a specific purpose with the has() method.
The `has()` method returns a `boolean` value and checks if the user has given consent for a specific purpose. It allows for simple & complex checks. This can be used to conditionally render content based on the user's consent, for example.

```tsx
// Simple check
const hasAnalytics = has('measurement');
const hasMarketing = has('marketing');

// Complex check
const hasAnalyticsAndMarketing = has({
  and: ['measurement', 'marketing'],
})

const hasEitherAnalyticsOrMarketing = has({
  or: ['measurement', 'marketing'],
})

const doesNotHaveMarketing = has({
  not: 'marketing',
})

// Nested checks
const condition = has({
  and: [
    'necessary',
    { or: ['measurement', 'marketing'] },
    { not: 'advertising' },
  ]
})
```


# Location Info
URL: /docs/docs/frameworks/react/hooks/use-consent-manager/location-info
How to view and update the users location
The `locationInfo` property stores the user's location (for example, to determine whether to show an EU GDPR banner).

This property is updated when the consent banner is fetched, and defaults to null when the location cannot be determined, such as in offline mode.
The location information can be updated via the `setLocationInfo()` method, which accepts a LocationInfo object or null.

## Usage

```tsx
setLocationInfo({
  countryCode: 'US',
  regionCode: 'CA',
  jurisdiction: 'CCPA'
});

console.log(locationInfo);
```

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`LocationInfo\`                 |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`LocationInfo\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Overview
URL: /docs/docs/frameworks/react/hooks/use-consent-manager/overview
The useConsentManager hook is a React hook that provides access to the consent managers state.
The store is the global state for the consent manager. It includes the user's consent preferences, location, consent banner state, and methods to update them.

## Usage

```tsx
import { useConsentManager } from '@c15t/react';

const { has } = useConsentManager();

const hasFunctionality = has('functionality');
```

## Returns

| Property    | Value                            |
| :---------- | :------------------------------- |
| Type Name   | \`PrivacyConsentState\`          |
| Source Path | \`./packages/core/src/index.ts\` |

\*AutoTypeTable: Could not extract \`PrivacyConsentState\` from \`./packages/core/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Setting consent
URL: /docs/docs/frameworks/react/hooks/use-consent-manager/setting-consent
Learn how to manage a users consent
### setSelectedConsent()

This method sets a user's consent choice but doesn't save it.

```tsx
setSelectedConsent('marketing', true) 
```

### saveConsents()

This method should be called after the user saves their consent preferences, e.g., via an 'Accept all' button or a dialog save. This function handles logic such as calling the backend and the `onConsentSet` callback.

```tsx
saveConsents('all') // User has accepted to all
saveConsents('custom') // Uses the consents set by setSelectedConsent()
saveConsents('necessary') // User rejects all 
```

### setConsent()

Useful for buttons like "Enable Marketing Consent", this will save the user's new consent by calling `saveConsents()`.

```tsx
setConsent('marketing', true) 
```


# useFocusTrap
URL: /docs/docs/frameworks/react/hooks/use-focus-trap
The useFocusTrap hook provides accessibility-focused keyboard navigation management, keeping focus trapped within modal components for better user experience.
The `useFocusTrap` hook creates an accessible experience by preventing keyboard focus from leaving a specific container element (like a dialog or modal) until it's dismissed. This is essential for users navigating with keyboards or screen readers.

## Usage

```tsx
import { useRef } from 'react';
import { useFocusTrap } from '@c15t/react';

const CustomCard = ({ children, ref, ...props }) => {
  const localRef = useRef(null);
  const cardRef = ref || localRef;
  
  useFocusTrap(true, cardRef);
  
  return (
    <div
      ref={cardRef}
      tabIndex={0}
      aria-modal={true}
      role="dialog"
      {...props}
    >
      {children}
    </div>
  );
};
```

## How It Works

When activated, the `useFocusTrap` hook:

1. Stores the element that was focused before trapping began
2. Finds all focusable elements within the container
3. Sets initial focus to the first focusable element (or the container itself)
4. Captures Tab and Shift+Tab keystrokes to cycle focus within the container
5. Restores focus to the original element when the component unmounts or `shouldTrap` becomes false

## Notes

- Hook must be called with a valid element reference that contains focusable elements
- Adding `tabIndex={0}` to the container ensures it can receive focus if no focusable children exist
- Always include proper ARIA attributes (`role="dialog"` and `aria-modal="true"`) for screen reader accessibility
- The hook automatically restores focus to the previously focused element when the component unmounts
- Set `shouldTrap` to false when you want to disable focus trapping temporarily

## Accessibility Compliance

Using this hook helps your application comply with these WCAG 2.1 requirements:

- [2.1.2: No Keyboard Trap](https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap.html) - While this criterion warns against trapping keyboard focus, modal dialogs are an exception when implemented properly
- [2.4.3: Focus Order](https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html) - Ensures focus moves in a meaningful sequence


# useTranslations
URL: /docs/docs/frameworks/react/hooks/use-translations
The useTranslations hook provides access to the consent managers translations.
The `useTranslations` hook provides access to the consent manager's translations found in the store and updates when the translations change.

## Usage

```tsx
function MyComponent() {
  const translations = useTranslations();
  
  const title = translations.cookieBanner.title;
  // Use the translations in your component
  return <h1>{title}</h1>;
}
```

## Returns

The `useTranslations` hook returns the translations object.

### Translations

| Property             | Type                                                                                                                                                                                                                                                   | Description | Default |  Required  |
| :------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------- | :------ | :--------: |
| common               | Partial\<CommonTranslations>                                                                                                                                                                                                                           |             | -       | ✅ Required |
| cookieBanner         | Partial\<CookieBannerTranslations>                                                                                                                                                                                                                     |             | -       | ✅ Required |
| consentManagerDialog | Partial\<ConsentManagerDialogTranslations>                                                                                                                                                                                                             |             | -       | ✅ Required |
| consentTypes         | \{ experience?: Partial\<ConsentTypeTranslations>; functionality?: Partial\<ConsentTypeTranslations>; marketing?: Partial\<ConsentTypeTranslations>; measurement?: Partial\<ConsentTypeTranslations>; necessary?: Partial\<ConsentTypeTranslations>; } |             | -       | ✅ Required |
| frame                | Partial\<FrameTranslations>                                                                                                                                                                                                                            |             | -       |  Optional  |

### CommonTranslations

| Property  | Type   | Description | Default |  Required  |
| :-------- | :----- | :---------- | :------ | :--------: |
| acceptAll | string |             | -       | ✅ Required |
| rejectAll | string |             | -       | ✅ Required |
| customize | string |             | -       | ✅ Required |
| save      | string |             | -       | ✅ Required |

### CookieBannerTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |

### ConsentManagerDialogTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |

### ConsentTypeTranslations

| Property    | Type   | Description | Default |  Required  |
| :---------- | :----- | :---------- | :------ | :--------: |
| title       | string |             | -       | ✅ Required |
| description | string |             | -       | ✅ Required |


# iframe blocking
URL: /docs/docs/frameworks/react/iframe-blocking
Learn how to block iframes based on consent.
## Overview

Iframe blocking is a feature that allows you to block iframes based on consent. This is useful for blocking iframes that are not allowed to load until consent is given.
This should be used when an iframe sets cookies such as a YouTube embed.

<section id="react-overview">
  c15t provides two ways to block iframes:

  - Headless: This is a headless implementation that does not render any DOM elements. It only manages the src/data-src attributes of existing iframe elements.
  - Frame Component (React only): This is a React component that conditionally renders content and provides a pre-built/customizable placeholder providing great UX. [Learn more about the Frame component](/docs/frameworks/react/components/frame)
</section>

<section id="frame">
  ## Frame Component (Recommended)

  ```tsx
   export default function App() {
     return (
       <>
         <Frame category="marketing" style={{ width: '500px', height: '500px' }}>
           <iframe
             title="Cool Duck Video"
             src="https://www.youtube.com/embed/mQJ6q1ZCzsg"
             width="100%"
             height="100%"
           />
         </Frame>
       </>
     );
   };
  ```
</section>

## Headless Usage

```html
// Will render immediately - No blocking
<iframe src="https://youtube.com/embed/unblocked" />

// Does not render until consent is granted
<iframe data-src="https://youtube.com/embed/123" data-category="marketing" />
```

> ℹ️ **Info:**
> The iframe blocker will only block iframes that have a data-category & data-src attribute.No fallback is provided for blocked iframes using this method.


# Internationalization (i18n)
URL: /docs/docs/frameworks/react/internationalization
Learn how to add translations to your Consent Manager.
## Overview

c15t supports internationalization (i18n) through the `translations` property in the `ConsentManagerOptions` object and has support for both server-side and client-side rendering.

| Server-side                                                                                                                                                                                                                                                                                                                                                                     | Client-side                                                                                                                                                                                                                            |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| The best way to reduce bundle size and improve performance. We can detect the user's language based on the browser's language settings, allowing for the most accurate translations. By default, when using a [consent.io](https://consent.io) hosted instance, [these languages](https://github.com/c15t/c15t/tree/main/packages/translations/src/translations) are supported. | Bundled with the application allowing for multiple languages to be supported without the need for a backend. The more translations you have, the larger the bundle size will be, which may impact the performance of your application. |

c15t supports partial translations, letting you supply only the changed keys without passing the whole translations object. When a requested language isn't available, the system falls back to the configured default/base language. Client-side translations take precedence over server-side translations, so client values override server values.

## Implementation

Pass the `translations` object in your `ConsentManagerProvider` options to configure the translations for your application.

```tsx title="app/layout.tsx"
import { ConsentManagerProvider } from '@c15t/react';

export default function Layout({ children }: { children: React.ReactNode }) {
	return (
		<ConsentManagerProvider options={{
        // ... rest of your config
  translations: {
    defaultLanguage: 'en',
        translations: {
    en: {
      common: {
        acceptAll: 'Accept all',
      },
      cookieBanner: {
        title: 'Cookie Banner',
        description: 'This is a cookie banner',
            },
      },
    },
  },
    }}>
			{children}
		</ConsentManagerProvider>
	);
}
```

## Types

### TranslationConfig

| Property    | Value                                    |
| :---------- | :--------------------------------------- |
| Type Name   | \`TranslationConfig\`                    |
| Source Path | \`./packages/translations/src/index.ts\` |

\*AutoTypeTable: Could not extract \`TranslationConfig\` from \`./packages/translations/src/index.ts\`. Verify the path/name and that the file is included by your tsconfig.\*

<import>./translation-types.mdx</import>


# React Quickstart
URL: /docs/docs/frameworks/react/quickstart
Learn how to integrate c15t into your React application with this step-by-step guide. Well cover installation, configuration, and basic usage.
## CLI Setup (Recommended)

You can get started with the `@c15t/cli` which will generate the code for you!

| Package manager | Command                       |
| :-------------- | :---------------------------- |
| npm             | `npx @c15t/cli generate`      |
| pnpm            | `pnpm dlx @c15t/cli generate` |
| yarn            | `yarn dlx @c15t/cli generate` |
| bun             | `bunx @c15t/cli generate`     |

## Manual Setup

1. **Install @c15t/react Package**

   | Package manager | Command                   |
   | :-------------- | :------------------------ |
   | npm             | `npm install @c15t/react` |
   | pnpm            | `pnpm add @c15t/react`    |
   | yarn            | `yarn add @c15t/react`    |
   | bun             | `bun add @c15t/react`     |

2. **Add to Your Application**

   ```tsx
   import { 
     ConsentManagerDialog,
     ConsentManagerProvider,
     CookieBanner,
   } from '@c15t/react';

   function App() {
     return (
       <ConsentManagerProvider options={{  
         mode: 'c15t', 
         backendURL: "https://your-instance.c15t.dev",
         consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner. 
         ignoreGeoLocation: true, // Useful for development to always view the banner.
       }}>
         <div className="App">
           {/* Your application content */}
         </div>
         <CookieBanner />
         <ConsentManagerDialog />
       </ConsentManagerProvider>
     );
   }

   export default App;
   ```

## Storing Consent

We recommend using the [hosted solution](/docs/frameworks/react/storing-consent/hosted) with [consent.io](https://consent.io) to store your consent.


# Script Loader
URL: /docs/docs/frameworks/react/script-loader
Load scripts based on consent. Used to load scripts that are not necessary for the users consent, such as analytics scripts.
## Overview

c15t provides the ability to load and unload scripts based on consent. This is useful for loading scripts that are not necessary for the user's consent, such as analytics scripts.

One common flaw of CMPs is they'll maintain a list of scripts that are blocked and then unblocked based on consent. This is a problem because it's not always accurate and can lead to scripts being missed or incorrectly blocked.

Our approach gives you, the developer, full control over the scripts that are loaded and unloaded, as no one knows your site better than you do.

> ℹ️ **Info:**
> When using the Script Loader, the tracking blocker will be disabled automatically (If enabled). This is because the tracking blocker is deprecated and may cause conflicts with the script loader. The current approach of the tracking blocker will only be available in v1.x of c15t, and will be removed in v2.0.

## Implementation

```ts
import { ConsentManagerProvider } from '@c15t/react';
import { googleTagManager } from '@c15t/scripts/google-tag-manager';

export function App({ children }: { children: React.ReactNode }) {
  return (
    <ConsentManagerProvider options={{
      scripts: [
        googleTagManager({
          id: 'GTM-XXXXXXX',
        }), // Prebuilt script or...
        {
          id: 'example',
          src: 'https://analytics.example.com/script.js',
          category: 'analytics',
        }
      ]
    }}>
      {children}
    </ConsentManagerProvider>
  );
}
```

## Prebuilt Scripts

A lot of scripts you may need to implement may be common, such as Google Tag Manager (GTM), PostHog, Meta Pixel, etc. To save you time, we have provided a set of prebuilt scripts for you to use.

These scripts are available in the `@c15t/scripts` package.

### All Prebuilt Scripts

| Script             | Guide                                          |
| ------------------ | ---------------------------------------------- |
| Google Tag Manager | [Guide](/docs/integrations/google-tag-manager) |
| Meta Pixel         | [Guide](/docs/integrations/meta-pixel)         |
| PostHog            | [Guide](/docs/integrations/posthog)            |
| TikTok Pixel       | [Guide](/docs/integrations/tiktok-pixel)       |
| LinkedIn Insights  | [Guide](/docs/integrations/linkedin-insights)  |
| Microsoft UET      | [Guide](/docs/integrations/microsoft-uet)      |
| X Pixel            | [Guide](/docs/integrations/x-pixel)            |

## Always Load Scripts

Some tracking scripts, like Google Tag Manager or PostHog, manage their own consent state internally. For these scripts, you'll want them to load immediately and never be unloaded, regardless of the consent state in c15t.

The `alwaysLoad` property allows you to bypass consent checks and ensure these scripts are always present on the page.

### When to Use Always Load

Use `alwaysLoad: true` for:

- **Tag Management Systems** (e.g., Google Tag Manager) that handle consent internally
- **Analytics Platforms** (e.g., PostHog) with built-in consent management & cookieless behavior
- **Scripts that must initialize early** and configure themselves based on consent

> ⚠️ **Warning:**
> When using alwaysLoad, you are responsible for ensuring the script respects user consent through its own consent management API. The script will load regardless of the user's consent choices in c15t.

### Behavior

Scripts with `alwaysLoad: true` have the following characteristics:

- **Load immediately** when the consent manager initializes, bypassing consent checks
- **Never unload** when consent is revoked or changed
- **Persist through** `clearAllScripts` calls
- **Still trigger callbacks** like `onBeforeLoad`, `onLoad`, and `onConsentChange`

## Types

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# Hosted
URL: /docs/docs/frameworks/react/storing-consent/hosted
Use consent.io for an easy, managed consent storage solution with minimal setup
## Managed Service vs Self-Hosting

Using [consent.io](https://consent.io) is the easiest way to get started with c15t. It's a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates, and compliance monitoring. For organizations with specific requirements, we also offer [self-hosting](/docs/self-host/v2) options.

## Using consent.io

> ℹ️ **Info:**
> Congratulations, you've chosen the best way to deploy to production!consent.io provides a fully managed service that removes all the infrastructure complexity. You can focus on your application while we handle scaling, updates & analytics. For organizations with specific requirements, it is possible to self-host the backend, allowing you to have full control over your data.

### Key Benefits

- **Zero Backend Maintenance** - No server setup or management required
- **Automatic Updates** - Easy updates & migrations to new versions
- **Built-in Scaling** - Handles traffic spikes without configuration
- **Geographic Detection** - Built-in jurisdiction detection for compliance
- **Analytics Dashboard** - Insights into consent patterns and compliance

## Implementation

```tsx title="src/App.tsx"
import { 
  ConsentManagerDialog,
  ConsentManagerProvider,
  CookieBanner,
} from '@c15t/react';

function App() {
  return (
    <ConsentManagerProvider options={{  
      mode: 'c15t', 
      backendURL: "https://your-instance.c15t.dev",
      consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner. 
      ignoreGeoLocation: true, // Useful for development to always view the banner.
    }}>
      <div className="App">
        {/* Your application content */}
      </div>
      <CookieBanner />
      <ConsentManagerDialog />
    </ConsentManagerProvider>
  );
}

export default App;
```

### Creating an instance with consent.io

1. **Sign up for a consent.io account**

2. **Create a new instance in the dashboard** For production applications, we recommend enabling usage billing so you can configure your instance to only allow trusted origins to send requests to it.

3. **Copy the provided backendURL (e.g., https\://your-instance.c15t.dev)**


# Offline
URL: /docs/docs/frameworks/react/storing-consent/offline
Store consent decisions in the browser with offline mode, perfect for sites without backend requirements
The offline mode provides a simple, browser-based approach to storing user consent decisions without requiring a backend server.

## Key Characteristics

- **No backend required** - Everything is stored locally in the browser
- **Simplified setup** - Get started quickly with minimal configuration
- **Independence** - Works without external services or APIs
- **Fast implementation** - Ideal for prototyping and simpler sites

## Implementation

```tsx title="src/App.tsx"
import { 
  ConsentManagerDialog,
  ConsentManagerProvider,
  CookieBanner,
} from '@c15t/react';

function App() {
  return (
    <ConsentManagerProvider options={{  
      mode: 'offline', 
      consentCategories: ['necessary', 'marketing'], // Optional: Specify which consent categories to show in the banner. 
    }}>
      <div className="App">
        {/* Your application content */}
      </div>
      <CookieBanner />
      <ConsentManagerDialog />
    </ConsentManagerProvider>
  );
}

export default App;
```

## How It Works

> ℹ️ **Info:**
> Offline mode provides the same API interface as the standard client but operates completely client-side.

The offline mode implements the same interface as the standard client, but with the following differences:

1. **Storage**: All consent preferences are stored in the browser's localStorage using the configured key
2. **Network**: No network requests are made, all operations happen locally
3. **Consent Banner**: The banner visibility is determined by checking if a value exists in localStorage
4. **Consent Verification**: Always returns a successful response


# Overview
URL: /docs/docs/frameworks/react/storing-consent/overview
Compare different approaches to storing consent decisions in your application
## Available Storage Options

| Storage Option | Description                                      | Best For                                                                                          | Guide                                                   |
| -------------- | ------------------------------------------------ | ------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |
| **Hosted**     | Using consent.io managed service or self-hosting | Production apps with minimal backend maintenance or Organizations requiring complete data control | [Guide](/docs/frameworks/react/storing-consent/hosted)  |
| **Offline**    | Browser-based storage with no server             | Simple implementations or dev environments                                                        | [Guide](/docs/frameworks/react/storing-consent/offline) |
| **Custom**     | Fully customized storage implementation          | Complex integrations with existing systems                                                        | TBD                                                     |

> 💡 **Tip:**
> For most applications, we recommend starting with Hosted (consent.io) for the simplest setup with the most features.

## Choosing the Right Approach

Use this flowchart to determine which c15t configuration is best for your needs:

```mermaid
flowchart TD
Start([Start here]) --> StoreConsent

StoreConsent{Need to store
consent choices?}
StoreConsent -->|Yes| ManagedService
StoreConsent -->|No| OfflineMode

ManagedService{Want a managed
service?}
ManagedService -->|Yes| ConsentIO
ManagedService -->|No| SelfHosted

OfflineMode([c15t Offline Mode]):::optionStyle
OfflineMode -.-> OfflineNote[Client-side only
Stores in localStorage]:::noteStyle

ConsentIO([consent.io]):::recommendStyle
ConsentIO -.-> ConsentIONote[Fully managed
Simplest setup]:::noteStyle

SelfHosted([Self-hosted Instance]):::optionStyle
SelfHosted -.-> SelfHostedNote[Full control
Requires maintenance]:::noteStyle
```


# Styling with CSS Classes
URL: /docs/docs/frameworks/react/styling/classnames
Learn how to customize components using CSS class names and class-based styling.
c15t supports multiple syntax approaches to styling components, a simple class based approach, or an object syntax allowing you to combine class names with inline styles.

## Class-Based Styling

The simplest way to style a component is by providing class names directly to theme keys:

```tsx
<CookieBanner 
  theme={{
    'banner.root': 'my-banner-container',
    'banner.header.title': 'banner-title',
    'banner.header.description': 'banner-description',
    'banner.footer': 'banner-footer'
  }}
/>
```

## Object Syntax

You can also use the object syntax with the `className` property:

```tsx
import styles from './Banner.module.css';

<CookieBanner 
  theme={{
    'banner.root': {
      className: 'my-banner-container',
      style: {
        borderColor: dynamicBorderColor
      }
    },
    'banner.header.title': styles.title // CSS Modules work too!
  }}
/>
```

## Tailwind CSS

c15t supports Tailwind CSS classes, however there may be some cases where you need to add the `!important` flag to override the default styles.

```tsx
<CookieBanner 
  theme={{
    'banner.card': '!bg-red-500'
  }}
/>
```


# Color Scheme (Light/Dark Mode)
URL: /docs/docs/frameworks/react/styling/color-scheme
Manage your components light, dark, and system color schemes.
## Overview

c15t provides built-in support for managing color schemes for your components, allowing you to implement light mode, dark mode, or system-based preferences with minimal configuration.
By default, c15t detects your theme by checking if you have a `.dark` class on the root element.

## Usage

```tsx
<ConsentManagerProvider
  options={{
    // ... rest of your config
    react: {
      colorScheme: 'light',
    },
  }}
>
  <CookieBanner />
  <ConsentManagerDialog />
</ConsentManagerProvider>
```

## CSS Classes

The color scheme is decided based on two classes:

- `.dark` - By default, c15t checks for this class on the root element to determine the color scheme if none is provided.
- `.c15t-dark` - This class is automatically added/removed based on the color scheme.


# Styling with CSS Variables
URL: /docs/docs/frameworks/react/styling/css-variables
Learn how to use CSS variables to create flexible and dynamic themes for c15t components.
CSS Variables are our recommended way to style your components. They provide a powerful way to create dynamic, maintainable themes for components. This approach is particularly useful for dark mode, theming, and responsive design.

## Basic Usage

Each component has a set of predefined CSS variables that you can override:

```tsx
<CookieBanner
  theme={{
    'banner.card': {
      style: {
        '--banner-background-color': 'red',
        '--banner-border-radius': '0px',
      },
    },
  }}
/>
```

## All CSS Variables

| Component              | CSS Variables                                                                                                                 |
| ---------------------- | ----------------------------------------------------------------------------------------------------------------------------- |
| Cookie Banner          | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/cookie-banner/theme.ts)                 |
| Consent Manager Dialog | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/consent-manager-dialog/theme.ts)        |
| Consent Manager Widget | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/consent-manager-widget/theme.ts)        |
| Button                 | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/shared/ui/button/button.types.ts)       |
| Accordion              | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/shared/ui/accordion/accordion.types.ts) |
| Switch                 | [Open in GitHub](https://github.com/c15t/c15t/blob/main/packages/react/src/components/shared/ui/switch/switch.types.ts)       |


# General Styling
URL: /docs/docs/frameworks/react/styling/overview
Learn the core concepts of the c15t theming system and how it enables flexible component styling.
## Understanding the Theming System

Think of our theming system as a set of style instructions that cascade through your components, similar to CSS but with more structure and type safety. Each component has specific customizable areas, called theme keys, that you can target for styling.

The theming system provides a structured way to customize the appearance of components while maintaining their functionality and accessibility. It allows you to:

- Target specific elements within a component
- Apply consistent styling across your application
- Ensure type safety and prevent styling errors

## Theme Key Structure

Every theme key in our system follows a predictable pattern that makes it easy to target specific elements within a component:

```
'componentName.elementPath.subElement'
```

1. **Component Name**: The base name of the component (e.g., `banner`, `widget`, `dialog`)
2. **Element Path**: The path to the element within the component (e.g., `header.title`, `footer.accept-button`)
3. **State Variations**: Optional state indicators (e.g., `switch.thumb.checked`, `button.hover`)

### Component Hierarchies

Components are structured in a hierarchical manner, which is reflected in their theme keys:

```tsx
// Example of nested component styling
const theme = {
  'widget.root': 'container mx-auto',
  'widget.accordion': 'space-y-2',
  'widget.accordion.item': 'border rounded-sm',
  'widget.accordion.trigger': 'p-4 hover:bg-gray-50',
  'widget.accordion.trigger-inner': '',
  'widget.accordion.content': 'p-4 bg-gray-50'
}
```

Each level in the hierarchy can be styled independently, giving you fine-grained control over the appearance.

### Visualizing the Hierarchy

Here's a simplified visualization of a typical accordion component:

```
widget.root
└── widget.accordion
    └── widget.accordion.item
        ├── widget.accordion.trigger
        │   └── widget.accordion.trigger-inner
        └── widget.accordion.content
```

## Using Theme Context

For consistent styling across your application, you can use the `ThemeProvider` component to apply a global theme:

```tsx
const globalTheme = {
  'banner.root': 'bg-white rounded-lg shadow-lg',
  'dialog.root': 'bg-white rounded-lg shadow-xl',
  'widget.root': 'bg-gray-50 rounded border'
}

function App() {
  return (
    <ThemeProvider theme={globalTheme}>
      <YourApp />
    </ThemeProvider>
  )
}
```

### Theme Inheritance

Components can still define their own themes, which will merge with and override the global theme:

```tsx
<ThemeProvider theme={globalTheme}>
  {/* Uses the global theme */}
  <CookieBanner />
  
  {/* Overrides parts of the global theme */}
  <CookieBanner 
    theme={{
      'banner.root': 'bg-blue-50 p-4 rounded-lg'
    }}
  />
</ThemeProvider>
```

## Type-Safe Styling

Our theming system includes TypeScript support to help prevent errors:

```tsx
// TypeScript will catch invalid theme keys
const theme: CookieBannerTheme = {
  'banner.root': 'bg-white p-4 rounded-lg shadow-lg',
  'banner.invalid': 'TypeScript error!' // Error: invalid key
}
```

## Disabling Default Styles

Sometimes you might want to start from scratch. Use the `noStyle` prop to remove all default styling:

```tsx
<CookieBanner noStyle theme={yourCustomTheme} />
```


# Welcome to c15t Docs
URL: /docs/docs
Find all the guides and resources you need to build your application
## Get Started

## Explore by frontend framework



# Google Tag Manager
URL: /docs/docs/integrations/google-tag-manager
Learn how to integrate c15t with Google Tag Manager (GTM).
c15t supports Google Tag Manager (GTM) and Consent Mode v2. The pre-built c15t script will automatically inject the GTM script into your page and update the consent state in GTM to match the consent state in c15t.

By default, c15t will always load this script regardless of consent. This is because GTM manages its own consent state internally & loads other scripts based on the consent state.

Allowing c15t to manage GTM prevents any issues with GTM scripts being loaded without consent.

## Implementation

1. **Creating a Tag Manager Container**

   > ℹ️ Info:
   >
   > This step is optional if you already have a Tag Manager container. Ensure your container has consent overview enabled.

   After signing into Google Tag Manager, you can create a new container.
   Continue to Google Tag Manager

   In Tag Manager, click Admin > Container Settings.Under Additional Settings, select "Enable consent overview".

   Enable consent overview

2. **Custom Update Trigger** We now need to create a custom trigger in GTM to trigger the update event, this is the trigger that is fired when the consent state is updated, e.g. user gives consent to a specific purpose.

   In GTM, you can create a new trigger by clicking on the "Triggers" tab and then clicking on "New".

   For the event name, you can use the default "consent-update", this is customizable later so you can change it if you want.

   Create trigger

3. **Adding / Updating tags** Now for your existing tags, you can add the "consent-update" trigger to the tag, this will fire the update event when the consent state is updated & it has the appropriate consent state.

   Update tags

4. **Setting up c15t with Google Tag Manager** After creating your container, you can set up c15t with Google Tag Manager. All you need to do is copy and paste your container ID & begins with "GTM-".

   JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { googleTagManager } from '@c15t/scripts/google-tag-manager';

   configureConsentManager({
     // ... 
     scripts: [
       googleTagManager({
         id: 'GTM-XXXXXXX',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { googleTagManager } from '@c15t/scripts/google-tag-manager';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           scripts: [
             googleTagManager({
               id: 'GTM-XXXXXXX',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { googleTagManager } from '@c15t/scripts/google-tag-manager';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           googleTagManager({
             id: 'GTM-XXXXXXX',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { googleTagManager } from '@c15t/scripts/google-tag-manager';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App() { 
     return (
       <ConsentManagerProvider
         options={{
           // ... other options
           scripts: [
             googleTagManager({
               id: 'GTM-XXXXXXX',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

## Types

### GoogleTagManagerOptions

| Property        | Type   | Description                                                                                                                                                                                                                                                                                                                    | Default          |  Required  |
| :-------------- | :----- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------- | :--------: |
| id              | string | Your Google Tag Manager container ID. Begins with 'GTM-'.                                                                                                                                                                                                                                                                      | -                | ✅ Required |
| updateEventName | string | Update Event Name&#xA;A custom event name used as a trigger to load your script once the consent has been updated.                                                                                                                                                                                                             | 'consent-update' |  Optional  |
| script          | Script | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'google-tag-manager'&#xA;- \`src\`: \`https\://www\.googletagmanager.com/gtm.js?id=$\{id}\`&#xA;- \`category\`: 'necessary' (You control what scripts get loaded via Google Tag Manager)&#xA;- \`alwaysLoad\`: true&#xA;- \`async\`: true | -                |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# Google Tag (gtag.js)
URL: /docs/docs/integrations/google-tag
Learn how to use Google Tag (gtag.js) with c15t.
Google Tag (gtag.js) is used to send data to various Google products like Analytics, Ads & Floodlight.
Based on the product you are using you should set the category to `marketing` (Ads & Floodlight) or `measurement` (Analytics).

By default, c15t will always load this script regardless of consent. This is because Google Tag manages its own consent state via Google Consent Mode v2.

c15t will automatically sync the consent state so you don't need to do anything extra.

## Implementation

1. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { gtag } from '@c15t/scripts/google-tag';

   configureConsentManager({
     // ... 
     scripts: [
       gtag({
         id: 'G-XXXXXXXXXX',
         category: 'marketing',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { gtag } from '@c15t/scripts/google-tag';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           scripts: [
             gtag({
               id: 'G-XXXXXXXXXX',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { gtag } from '@c15t/scripts/google-tag';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           gtag({
             id: 'G-XXXXXXXXXX',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { gtag } from '@c15t/scripts/google-tag';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App() { 
     return (
       <ConsentManagerProvider
         options={{
           // ... other options
           scripts: [
             gtag({
               id: 'G-XXXXXXXXXX',
               category: 'measurement',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

## Types

### GtagOptions

| Property | Type                                | Description                                                                                                                                                                                                          | Default |  Required  |
| :------- | :---------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| id       | string                              | Your gtag id                                                                                                                                                                                                         | -       | ✅ Required |
| category | AllConsentNames                     | The consent category to use for the gtag script. This is typically marketing (Ads & Floodlight) or measurement (Analytics)                                                                                           | -       | ✅ Required |
| script   | Partial\<Omit\<Script, "category">> | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'gtag'&#xA;- \`src\`: \`https\://www\.googletagmanager.com/gtag/js?id=$\{id}\`&#xA;- \`async\`: true&#xA;- \`alwaysLoad\`: true | -       |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# Integrations
URL: /docs/docs/integrations
How to integrate your tools with c15t.
## Overview

Many of your tools may require consent to be given before they can be used. This is especially true for analytics and marketing tools.

c15t has various ways to integrate with your tools, depending on the tool you are using.

## Script Loader

Many marketing and analytics tools are commonly loaded using a script tag, such as Google Tag Manager (GTM), Google Tag (gtag.js), Meta Pixel and TikTok Pixel.

c15t's script loader allows you to easily integrate your tools that require consent with c15t, to make this even easier we have provided a set of prebuilt scripts for you to use.

- [JavaScript](/docs/frameworks/javascript/script-loader)
- [React](/docs/frameworks/react/script-loader)
- [Next.js](/docs/frameworks/next/script-loader)

## has() method

The `has()` method allows you to check if the user has given consent for a specific purpose. You can learn more about the `has()` method [here](/docs/frameworks/javascript/store/checking-consent).

```ts


const hasAnalytics = has('measurement');

if (hasAnalytics) {
  myAnalyticsLibrary.track('checkout_completed');
}
```


# LinkedIn Insights
URL: /docs/docs/integrations/linkedin-insights
Learn how to use LinkedIn Insights with c15t.
LinkedIn Insights is a popular tracking pixel for marketing purposes. By default c15t will load the script based on `marketing` consent.

## Implementation

1. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { linkedinInsights } from '@c15t/scripts/linkedin-insights';

   configureConsentManager({
     // ... 
     scripts: [
       linkedinInsights({
         id: '123456789012345',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { linkedinInsights } from '@c15t/scripts/linkedin-insights';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     <ConsentManagerProvider
       options={{
         scripts: [
           linkedinInsights({
             id: '123456789012345',
           }),
         ],
       }}
     >
       {children}
     </ConsentManagerProvider>
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { linkedinInsights } from '@c15t/scripts/linkedin-insights';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           linkedinInsights({
             id: '123456789012345',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { linkedinInsights } from '@c15t/scripts/linkedin-insights';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) { 
     <ConsentManagerProvider
       options={{
         // ... other options
         scripts: [
           linkedinInsights({
             id: '123456789012345',
           }),
         ],
       }}
     >
       {children}
     </ConsentManagerProvider>
   }
   ```

## Types

### LinkedInInsightsOptions

| Property | Type   | Description                                                                                                                                                                                                         | Default |  Required  |
| :------- | :----- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :------ | :--------: |
| id       | string | Your LinkedIn Insights ID                                                                                                                                                                                           | -       | ✅ Required |
| script   | Script | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'linkedin-insights'&#xA;- \`src\`: \`https\://snap.licdn.com/li.lms-analytics/insight.min.js\`&#xA;- \`category\`: 'marketing' | -       |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# Meta Pixel (Facebook Pixel)
URL: /docs/docs/integrations/meta-pixel
Learn how to use Meta Pixel with c15t.
Meta Pixel (Facebook Pixel) is a popular tracking pixel for marketing purposes. By default c15t will load the script based on `marketing` consent.
This script will also persist after consent is revoked. This is because the script has built-in functionality to opt into and out of tracking based on consent, which allows us to not need to load the script again when consent is revoked.

## Implementation

1. **Adding the script to c15t** JavaScript

   ```ts
   import { metaPixel } from 'c15t/scripts/meta-pixel';

   configureConsentManager({
     // ... 
     scripts: [
       metaPixel({
         pixelId: '123456789012345',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { metaPixel } from '@c15t/scripts/meta-pixel';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           scripts: [
             metaPixel({
               pixelId: '123456789012345',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { metaPixel } from '@c15t/scripts/meta-pixel';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           metaPixel({
             pixelId: '123456789012345',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { metaPixel } from '@c15t/scripts/meta-pixel';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           // ... other options
           scripts: [
             metaPixel({
               pixelId: '123456789012345',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

## metaPixelEvent

You can use the `metaPixelEvent` function to track events. This is a wrapper around the `fbq` function that the Meta Pixel script uses.

To learn more about Meta Pixel's standard events, see the [Meta Pixel documentation](https://developers.facebook.com/docs/meta-pixel/reference).

```ts
import { metaPixelEvent } from '@c15t/scripts/meta-pixel';

metaPixelEvent('Purchase', { value: 10.0, currency: 'USD' });
```

## Types

### MetaPixelOptions

| Property | Type   | Description                                                                                                                                                                                           | Default |  Required  |
| :------- | :----- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| pixelId  | string | Your Meta Pixel ID                                                                                                                                                                                    | -       | ✅ Required |
| script   | Script | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'meta-pixel'&#xA;- \`src\`: \`https\://connect.facebook.net/en\_US/fbevents.js\`&#xA;- \`category\`: 'marketing' | -       |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |

### StandardEventParams

| Property             | Type                       | Description | Default |  Required  |
| :------------------- | :------------------------- | :---------- | :------ | :--------: |
| AddPaymentInfo       | AddPaymentInfoParams       |             | -       | ✅ Required |
| AddToCart            | AddToCartParams            |             | -       | ✅ Required |
| AddToWishlist        | AddToWishlistParams        |             | -       | ✅ Required |
| CompleteRegistration | CompleteRegistrationParams |             | -       | ✅ Required |
| Contact              | FbqBaseEventParams         |             | -       | ✅ Required |
| CustomizeProduct     | FbqBaseEventParams         |             | -       | ✅ Required |
| Donate               | FbqBaseEventParams         |             | -       | ✅ Required |
| FindLocation         | FbqBaseEventParams         |             | -       | ✅ Required |
| InitiateCheckout     | InitiateCheckoutParams     |             | -       | ✅ Required |
| Lead                 | LeadParams                 |             | -       | ✅ Required |
| Purchase             | PurchaseParams             |             | -       | ✅ Required |
| Schedule             | FbqBaseEventParams         |             | -       | ✅ Required |
| Search               | SearchParams               |             | -       | ✅ Required |
| StartTrial           | StartTrialParams           |             | -       | ✅ Required |
| SubmitApplication    | FbqBaseEventParams         |             | -       | ✅ Required |
| Subscribe            | SubscribeParams            |             | -       | ✅ Required |
| ViewContent          | ViewContentParams          |             | -       | ✅ Required |


# Microsoft UET
URL: /docs/docs/integrations/microsoft-uet
Learn how to use Microsoft UET with c15t.
Microsoft UET is a popular tracking pixel for marketing purposes. By default c15t will load the script based on `marketing` consent.
This tag also load Microsoft Clarity (if enabled), we recommend loading this separately, as it's an analytics script.

## Implementation

1. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { microsoftUet } from '@c15t/scripts/microsoft-uet';

   configureConsentManager({
     // ... 
     scripts: [
       microsoftUet({
         id: '123456789012345',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { microsoftUet } from '@c15t/scripts/microsoft-uet';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     <ConsentManagerProvider
       options={{
         scripts: [
           microsoftUet({
             id: '123456789012345',
           }),
         ],
       }}
     >
       {children}
     </ConsentManagerProvider>
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { microsoftUet } from '@c15t/scripts/microsoft-uet';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           microsoftUet({
             id: '123456789012345',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { microsoftUet } from '@c15t/scripts/microsoft-uet';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) { 
     <ConsentManagerProvider
       options={{
         // ... other options
         scripts: [
           microsoftUet({
             id: '123456789012345',
           }),
         ],
       }}
     >
       {children}
     </ConsentManagerProvider>
   }
   ```

## Types

### MicrosoftUetOptions

| Property | Type   | Description                                                                                                                                                                   | Default |  Required  |
| :------- | :----- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| id       | string | Your Microsoft UET ID                                                                                                                                                         | -       | ✅ Required |
| script   | Script | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'microsoft-uet'&#xA;- \`src\`: \`//bat.bing.com/bat.js\`&#xA;- \`category\`: 'marketing' | -       |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# PostHog
URL: /docs/docs/integrations/posthog
Learn how to sync c15t consent with PostHog.
Posthog allows for both cookieless and cookie-based tracking. This means that you can sync c15t with Posthog, allowing you to continue using Posthog even when users have not given consent.

## PostHog SDK Implementation

This is the recommended approach if you're using the Posthog JS SDK, this is commonly used in React projects.

1. **Initialize Posthog** When you initialize posthog make sure to set cookieless\_mode to on\_reject.

   ```ts
   posthog.init("phc_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", {
     api_host: "https://eu.i.posthog.com",
     defaults: "2025-05-24",
     cookieless_mode: 'on_reject'
   })

   posthog.has_opted_out_capturing() // Avoids accidental tracking without consent till c15t has loaded
   ```

2. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { posthog } from 'posthog-js';

   configureConsentManager({
     // ... 
     callbacks: {
       onConsentSet({ preferences }) {
         if (preferences.measurement) {
           posthog.opt_in_capturing();
         } else {
           posthog.opt_out_capturing();
         }
       }
     }
   });
   ```

   React

   ```tsx
   import { posthog } from 'posthog-js';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) {
     return (
       <ConsentManagerProvider
         options={{
           callbacks: {
               onConsentSet({ preferences }) {
                 if (preferences.measurement) {
                   posthog.opt_in_capturing();
                 } else {
                   posthog.opt_out_capturing();
                 }
               }
             }
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { posthog } from 'posthog-js';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
      <ClientSideOptionsProvider
         callbacks={{
            onConsentSet({ preferences }) {
                if (preferences.measurement) {
                  posthog.opt_in_capturing();
                } else {
                  posthog.opt_out_capturing();
                }
            }
         }}
      >
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { posthog } from 'posthog-js';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) {
   return (
   <ConsentManagerProvider
   options={{
   // ... other options
   callbacks: {
     onConsentSet({ preferences }) {
       if (preferences.measurement) {
         posthog.opt_in_capturing();
       } else {
         posthog.opt_out_capturing();
       }
     }
   }
   }}
   >
   {children}
   </ConsentManagerProvider>
   );
   }
   ```

## PostHog Script Implementation

If you want to load posthog via a script tag it's recommended to use this approach.

By default c15t will always load the script regardless of consent. This is because the script has built-in functionality to opt into and out of tracking based on consent.

1. **Initialize Posthog** This script does not load the Posthog script, it only syncs the consent state with Posthog via the Posthog JS SDK.

   This is due to Posthog's use of cookieless tracking. However, you need to set cookieless\_mode to on\_reject when initializing Posthog.

   ```ts
   posthog.init("phc_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", {
     api_host: "https://eu.i.posthog.com",
     defaults: "2025-05-24",
     // PostHog will not set any cookies until the user has given consent
     cookieless_mode: 'on_reject'
   })
   ```

2. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { posthog } from '@c15t/scripts/posthog';

   configureConsentManager({
     // ... 
     scripts: [
       posthog({ 
         id: 'phc_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 
         apiHost: 'https://eu.i.posthog.com',
         defaults: '2025-05-24', 
         options: { person_profiles: 'identified_only' }
       }),
      ],
   });
   ```

   React

   ```tsx
   import { posthog } from '@c15t/scripts/posthog';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) {
     return (
       <ConsentManagerProvider
         options={{
           scripts: [
             posthog({ 
                 id: 'phc_foobar', 
                 apiHost: 'https://eu.i.posthog.com',
                 defaults: '2025-05-24', 
                 options: { person_profiles: 'identified_only' }
               }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { posthog } from '@c15t/scripts/posthog';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           posthog({ 
               id: 'phc_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 
               apiHost: 'https://eu.i.posthog.com',
               defaults: '2025-05-24', 
               options: { person_profiles: 'identified_only' }
             }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { posthog } from '@c15t/scripts/posthog';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) {
     <ConsentManagerProvider
       options={{
         // ... other options
         scripts: [
           posthog({ 
             id: 'phc_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 
             apiHost: 'https://eu.i.posthog.com',
             defaults: '2025-05-24', 
             options: { person_profiles: 'identified_only' }
           }),
         ],
       }}
     >
       {children}
     </ConsentManagerProvider>
   }
   ```

## Types

### PosthogConsentOptions

| Property | Type                     | Description                                                                                                                              | Default                     |  Required  |
| :------- | :----------------------- | :--------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------- | :--------: |
| id       | string                   | Your posthog id, begins with 'phc\_'.                                                                                                    | -                           | ✅ Required |
| apiHost  | string                   | Your posthog api host.                                                                                                                   | 'https\://eu.i.posthog.com' | ✅ Required |
| defaults | string                   | The defaults for the posthog script.                                                                                                     | -                           | ✅ Required |
| options  | Record\<string, unknown> | Other optional options for the posthog script.                                                                                           | -                           | ✅ Required |
| script   | Script                   | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'posthog-consent'&#xA;- \`category\`: 'measurement' | -                           |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- || :------ | :--------: |
| id                         | string                             | Unique identifier for the script                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# TikTok Pixel
URL: /docs/docs/integrations/tiktok-pixel
Learn how to use TikTok Pixel with c15t.
TikTok Pixel is a popular tracking pixel for marketing purposes. By default c15t will load the script based on `marketing` consent.
This script will also persist after consent is revoked. This is because the script has built-in functionality to opt into and out of tracking based on consent, which allows us to not need to load the script again when consent is revoked.

## Implementation

1. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { tiktokPixel } from '@c15t/scripts/tiktok-pixel';

   configureConsentManager({
     // ... 
     scripts: [
       tiktokPixel({
         pixelId: '123456789012345',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { tiktokPixel } from '@c15t/scripts/tiktok-pixel';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           scripts: [
             tiktokPixel({
               pixelId: '123456789012345',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { tiktokPixel } from '@c15t/scripts/tiktok-pixel';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           tiktokPixel({
             pixelId: '123456789012345',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { tiktokPixel } from '@c15t/scripts/tiktok-pixel';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           // ... other options
           scripts: [
             tiktokPixel({
               pixelId: '123456789012345',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

## Types

### TikTokPixelOptions

| Property | Type   | Description                                                                                                                                                                                               | Default |  Required  |
| :------- | :----- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| pixelId  | string | Your TikTok Pixel ID                                                                                                                                                                                      | -       | ✅ Required |
| script   | Script | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'tiktok-pixel'&#xA;- \`src\`: \`https\://analytics.tiktok.com/i18n/pixel/events.js\`&#xA;- \`category\`: 'marketing' | -       |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |


# X Pixel (Twitter Pixel)
URL: /docs/docs/integrations/x-pixel
Learn how to use X Pixel (Twitter Pixel) with c15t.
X Pixel is a popular tracking pixel for marketing purposes. By default c15t will load the script based on `marketing` consent.

## Implementation

1. **Adding the script to c15t** JavaScript

   ```ts
   import { configureConsentManager } from 'c15t';
   import { xPixel } from '@c15t/scripts/x-pixel';

   configureConsentManager({
     // ... 
     scripts: [
       xPixel({
         id: '123456789012345',
       }),
     ],
   });
   ```

   React

   ```tsx
   import { xPixel } from '@c15t/scripts/x-pixel';
   import { ConsentManagerProvider } from '@c15t/react';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           scripts: [
             xPixel({
               id: '123456789012345',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

   Next.js + App Router

   ```tsx
   'use client';
   import { xPixel } from '@c15t/scripts/x-pixel';
   import { ClientSideOptionsProvider } from '@c15t/nextjs/client';

   export function ConsentManagerClient({ children }: { children: React.ReactNode }) { 
     return (
       <ClientSideOptionsProvider
         scripts={[
           xPixel({
             id: '123456789012345',
           }),
         ]}
       >
         {children}
       </ClientSideOptionsProvider>
     );
   }
   ```

   Next.js + Pages Router

   ```tsx
   import { xPixel } from '@c15t/scripts/x-pixel';
   import { ConsentManagerProvider } from '@c15t/nextjs';

   export function App({ children }: { children: React.ReactNode }) { 
     return (
       <ConsentManagerProvider
         options={{
           // ... other options
           scripts: [
             xPixel({
               id: '123456789012345',
             }),
           ],
         }}
       >
         {children}
       </ConsentManagerProvider>
     );
   }
   ```

## xPixelEvent

You can use the `xPixelEvent` function to track events. This is a wrapper around the `twq` function that the X Pixel script uses.

```ts
import { xPixelEvent } from '@c15t/scripts/x-pixel';

xPixelEvent('tw-xxxx-xxxx', { value: 10.00, currency: 'USD' });
```

## Types

### XPixelOptions

| Property | Type   | Description                                                                                                                                                                              | Default |  Required  |
| :------- | :----- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| pixelId  | string | Your X Pixel ID                                                                                                                                                                          | -       | ✅ Required |
| script   | Script | Override or extend the default script values.&#xA;&#xA;Default values:&#xA;- \`id\`: 'x-pixel'&#xA;- \`src\`: \`https\://static.ads-twitter.com/uwt.js\`&#xA;- \`category\`: 'marketing' | -       |  Optional  |

### Script

| Property                   | Type                               | Description| Default |  Required  |
| :------------------------- | :--------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| id                         | string                             | Unique identifier for the script| -       | ✅ Required |
| src                        | string                             | URL of the script to load| -       |  Optional  |
| textContent                | string                             | Inline JavaScript code to execute| -       |  Optional  |
| category                   | HasCondition\<AllConsentNames>     | Consent category or condition required to load this script| -       | ✅ Required |
| callbackOnly               | boolean                            | Whether this is a callback-only script that doesn't need to load an external resource.&#xA;When true, no script tag will be added to the DOM, only callbacks will be executed.&#xA;&#xA;This is useful for:&#xA;- Managing consent for libraries already loaded on the page&#xA;- Enabling/disabling tracking features based on consent changes&#xA;- Running custom code when consent status changes without loading external scripts&#xA;&#xA;Example use cases:&#xA;- Enabling/disabling Posthog tracking&#xA;- Configuring Google Analytics consent mode&#xA;- Managing cookie consent for embedded content | false   |  Optional  |
| persistAfterConsentRevoked | boolean                            | Whether the script should persist after consent is revoked| false   |  Optional  |
| alwaysLoad                 | boolean                            | Whether the script should always load regardless of consent state.&#xA;&#xA;This is useful for scripts like Google Tag Manager or PostHog that manage&#xA;their own consent state internally. The script will load immediately and&#xA;never be unloaded based on consent changes.&#xA;&#xA;Note: When using this option, you are responsible for ensuring the script&#xA;itself respects user consent preferences through its own consent management.                                                                                                                                                          | false   |  Optional  |
| fetchPriority              | "high" \| "low" \| "auto"          | Priority hint for browser resource loading| -       |  Optional  |
| attributes                 | Record\<string, string>            | Additional attributes to add to the script element| -       |  Optional  |
| async                      | boolean                            | Whether to use async loading| -       |  Optional  |
| defer                      | boolean                            | Whether to defer script loading| -       |  Optional  |
| nonce                      | string                             | Content Security Policy nonce| -       |  Optional  |
| anonymizeId                | boolean                            | Whether to use an anonymized ID for the script element, this helps ensure the script is not blocked by ad blockers                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | true    |  Optional  |
| onBeforeLoad               | (info: ScriptCallbackInfo) => void | Callback executed before the script is loaded| -       |  Optional  |
| onLoad                     | (info: ScriptCallbackInfo) => void | Callback executed when the script loads successfully| -       |  Optional  |
| onDelete                   | (info: ScriptCallbackInfo) => void | Callback executed when the script is being unloaded/removed| -       |  Optional  |
| onError                    | (info: ScriptCallbackInfo) => void | Callback executed if the script fails to load| -       |  Optional  |
| onConsentChange            | (info: ScriptCallbackInfo) => void | Callback executed whenever the consent store is changed.&#xA;This callback only applies to scripts already loaded.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | -       |  Optional  |

### XPixelEvent

| Property       | Type             | Description                                                                                                                                                                                          | Default | Required |
| :------------- | :--------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :------: |
| value          | number           | Total value of the conversion event (ex: $ value of the transaction in case of a purchase, etc.)                                                                                                     | -       | Optional |
| currency       | string           | Currency of the conversion event&#xA;ISO 4217 code (ex: USD, EUR, JPY, etc.)                                                                                                                         | -       | Optional |
| conversion\_id | string           | Unique identifier for the event that can be used for deduplication purposes                                                                                                                          | -       | Optional |
| search\_string | string           | Search string of the conversion event                                                                                                                                                                | -       | Optional |
| description    | string           | Description of the conversion event                                                                                                                                                                  | -       | Optional |
| twclid         | string           | twclid of the conversion event&#xA;The X Pixel already automatically passes twclid from URL or first-party cookie. This parameter can be optionally used to force attribution to a certain ad click. | -       | Optional |
| status         | boolean          | Status of the conversion event                                                                                                                                                                       | -       | Optional |
| contents       | XPixelContent\[] | Content/products associated with the conversion event                                                                                                                                                | -       | Optional |

### XPixelContent

| Property           | Type   | Description                                                                                                                                                            | Default |  Required  |
| :----------------- | :----- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------ | :--------: |
| content\_type      | string | Type of the content                                                                                                                                                    | -       |  Optional  |
| content\_id        | string | ID of the content&#xA;For product catalog users: please pass SKU&#xA;For all other users: Please pass Global Trade Item Number (GTIN) if available, otherwise pass SKU | -       | ✅ Required |
| content\_name      | string | Name of a product or service                                                                                                                                           | -       |  Optional  |
| content\_price     | number | Price of a product or service                                                                                                                                          | -       |  Optional  |
| num\_items         | number | Quantity of the content                                                                                                                                                | -       |  Optional  |
| content\_group\_id | string | ID associated with a group of product variants                                                                                                                         | -       |  Optional  |


# Introduction to Consent Management (c15t)
URL: /docs/docs/introduction
Transform privacy consent from a compliance checkbox into a fully observable system. Built for modern development teams, c15t unifies analytics, consent tracking, and privacy controls into a single performant solution - no more slow cookie banners or blind spots in user privacy choices.
## What is Consent Management?

Consent Management (c15t) is an open-source platform that transforms privacy consent from a compliance checkbox into a fully observable system. Built for modern development teams, it provides a unified solution for:

- Analytics integration
- Consent management
- Privacy controls
- Complete consent state visibility

Gone are the days of:

- Cookie banners slowing down your site
- Blind spots in consent tracking
- Complex multi-vendor implementations
- Uncertainty about privacy policy changes
- Poor visibility into consent states

## Core Principles

### 1. Open Source First

Building in public isn't just about transparency - it's about creating better tools through community collaboration. Our open-source foundation means you can:

- Inspect and understand the code handling user consent
- Contribute improvements and fixes
- Self-host for complete control
- Trust through transparency

### 2. Developer Experience

Privacy management should feel natural in your development workflow:

- TypeScript-first APIs with full type safety
- Modern React patterns and hooks
- Intuitive state management
- Comprehensive documentation

### 3. Performance as Standard

Every byte matters. c15t is built with performance in mind:

- Minimal bundle impact
- Efficient state management
- Optimized server/client patterns
- Smart code splitting

### 4. Privacy by Design

Privacy isn't an afterthought - it's a core part of modern web development:

- GDPR-compliant by default
- Granular consent controls
- Complete audit trail
- Privacy-first architecture

## Get Started

Ready to modernize your privacy infrastructure? Choose your path:


# Cookie Policy
URL: /docs/docs/legals/cookie-policy

## Introduction

This Cookie Policy explains how and why Consent Management Inc (“we,” “us,” “our”) uses cookies and similar tracking technologies on our Website, [c15t.com](https://c15t.com) (“Website”). By using our Website, you consent to our use of cookies in accordance with this policy.

## What Are Cookies?

Cookies are small data files placed on your device when you visit a Website. They help the Website remember your actions and preferences (such as login details or language settings) over a period of time, so you do not have to re-enter them during each visit.

## Types of Cookies We Use

### 1. Essential Cookies

- These cookies are necessary for the Website to function and cannot be disabled. They include cookies that enable you to log in securely.

### 2. Analytics Cookies

- We use analytics cookies, including those deployed by PostHog, to collect data on how you interact with our Website. This non-personally identifiable data is used to improve the Website’s functionality and user experience.

### 3. Functionality and Preference Cookies

- These cookies allow the Website to remember choices you make (such as your preferred language) and provide a more personalized experience.

## Managing Cookies

Most browsers allow you to control cookies through their settings. You can:

- Block or delete cookies via your browser settings.
- Opt-out of specific cookies or tracking technologies when such options are provided on the Website.

Please note that disabling cookies may affect the functionality of this Website and your overall user experience.

## Third-Party Cookies

We may allow third parties (for example, analytics providers like PostHog) to place cookies on our Website. These third parties have their own privacy policies and we do not control the cookies they may use.

## Changes to This Cookie Policy

We may update the Cookie Policy periodically to reflect changes in our practices or for operational, legal, or regulatory reasons. The current version will always be posted on our Website with an updated effective date.

## Contact Us

For questions about this Cookie Policy, please contact us at:

> **Consent Management Inc**\
> 2261 Market Street STE 86311
> San Francisco, CA 94114\
> Email: [support@c15t.com](mailto:support@c15t.com)


# Privacy Policy
URL: /docs/docs/legals/privacy-policy

## Introduction

Consent Management Inc (“we,” “us,” “our”) operates the website [c15t.com](https://c15t.com) (“Website”). This Privacy Policy describes how we collect, use, disclose, and protect your personal information. By accessing or using the Website, you agree to the practices described in this policy. If you do not agree with these practices, please do not use our Website.

## Applicable Laws and Scope

This policy is designed for a Delaware-based company and informs users worldwide. When you are located in jurisdictions with additional privacy requirements (for example, under the GDPR or CCPA), certain rights and protections may apply. Please refer to the relevant sections below and consult applicable laws for your jurisdiction.

## Information We Collect

### 1. Personal Data

- We may collect personal data that you voluntarily provide when interacting with our Website (for example, your name, email address, and telephone number).

### 2. Automatically Collected Data

- We automatically collect non-personally identifiable information through technologies like cookies and web beacons. This may include IP addresses, browser types, and device identifiers.

### 3. Analytics Data

- We use PostHog to track analytics on our Website. PostHog may collect information such as usage behavior, page views, and interaction data. This information is used solely for enhancing website performance and user experience. For more details, please review PostHog’s own privacy practices on their website.

## How We Use Your Information

We use your personal information to:

- Provide and improve our Website and services.
- Analyze website traffic and usage trends.
- Communicate with you regarding inquiries and updates (subject to your consent where applicable).
- Comply with legal and regulatory requirements.

## Legal Basis for Processing (For Users in Jurisdictions Requiring It)

Where required by law (for example, under the GDPR), our processing is based on:

- Your consent for analytics and marketing purposes.
- Our legitimate interests in operating and improving our Website.
- Any contractual obligations you have with us.

## Information Sharing and Disclosure

We do not sell or rent your personal information. We may share your personal data with:

- **Third-party service providers:** for example, analytics providers like PostHog, who process data on our behalf. These service providers are contractually obligated to maintain the confidentiality and security of your data.
- **Legal authorities:** if required by law or to protect our rights and interests.
- **Other parties:** only with your explicit consent.

## International Data Transfers

Since we serve a worldwide audience, your personal data may be transferred to—and maintained on—servers located outside your state, country, or other jurisdiction (including the United States). We take appropriate steps to ensure that your data is treated securely in accordance with this Privacy Policy and applicable laws.

## Data Retention and Security

- **Data Retention:** We retain personal data only as long as necessary to fulfill its intended purposes or as required by applicable law.
- **Security Measures:** We implement reasonable administrative, technical, and physical safeguards to protect your personal information.

## Your Rights

Depending on your jurisdiction, you may have the right to:

- Access, correct, or delete your personal data.
- Object to or restrict certain processing.
- Withdraw consent.

To exercise these rights, please contact us using the details provided below.

## Children's Privacy

Our Website is not directed to children under 13 years of age. We do not knowingly collect personal information from children. If you believe that we have inadvertently collected such information, please contact us immediately.

## Policy Updates

We may update this Privacy Policy occasionally. If we make material changes, we will update the effective date at the top of the policy and notify you by any required means.

## Contact Us

For questions or concerns regarding this Privacy Policy or our practices, please contact us at:

> **Consent Management Inc**\
> 2261 Market Street STE 86311
> San Francisco, CA 94114\
> Email: [support@c15t.com](mailto:support@c15t.com)


# c15t Community Code of Conduct
URL: /docs/docs/oss/code-of-conduct
Guidelines for fostering an inclusive, respectful, and collaborative open-source community
## Our Commitment

At c15t, we are committed to creating an open, welcoming, and inclusive environment for all contributors, regardless of:

- Age
- Body size
- Disability (visible or invisible)
- Ethnicity
- Gender identity and expression
- Experience level
- Nationality
- Personal appearance
- Race
- Religion
- Sexual orientation

Our goal is to build a community that is diverse, supportive, and focused on collaborative innovation.

## Our Standards

### Positive Behaviors We Encourage

- **Empathy and Kindness**: Treat each other with compassion and understanding
- **Respect for Diversity**: Value different perspectives, experiences, and backgrounds
- **Constructive Communication**:
  - Provide thoughtful, actionable feedback
  - Receive feedback with an open mind
- **Accountability**:
  - Own your mistakes
  - Learn and grow from constructive criticism
- **Community-First Mindset**: Prioritize the collective success of the project over individual interests

### Behaviors We Do Not Tolerate

- Sexualized language or imagery
- Trolling, insulting, or derogatory comments
- Personal or political attacks
- Public or private harassment
- Sharing private information without explicit consent
- Any conduct that would be considered inappropriate in a professional setting

## Enforcement Responsibilities

### Community Leaders Commit To:

- Clarify and enforce community standards
- Provide fair and consistent moderation
- Communicate the rationale behind moderation decisions
- Protect the privacy and safety of all community members

### Reporting Misconduct

If you experience or witness unacceptable behavior, please report it to:

- **Email**: [conduct@c15t.dev](mailto:conduct@c15t.dev)
- **GitHub Issues**: Use the "Conduct Violation" template in our repository

All reports will be:

- Reviewed promptly
- Handled with confidentiality
- Addressed objectively

## Enforcement Guidelines

### 1. Correction

**Impact**: Unprofessional or unwelcoming behavior

**Response**:

- Private written warning
- Clear explanation of the violation
- Opportunity for improvement

### 2. Warning

**Impact**: Repeated or significant inappropriate interactions

**Response**:

- Formal warning
- Temporary restrictions on community interactions
- Specified period of no direct communication

### 3. Temporary Ban

**Impact**: Serious or sustained inappropriate behavior

**Response**:

- Temporary suspension from community spaces
- No public or private interactions
- Clear path to reinstatement

### 4. Permanent Ban

**Impact**: Repeated violations or severe misconduct

**Response**:

- Permanent removal from all community spaces
- No further interaction permitted

## Our Pledge

We believe that **diversity is our strength**. By maintaining an inclusive environment, we:

- Encourage innovation
- Foster learning
- Build better software together

## Attribution

This Code of Conduct is inspired by the [Contributor Covenant](https://www.contributor-covenant.org), adapted to reflect the unique values and spirit of the c15t community.

**Last Updated**: 2025-09-08

## Questions?

If you have questions about this Code of Conduct, please [open an issue](https://github.com/c15t/community/issues) or email [conduct@c15t.dev](mailto:conduct@c15t.dev).


# Contributing to c15t.com
URL: /docs/docs/oss/contributing

We love your input! We want to make contributing to c15t.com as easy and transparent as possible, whether it's:

- Reporting a bug
- Discussing the current state of the code
- Submitting a fix
- Proposing new features
- Becoming a maintainer

## 📜 License

By contributing to Consent Management (c15t), you agree that your contributions will be licensed under the GNU General Public License v3.0 (GPL-3.0). This is a copyleft license that ensures the software and all derivatives remain free and open source.

[Read the full license here](/docs/oss/license)

## 🏠 House Rules

### Before You Start

- Check existing [issues](https://github.com/c15t/c15t/issues) and [PRs](https://github.com/c15t/c15t/pulls) first
- **Always create an issue before starting development**
- Follow our PR template carefully

### Issue Approval Process

We use the `needs-approval` label to manage contributions:

#### For Contributors

- 🚫 **Needs Approval First:**
  - New features
  - Large-scale refactoring
  - Architecture changes
  - *Wait for a c15t.com team member to remove the `needs-approval` label*

- ✅ **Can Start Immediately:**
  - Bug fixes
  - Documentation updates
  - Performance improvements
  - Security fixes
  - Tests

## Development Process

We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.

### 🤖 Automated Workflows

We leverage several automated workflows to ensure code quality:

1. **Code Quality**
   - Formatting: Biome automatically formats code
   - Types: TypeScript checks run on every PR
   - Tests: Vitest runs the test suite
   - Build: Turbo ensures everything builds correctly

2. **Dependencies**
   - Renovate keeps dependencies up to date
   - PNPM manages our packages
   - Changesets handles our versioning

3. **Pull Requests**
   - PR titles are checked for semantic versioning
   - Automated code review for common issues
   - Required checks must pass before merging

## Getting Started

1. Fork the repo and create your branch from `main`:

   ```sh
   git clone https://github.com/your-username/c15t.git
   cd c15t
   git switch -c my-feature
   ```

2. Install dependencies:

   ```sh
   corepack enable  # Sets up PNPM
   pnpm install     # Installs dependencies
   ```

3. Make your changes and ensure the following pass:

   ```sh
   pnpm fmt         # Format code
   pnpm test        # Run tests
   pnpm build       # Build packages
   ```

## Pull Request Process

1. **Create an Issue First**
   - For features/refactoring: Wait for approval (needs-approval label)
   - For bugs/docs: Can start work immediately

2. **Make Your Changes**
   - Follow our coding standards (enforced by Biome)
   - Add tests for new functionality
   - Update documentation as needed

3. **Create Pull Request**
   - Use our PR template
   - Link the related issue
   - Add screenshots for UI changes
   - Describe your changes clearly

4. **Automated Checks**
   The following will run automatically:
   - Code formatting (Biome)
   - Type checking (TypeScript)
   - Tests (Vitest)
   - Build verification (Turbo)
   - Dependency checks (Renovate)
   - PR title format
   - Issue linking

5. **Review Process**
   - Maintainers will review your code
   - Address any requested changes
   - Once approved, it will be merged

## Release Process

Releases are automated through our CI/CD pipeline:

1. Merge to `main` triggers version check
2. Changesets determines version bump
3. New version is published to npm
4. GitHub release is created
5. Documentation is updated

## Development Guidelines

### Code Style

We use Biome for formatting and linting. Configuration is in `biome.jsonc`.

### Commits

Follow [Conventional Commits](https://www.conventionalcommits.org/):

- `feat:` New features
- `fix:` Bug fixes
- `docs:` Documentation
- `chore:` Maintenance
- `refactor:` Code changes
- `test:` Test changes

### Testing

- Write tests for new features
- Update tests for changes
- Run `pnpm test` locally

### Documentation

- Update docs with new features
- Include code examples
- Update README if needed

## Questions?

Don't hesitate to:

- Open an issue
- Start a discussion
- Ask in comments

## Important License Note

c15t.com is licensed under the GNU General Public License v3.0 (GPL-3.0). By contributing to this project, you agree to license your contributions under the same license. This means:

- ✅ You can use the code commercially
- ✅ You can modify the code
- ✅ You can distribute the code
- ✅ You can use the code privately
- ✅ You can use the code for patent purposes

But you must:

- 📢 Disclose source
- 📄 Include original license
- 📝 State changes
- 🔄 Use same license
- 📋 Include copyright notice

[Learn more about GPL-3.0](https://choosealicense.com/licenses/gpl-3.0/)


# License
URL: /docs/docs/oss/license

c15t.com is licensed under the GNU General Public License v3.0 (GPL-3.0). By contributing to this project, you agree to license your contributions under the same license. This means:

- ✅ You can use the code commercially
- ✅ You can modify the code
- ✅ You can distribute the code
- ✅ You can use the code privately

But you must:

- 📢 Disclose source
- 📄 Include original license
- 📝 State changes
- 🔄 Use same license
- 📋 Include copyright notice

***

## Full License

*Version 3, 29 June 2007*\
*Copyright © 2007 Free Software Foundation, Inc. [fsf.org](http://fsf.org/)*

Everyone is permitted to copy and distribute verbatim copies of this license
document, but changing it is not allowed.

## Preamble

The GNU General Public License is a free, copyleft license for software and other
kinds of works.

The licenses for most software and other practical works are designed to take away
your freedom to share and change the works. By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change all versions of a
program--to make sure it remains free software for all its users. We, the Free
Software Foundation, use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors. You can apply it to
your programs, too.

When we speak of free software, we are referring to freedom, not price. Our General
Public Licenses are designed to make sure that you have the freedom to distribute
copies of free software (and charge for them if you wish), that you receive source
code or can get it if you want it, that you can change the software or use pieces of
it in new free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you these rights or
asking you to surrender the rights. Therefore, you have certain responsibilities if
you distribute copies of the software, or if you modify it: responsibilities to
respect the freedom of others.

For example, if you distribute copies of such a program, whether gratis or for a fee,
you must pass on to the recipients the same freedoms that you received. You must make
sure that they, too, receive or can get the source code. And you must show them these
terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps: **(1)** assert
copyright on the software, and **(2)** offer you this License giving you legal permission
to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains that there is
no warranty for this free software. For both users' and authors' sake, the GPL
requires that modified versions be marked as changed, so that their problems will not
be attributed erroneously to authors of previous versions.

Some devices are designed to deny users access to install or run modified versions of
the software inside them, although the manufacturer can do so. This is fundamentally
incompatible with the aim of protecting users' freedom to change the software. The
systematic pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable. Therefore, we have designed
this version of the GPL to prohibit the practice for those products. If such problems
arise substantially in other domains, we stand ready to extend this provision to
those domains in future versions of the GPL, as needed to protect the freedom of
users.

Finally, every program is threatened constantly by software patents. States should
not allow patents to restrict development and use of software on general-purpose
computers, but in those that do, we wish to avoid the special danger that patents
applied to a free program could make it effectively proprietary. To prevent this, the
GPL assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and modification follow.

## TERMS AND CONDITIONS

### 0. Definitions

"This License" refers to version 3 of the GNU General Public License.

"Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

"The Program" refers to any copyrightable work licensed under this
License. Each licensee is addressed as "you". "Licensees" and
"recipients" may be individuals or organizations.

To "modify" a work means to copy from or adapt all or part of the work in
a fashion requiring copyright permission, other than the making of an exact copy. The
resulting work is called a "modified version" of the earlier work or a
work "based on" the earlier work.

A "covered work" means either the unmodified Program or a work based on
the Program.

To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for infringement under
applicable copyright law, except executing it on a computer or modifying a private
copy. Propagation includes copying, distribution (with or without modification),
making available to the public, and in some countries other activities as well.

To "convey" a work means any kind of propagation that enables other
parties to make or receive copies. Mere interaction with a user through a computer
network, with no transfer of a copy, is not conveying.

An interactive user interface displays "Appropriate Legal Notices" to the
extent that it includes a convenient and prominently visible feature that **(1)**
displays an appropriate copyright notice, and **(2)** tells the user that there is no
warranty for the work (except to the extent that warranties are provided), that
licensees may convey the work under this License, and how to view a copy of this
License. If the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

### 1. Source Code

The "source code" for a work means the preferred form of the work for
making modifications to it. "Object code" means any non-source form of a
work.

A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of interfaces
specified for a particular programming language, one that is widely used among
developers working in that language.

The "System Libraries" of an executable work include anything, other than
the work as a whole, that **(a)** is included in the normal form of packaging a Major
Component, but which is not part of that Major Component, and **(b)** serves only to
enable use of the work with that Major Component, or to implement a Standard
Interface for which an implementation is available to the public in source code form.
A "Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system (if any) on which
the executable work runs, or a compiler used to produce the work, or an object code
interpreter used to run it.

The "Corresponding Source" for a work in object code form means all the
source code needed to generate, install, and (for an executable work) run the object
code and to modify the work, including scripts to control those activities. However,
it does not include the work's System Libraries, or general-purpose tools or
generally available free programs which are used unmodified in performing those
activities but which are not part of the work. For example, Corresponding Source
includes interface definition files associated with source files for the work, and
the source code for shared libraries and dynamically linked subprograms that the work
is specifically designed to require, such as by intimate data communication or
control flow between those subprograms and other parts of the work.

The Corresponding Source need not include anything that users can regenerate
automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same work.

### 2. Basic Permissions

All rights granted under this License are granted for the term of copyright on the
Program, and are irrevocable provided the stated conditions are met. This License
explicitly affirms your unlimited permission to run the unmodified Program. The
output from running a covered work is covered by this License only if the output,
given its content, constitutes a covered work. This License acknowledges your rights
of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey, without
conditions so long as your license otherwise remains in force. You may convey covered
works to others for the sole purpose of having them make modifications exclusively
for you, or provide you with facilities for running those works, provided that you
comply with the terms of this License in conveying all material for which you do not
control copyright. Those thus making or running the covered works for you must do so
exclusively on your behalf, under your direction and control, on terms that prohibit
them from making any copies of your copyrighted material outside their relationship
with you.

Conveying under any other circumstances is permitted solely under the conditions
stated below. Sublicensing is not allowed; section 10 makes it unnecessary.

### 3. Protecting Users' Legal Rights From Anti-Circumvention Law

No covered work shall be deemed part of an effective technological measure under any
applicable law fulfilling obligations under article 11 of the WIPO copyright treaty
adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention
of such measures.

When you convey a covered work, you waive any legal power to forbid circumvention of
technological measures to the extent such circumvention is effected by exercising
rights under this License with respect to the covered work, and you disclaim any
intention to limit operation or modification of the work as a means of enforcing,
against the work's users, your or third parties' legal rights to forbid circumvention
of technological measures.

### 4. Conveying Verbatim Copies

You may convey verbatim copies of the Program's source code as you receive it, in any
medium, provided that you conspicuously and appropriately publish on each copy an
appropriate copyright notice; keep intact all notices stating that this License and
any non-permissive terms added in accord with section 7 apply to the code; keep
intact all notices of the absence of any warranty; and give all recipients a copy of
this License along with the Program.

You may charge any price or no price for each copy that you convey, and you may offer
support or warranty protection for a fee.

### 5. Conveying Modified Source Versions

You may convey a work based on the Program, or the modifications to produce it from
the Program, in the form of source code under the terms of section 4, provided that
you also meet all of these conditions:

- **a)** The work must carry prominent notices stating that you modified it, and giving a
  relevant date.
- **b)** The work must carry prominent notices stating that it is released under this
  License and any conditions added under section 7. This requirement modifies the
  requirement in section 4 to "keep intact all notices".
- **c)** You must license the entire work, as a whole, under this License to anyone who
  comes into possession of a copy. This License will therefore apply, along with any
  applicable section 7 additional terms, to the whole of the work, and all its parts,
  regardless of how they are packaged. This License gives no permission to license the
  work in any other way, but it does not invalidate such permission if you have
  separately received it.
- **d)** If the work has interactive user interfaces, each must display Appropriate Legal
  Notices; however, if the Program has interactive interfaces that do not display
  Appropriate Legal Notices, your work need not make them do so.

A compilation of a covered work with other separate and independent works, which are
not by their nature extensions of the covered work, and which are not combined with
it such as to form a larger program, in or on a volume of a storage or distribution
medium, is called an "aggregate" if the compilation and its resulting
copyright are not used to limit the access or legal rights of the compilation's users
beyond what the individual works permit. Inclusion of a covered work in an aggregate
does not cause this License to apply to the other parts of the aggregate.

### 6. Conveying Non-Source Forms

You may convey a covered work in object code form under the terms of sections 4 and
5, provided that you also convey the machine-readable Corresponding Source under the
terms of this License, in one of these ways:

- **a)** Convey the object code in, or embodied in, a physical product (including a
  physical distribution medium), accompanied by the Corresponding Source fixed on a
  durable physical medium customarily used for software interchange.
- **b)** Convey the object code in, or embodied in, a physical product (including a
  physical distribution medium), accompanied by a written offer, valid for at least
  three years and valid for as long as you offer spare parts or customer support for
  that product model, to give anyone who possesses the object code either **(1)** a copy of
  the Corresponding Source for all the software in the product that is covered by this
  License, on a durable physical medium customarily used for software interchange, for
  a price no more than your reasonable cost of physically performing this conveying of
  source, or **(2)** access to copy the Corresponding Source from a network server at no
  charge.
- **c)** Convey individual copies of the object code with a copy of the written offer to
  provide the Corresponding Source. This alternative is allowed only occasionally and
  noncommercially, and only if you received the object code with such an offer, in
  accord with subsection 6b.
- **d)** Convey the object code by offering access from a designated place (gratis or for
  a charge), and offer equivalent access to the Corresponding Source in the same way
  through the same place at no further charge. You need not require recipients to copy
  the Corresponding Source along with the object code. If the place to copy the object
  code is a network server, the Corresponding Source may be on a different server
  (operated by you or a third party) that supports equivalent copying facilities,
  provided you maintain clear directions next to the object code saying where to find
  the Corresponding Source. Regardless of what server hosts the Corresponding Source,
  you remain obligated to ensure that it is available for as long as needed to satisfy
  these requirements.
- **e)** Convey the object code using peer-to-peer transmission, provided you inform
  other peers where the object code and Corresponding Source of the work are being
  offered to the general public at no charge under subsection 6d.

A separable portion of the object code, whose source code is excluded from the
Corresponding Source as a System Library, need not be included in conveying the
object code work.

A "User Product" is either **(1)** a "consumer product", which
means any tangible personal property which is normally used for personal, family, or
household purposes, or **(2)** anything designed or sold for incorporation into a
dwelling. In determining whether a product is a consumer product, doubtful cases
shall be resolved in favor of coverage. For a particular product received by a
particular user, "normally used" refers to a typical or common use of
that class of product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected to use, the
product. A product is a consumer product regardless of whether the product has
substantial commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

"Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install and execute
modified versions of a covered work in that User Product from a modified version of
its Corresponding Source. The information must suffice to ensure that the continued
functioning of the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or specifically for
use in, a User Product, and the conveying occurs as part of a transaction in which
the right of possession and use of the User Product is transferred to the recipient
in perpetuity or for a fixed term (regardless of how the transaction is
characterized), the Corresponding Source conveyed under this section must be
accompanied by the Installation Information. But this requirement does not apply if
neither you nor any third party retains the ability to install modified object code
on the User Product (for example, the work has been installed in ROM).

The requirement to provide Installation Information does not include a requirement to
continue to provide support service, warranty, or updates for a work that has been
modified or installed by the recipient, or for the User Product in which it has been
modified or installed. Access to a network may be denied when the modification itself
materially and adversely affects the operation of the network or violates the rules
and protocols for communication across the network.

Corresponding Source conveyed, and Installation Information provided, in accord with
this section must be in a format that is publicly documented (and with an
implementation available to the public in source code form), and must require no
special password or key for unpacking, reading or copying.

### 7. Additional Terms

"Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions. Additional
permissions that are applicable to the entire Program shall be treated as though they
were included in this License, to the extent that they are valid under applicable
law. If additional permissions apply only to part of the Program, that part may be
used separately under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option remove any
additional permissions from that copy, or from any part of it. (Additional
permissions may be written to require their own removal in certain cases when you
modify the work.) You may place additional permissions on material, added by you to a
covered work, for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you add to a
covered work, you may (if authorized by the copyright holders of that material)
supplement the terms of this License with terms:

- **a)** Disclaiming warranty or limiting liability differently from the terms of
  sections 15 and 16 of this License; or
- **b)** Requiring preservation of specified reasonable legal notices or author
  attributions in that material or in the Appropriate Legal Notices displayed by works
  containing it; or
- **c)** Prohibiting misrepresentation of the origin of that material, or requiring that
  modified versions of such material be marked in reasonable ways as different from the
  original version; or
- **d)** Limiting the use for publicity purposes of names of licensors or authors of the
  material; or
- **e)** Declining to grant rights under trademark law for use of some trade names,
  trademarks, or service marks; or
- **f)** Requiring indemnification of licensors and authors of that material by anyone
  who conveys the material (or modified versions of it) with contractual assumptions of
  liability to the recipient, for any liability that these contractual assumptions
  directly impose on those licensors and authors.

All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10. If the Program as you received
it, or any part of it, contains a notice stating that it is governed by this License
along with a term that is a further restriction, you may remove that term. If a
license document contains a further restriction but permits relicensing or conveying
under this License, you may add to a covered work material governed by the terms of
that license document, provided that the further restriction does not survive such
relicensing or conveying.

If you add terms to a covered work in accord with this section, you must place, in
the relevant source files, a statement of the additional terms that apply to those
files, or a notice indicating where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the form of a
separately written license, or stated as exceptions; the above requirements apply
either way.

### 8. Termination

You may not propagate or modify a covered work except as expressly provided under
this License. Any attempt otherwise to propagate or modify it is void, and will
automatically terminate your rights under this License (including any patent licenses
granted under the third paragraph of section 11).

However, if you cease all violation of this License, then your license from a
particular copyright holder is reinstated **(a)** provisionally, unless and until the
copyright holder explicitly and finally terminates your license, and **(b)** permanently,
if the copyright holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated permanently
if the copyright holder notifies you of the violation by some reasonable means, this
is the first time you have received notice of violation of this License (for any
work) from that copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the licenses of
parties who have received copies or rights from you under this License. If your
rights have been terminated and not permanently reinstated, you do not qualify to
receive new licenses for the same material under section 10.

### 9. Acceptance Not Required for Having Copies

You are not required to accept this License in order to receive or run a copy of the
Program. Ancillary propagation of a covered work occurring solely as a consequence of
using peer-to-peer transmission to receive a copy likewise does not require
acceptance. However, nothing other than this License grants you permission to
propagate or modify any covered work. These actions infringe copyright if you do not
accept this License. Therefore, by modifying or propagating a covered work, you
indicate your acceptance of this License to do so.

### 10. Automatic Licensing of Downstream Recipients

Each time you convey a covered work, the recipient automatically receives a license
from the original licensors, to run, modify and propagate that work, subject to this
License. You are not responsible for enforcing compliance by third parties with this
License.

An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an organization, or
merging organizations. If propagation of a covered work results from an entity
transaction, each party to that transaction who receives a copy of the work also
receives whatever licenses to the work the party's predecessor in interest had or
could give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if the predecessor
has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the rights granted or
affirmed under this License. For example, you may not impose a license fee, royalty,
or other charge for exercise of rights granted under this License, and you may not
initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging
that any patent claim is infringed by making, using, selling, offering for sale, or
importing the Program or any portion of it.

### 11. Patents

A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based. The work thus
licensed is called the contributor's "contributor version".

A contributor's "essential patent claims" are all patent claims owned or
controlled by the contributor, whether already acquired or hereafter acquired, that
would be infringed by some manner, permitted by this License, of making, using, or
selling its contributor version, but do not include claims that would be infringed
only as a consequence of further modification of the contributor version. For
purposes of this definition, "control" includes the right to grant patent
sublicenses in a manner consistent with the requirements of this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free patent license
under the contributor's essential patent claims, to make, use, sell, offer for sale,
import and otherwise run, modify and propagate the contents of its contributor
version.

In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent (such as an
express permission to practice a patent or covenant not to sue for patent
infringement). To "grant" such a patent license to a party means to make
such an agreement or commitment not to enforce a patent against the party.

If you convey a covered work, knowingly relying on a patent license, and the
Corresponding Source of the work is not available for anyone to copy, free of charge
and under the terms of this License, through a publicly available network server or
other readily accessible means, then you must either **(1)** cause the Corresponding
Source to be so available, or **(2)** arrange to deprive yourself of the benefit of the
patent license for this particular work, or **(3)** arrange, in a manner consistent with
the requirements of this License, to extend the patent license to downstream
recipients. "Knowingly relying" means you have actual knowledge that, but
for the patent license, your conveying the covered work in a country, or your
recipient's use of the covered work in a country, would infringe one or more
identifiable patents in that country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or arrangement, you
convey, or propagate by procuring conveyance of, a covered work, and grant a patent
license to some of the parties receiving the covered work authorizing them to use,
propagate, modify or convey a specific copy of the covered work, then the patent
license you grant is automatically extended to all recipients of the covered work and
works based on it.

A patent license is "discriminatory" if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on the
non-exercise of one or more of the rights that are specifically granted under this
License. You may not convey a covered work if you are a party to an arrangement with
a third party that is in the business of distributing software, under which you make
payment to the third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties who would receive
the covered work from you, a discriminatory patent license **(a)** in connection with
copies of the covered work conveyed by you (or copies made from those copies), or **(b)**
primarily for and in connection with specific products or compilations that contain
the covered work, unless you entered into that arrangement, or that patent license
was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting any implied
license or other defenses to infringement that may otherwise be available to you
under applicable patent law.

### 12. No Surrender of Others' Freedom

If conditions are imposed on you (whether by court order, agreement or otherwise)
that contradict the conditions of this License, they do not excuse you from the
conditions of this License. If you cannot convey a covered work so as to satisfy
simultaneously your obligations under this License and any other pertinent
obligations, then as a consequence you may not convey it at all. For example, if you
agree to terms that obligate you to collect a royalty for further conveying from
those to whom you convey the Program, the only way you could satisfy both those terms
and this License would be to refrain entirely from conveying the Program.

### 13. Use with the GNU Affero General Public License

Notwithstanding any other provision of this License, you have permission to link or
combine any covered work with a work licensed under version 3 of the GNU Affero
General Public License into a single combined work, and to convey the resulting work.
The terms of this License will continue to apply to the part which is the covered
work, but the special requirements of the GNU Affero General Public License, section
13, concerning interaction through a network will apply to the combination as such.

### 14. Revised Versions of this License

The Free Software Foundation may publish revised and/or new versions of the GNU
General Public License from time to time. Such new versions will be similar in spirit
to the present version, but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number. If the Program specifies that
a certain numbered version of the GNU General Public License "or any later
version" applies to it, you have the option of following the terms and
conditions either of that numbered version or of any later version published by the
Free Software Foundation. If the Program does not specify a version number of the GNU
General Public License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions of the GNU
General Public License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the Program.

Later license versions may give you additional or different permissions. However, no
additional obligations are imposed on any author or copyright holder as a result of
your choosing to follow a later version.

### 15. Disclaimer of Warranty

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE
QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

### 16. Limitation of Liability

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY
COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS
PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE
OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE
WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

### 17. Interpretation of Sections 15 and 16

If the disclaimer of warranty and limitation of liability provided above cannot be
given local legal effect according to their terms, reviewing courts shall apply local
law that most closely approximates an absolute waiver of all civil liability in
connection with the Program, unless a warranty or assumption of liability accompanies
a copy of the Program in return for a fee.

*END OF TERMS AND CONDITIONS*

## How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest possible use to
the public, the best way to achieve this is to make it free software which everyone
can redistribute and change under these terms.

To do so, attach the following notices to the program. It is safest to attach them
to the start of each source file to most effectively state the exclusion of warranty;
and each file should have at least the "copyright" line and a pointer to
where the full notice is found.

{`<program>`}  Copyright (C) {`<year>`}  {`<name of author>`}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see [http://www.gnu.org/licenses/](http://www.gnu.org/licenses/).

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short notice like this
when it starts in an interactive mode:

{`<program>`}  Copyright (C) {`<year>`}  {`<name of author>`}
This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type 'show c' for details.

The hypothetical commands `show w` and `show c` should show the appropriate parts of
the General Public License. Of course, your program's commands might be different;
for a GUI interface, you would use an "about box".

You should also get your employer (if you work as a programmer) or school, if any, to
sign a "copyright disclaimer" for the program, if necessary. For more
information on this, and how to apply and follow the GNU GPL, see
[http://www.gnu.org/licenses/](http://www.gnu.org/licenses/).

The GNU General Public License does not permit incorporating your program into
proprietary programs. If your program is a subroutine library, you may consider it
more useful to permit linking proprietary applications with the library. If this is
what you want to do, use the GNU Lesser General Public License instead of this
License. But first, please read
[http://www.gnu.org/philosophy/why-not-lgpl.html](http://www.gnu.org/philosophy/why-not-lgpl.html).


# Building Privacy Tools in the Open
URL: /docs/docs/oss/why-open-source
We believe great developer tools should be built in the open, with transparency and community collaboration at their core. This philosophy guides how were building modern privacy infrastructure.
## Open Source Foundation

Consent Management (c15t) is built with a strong open source foundation:

- **Core Platform**: GPL-3.0 licensed, ensuring your privacy tools remain free and open
- **UI Components**: Built on shadcn/ui, giving you complete customization control
- **Server Components**: Full Next.js app directory support for modern applications
- **Cloud Platform**: Optional managed service coming soon (while keeping core open source)

## Why We Chose Open Source

Privacy infrastructure should be:

1. **Transparent**
   - See exactly how user consent is managed
   - Audit the code handling sensitive data
   - Understand the complete data flow

2. **Community-Driven**
   - Benefit from collective expertise
   - Shape the future of privacy tools
   - Share best practices globally

3. **Trustworthy**
   - No black boxes in privacy management
   - Full visibility into data handling
   - Community-verified security

4. **Flexible**
   - Self-host for complete control
   - Customize to your exact needs
   - Integrate with your existing stack

## Following Giants

We're inspired by transformative developer platforms:

- **Vercel**: Revolutionized deployment workflows
- **Clerk**: Simplified authentication
- **Resend**: Modernized email infrastructure
- **Unkey**: Streamlined API key management

Just as these platforms brought developer experience to the forefront, we're bringing that same level of excellence and simplicity to privacy management.

## Our Commitment

By choosing open source, we commit to:

- **Transparency**: All core code is public and auditable
- **Community**: Decisions made with community input
- **Quality**: Enterprise-grade while remaining open
- **Longevity**: Sustainable open source development

## Get Started

Join us in building the future of privacy management:


# Drizzle Adapter
URL: /docs/docs/self-host/v1/adapters/drizzle
The Drizzle adapter integrates c15t Backend with Drizzle ORM, a lightweight, type-safe SQL query builder with schema declaration.
## Installation

Install Drizzle ORM and the appropriate database driver:

```bash
# For PostgreSQL
npm install drizzle-orm pg @types/pg
# For MySQL
npm install drizzle-orm mysql2 @types/mysql2
# For SQLite
npm install drizzle-orm better-sqlite3 @types/better-sqlite3
```

## Configuration

1. Define your schema using Drizzle's schema builder:

```typescript
// schema.ts
import { pgTable, uuid, text, timestamp, json, boolean } from 'drizzle-orm/pg-core';

export const subject = pgTable("subject", {
	id: text("id").primaryKey(),
	isIdentified: boolean("is_identified").notNull(),
	externalId: text("external_id"),
	identityProvider: text("identity_provider"),
	lastIpAddress: text("last_ip_address"),
	createdAt: timestamp("created_at").notNull(),
	updatedAt: timestamp("updated_at").notNull(),
	subjectTimezone: text("subject_timezone"),
});

export const consentPurpose = pgTable("consent_purpose", {
	id: text("id").primaryKey(),
	code: text("code").notNull(),
	name: text("name").notNull(),
	description: text("description").notNull(),
	isEssential: boolean("is_essential").notNull(),
	dataCategory: text("data_category"),
	legalBasis: text("legal_basis"),
	isActive: boolean("is_active").notNull(),
	createdAt: timestamp("created_at").notNull(),
	updatedAt: timestamp("updated_at").notNull(),
});

export const consentPolicy = pgTable("consent_policy", {
	id: text("id").primaryKey(),
	version: text("version").notNull(),
	type: text("type").notNull(),
	name: text("name").notNull(),
	effectiveDate: timestamp("effective_date").notNull(),
	expirationDate: timestamp("expiration_date"),
	content: text("content").notNull(),
	contentHash: text("content_hash").notNull(),
	isActive: boolean("is_active").notNull(),
	createdAt: timestamp("created_at").notNull(),
});

export const domain = pgTable("domain", {
	id: text("id").primaryKey(),
	name: text("name").notNull().unique(),
	description: text("description"),
	allowedOrigins: json("allowed_origins"),
	isVerified: boolean("is_verified").notNull(),
	isActive: boolean("is_active").notNull(),
	createdAt: timestamp("created_at").notNull(),
	updatedAt: timestamp("updated_at"),
});

export const consent = pgTable("consent", {
	id: text("id").primaryKey(),
	subjectId: text("subject_id")
		.notNull()
		.references(() => subject.id, { onDelete: "cascade" }),
	domainId: text("domain_id")
		.notNull()
		.references(() => domain.id, { onDelete: "cascade" }),
	purposeIds: json("purpose_ids"),
	metadata: json("metadata"),
	policyId: text("policy_id").references(() => consentPolicy.id, {
		onDelete: "cascade",
	}),
	ipAddress: text("ip_address"),
	userAgent: text("user_agent"),
	status: text("status").notNull(),
	withdrawalReason: text("withdrawal_reason"),
	givenAt: timestamp("given_at").notNull(),
	validUntil: timestamp("valid_until"),
	isActive: boolean("is_active").notNull(),
});

export const consentRecord = pgTable("consent_record", {
	id: text("id").primaryKey(),
	subjectId: text("subject_id")
		.notNull()
		.references(() => subject.id, { onDelete: "cascade" }),
	consentId: text("consent_id").references(() => consent.id, {
		onDelete: "cascade",
	}),
	actionType: text("action_type").notNull(),
	details: json("details"),
	createdAt: timestamp("created_at").notNull(),
});

export const auditLog = pgTable("audit_log", {
	id: text("id").primaryKey(),
	entityType: text("entity_type").notNull(),
	entityId: text("entity_id").notNull(),
	actionType: text("action_type").notNull(),
	subjectId: text("subject_id").references(() => subject.id, {
		onDelete: "cascade",
	}),
	ipAddress: text("ip_address"),
	userAgent: text("user_agent"),
	changes: json("changes"),
	metadata: json("metadata"),
	createdAt: timestamp("created_at").notNull(),
	eventTimezone: text("event_timezone").notNull(),
});
```

2. Configure the c15t instance with the Drizzle adapter:

```typescript
import { c15tInstance } from '@c15t/backend';
import { drizzleAdapter } from '@c15t/backend/db/adapters/drizzle';
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import * as tables from "@/schema";

// Create a PostgreSQL connection
const pool = new Pool({
	connectionString: process.env.DATABASE_URL,
});

// Initialize Drizzle with the connection
const db = drizzle(pool);

// Create the c15t instance
const instance = c15tInstance({
	baseURL: 'http://localhost:3000',
	database: drizzleAdapter(
		db as unknown as { [p: string]: unknown },
		{
			provider: 'pg',
			schema: {
				...tables,
			},
		},
	),
});
```

### MySQL Configuration

```typescript
import { drizzle } from 'drizzle-orm/mysql2';
import mysql from 'mysql2/promise';

const connection = await mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'password',
  database: 'c15t'
});

const db = drizzle(connection);

const instance = c15tInstance({
  database: drizzleAdapter({ client: db }),
});
```

### SQLite Configuration

```typescript
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database('database.db');
const db = drizzle(sqlite);

const instance = c15tInstance({
  database: drizzleAdapter({ client: db }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('users', {
  name: 'John Doe',
  email: 'john@example.com'
});

// Find records
const users = await instance.database.find('users', {
  where: { email: 'john@example.com' },
  orderBy: { createdAt: 'desc' },
  limit: 10
});

// Update a record
const updatedUser = await instance.database.update(
  'users',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete a record
await instance.database.delete('users', { where: { id: user.id } });
```

### Transactions

```typescript
await instance.database.transaction(async (trx) => {
  const user = await trx.create('users', {
    name: 'Alice',
    email: 'alice@example.com'
  });
  
  await trx.create('profiles', {
    userId: user.id,
    bio: 'Software engineer'
  });
});
```

### Migrations

Use Drizzle Kit for schema migrations:

```bash
npm install -D drizzle-kit

# Generate a migration
npx drizzle-kit generate:pg

# Apply migrations
npx drizzle-kit push:pg
```

## Type Safety

The Drizzle adapter provides excellent type safety:

```typescript
import { users } from './schema';
import { InferModel } from 'drizzle-orm';

// Infer types from your schema
type User = InferModel<typeof users>;

// Type-safe operations
const users = await instance.database.find<User>('users', {
  where: { email: 'john@example.com' }
});
```

## Best Practices

- **Define schema using Drizzle's builders** - Leverage type safety and schema validation
- **Use prepared statements** - Drizzle uses prepared statements for all queries
- **Implement connection pooling** - Configure appropriate pool sizes for production
- **Use migrations for schema changes** - Manage schema changes with Drizzle Kit

## Limitations

- Some complex queries may require direct Drizzle client usage
- Table names must match schema definitions

## Related Resources

- [Drizzle ORM Documentation](https://orm.drizzle.team/docs/overview)
- [Database Adapter Interface](../database-adapters)
- [Core Concepts](../core-concepts)


# Database Adapters Overview
URL: /docs/docs/self-host/v1/adapters
c15t Backend supports multiple database adapters, each offering different features and trade-offs. This guide helps you choose the right adapter for your needs.
## Comparison Table

| Feature                 | Memory           | Kysely                    | Prisma    | Drizzle                   |
| ----------------------- | ---------------- | ------------------------- | --------- | ------------------------- |
| **Best for**            | Development      | Production SQL            | Full ORM  | Lightweight ORM           |
| **Type safety**         | Basic            | Good                      | Excellent | Excellent                 |
| **Schema management**   | None             | Manual                    | Automatic | Manual + Tools            |
| **Migrations**          | None             | Manual                    | Automatic | CLI tools                 |
| **Query complexity**    | Basic            | Advanced                  | Advanced  | Advanced                  |
| **Transaction support** | No               | Yes                       | Yes       | Yes                       |
| **Performance**         | Fast (in-memory) | Fast                      | Moderate  | Fast                      |
| **Bundle size**         | Minimal          | Moderate                  | Large     | Small                     |
| **Database support**    | N/A              | PostgreSQL, MySQL, SQLite | Many      | PostgreSQL, MySQL, SQLite |

## Choosing the Right Adapter

- **Memory Adapter**: Perfect for development, testing, and demos. Not suitable for production.
- **Kysely Adapter**: Great for applications that need direct SQL access with type safety and performance.
- **Prisma Adapter**: Ideal for applications that benefit from a full-featured ORM with schema management.
- **Drizzle Adapter**: Good balance between performance and features with a lightweight footprint.

## Migration Path

You can switch between adapters as your application needs evolve:

1. **Development → Production**: Start with Memory adapter, then migrate to Kysely, Prisma, or Drizzle
2. **Changing Adapters**: The common adapter interface makes it relatively easy to switch between implementations

## Next Steps

- [Memory Adapter Documentation](./memory)
- [Kysely Adapter Documentation](./kysely)
- [Prisma Adapter Documentation](./prisma)
- [Drizzle Adapter Documentation](./drizzle)


# Kysely Adapter
URL: /docs/docs/self-host/v1/adapters/kysely
The Kysely adapter provides type-safe SQL query building with support for multiple databases including PostgreSQL, MySQL, and SQLite.
## Installation

First, install the Kysely package and the appropriate database driver:

```bash
# For PostgreSQL
npm install kysely pg @types/pg
# For MySQL
npm install kysely mysql2 @types/mysql2
# For SQLite
npm install kysely better-sqlite3 @types/better-sqlite3
```

## Configuration

Configure the Kysely adapter with your database connection:

```typescript
import { c15tInstance } from '@c15t/backend';
import { kyselyAdapter } from '@c15t/backend/db/adapters/kysely';

// PostgreSQL configuration
const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: kyselyAdapter({
    dialect: 'postgres',
    connection: {
      host: 'localhost',
      port: 5432,
      database: 'c15t',
      user: 'postgres',
      password: 'password',
    },
    // Optional: Enable query logging
    debug: process.env.NODE_ENV !== 'production',
    // Optional: Connection pooling settings
    pool: {
      min: 2,
      max: 10
    }
  }),
});
```

### MySQL Configuration

```typescript
const instance = c15tInstance({
  database: kyselyAdapter({
    dialect: 'mysql',
    connection: {
      host: 'localhost',
      port: 3306,
      database: 'c15t',
      user: 'root',
      password: 'password',
    }
  }),
});
```

### SQLite Configuration

```typescript
const instance = c15tInstance({
  database: kyselyAdapter({
    dialect: 'sqlite',
    connection: {
      filename: ':memory:' // or path to file like './database.db'
    }
  }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('users', {
  name: 'John Doe',
  email: 'john@example.com'
});

// Find records with complex conditions
const users = await instance.database.find('users', {
  where: { 
    email: { $like: '%@example.com' },
    createdAt: { $gt: new Date('2023-01-01') }
  },
  orderBy: { createdAt: 'desc' },
  limit: 10
});

// Update records
const updatedUser = await instance.database.update(
  'users',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete records
await instance.database.delete('users', { where: { id: user.id } });
```

### Transactions

```typescript
await instance.database.transaction(async (trx) => {
  // All operations inside this function use the same transaction
  const user = await trx.create('users', { name: 'Alice' });
  await trx.create('profiles', { userId: user.id });
  
  // Transaction automatically commits unless an error is thrown
  // If an error is thrown, the transaction is rolled back
});
```

## Schema Management

```typescript
import { sql } from 'kysely';

// Create tables programmatically
await instance.database.raw(sql`
  CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  )
`);
```

## Best Practices

- **Use prepared statements** - Kysely automatically uses prepared statements to prevent SQL injection
- **Configure connection pooling** - Set appropriate pool sizes based on your application needs
- **Implement retry logic** - Add retries for transient database errors
- **Monitor query performance** - Use the debug option to log slow queries during development

## Limitations

- Schema must be created separately or with raw SQL
- Complex joins require custom SQL or advanced Kysely usage

## Related Resources

- [Kysely Documentation](https://github.com/koskimas/kysely)
- [Database Adapter Interface](../database-adapters)
- [Core Concepts](../core-concepts)


# Memory Adapter
URL: /docs/docs/self-host/v1/adapters/memory
The Memory adapter stores all data in-memory, making it perfect for development, testing, and prototyping. Data is lost when the application restarts.
## Installation

The Memory adapter is included in the core package and requires no additional dependencies:

```typescript
import { memoryAdapter } from '@c15t/backend/db/adapters/memory';
```

## Configuration

The Memory adapter accepts minimal configuration:

```typescript
import { c15tInstance } from '@c15t/backend';
import { memoryAdapter } from '@c15t/backend/db/adapters/memory';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: memoryAdapter({
    // Optional: Pre-populate with initial data
    initialData: {
      users: [
        { id: '1', name: 'Admin User', email: 'admin@example.com' }
      ]
    },
    // Optional: Set persistence to localStorage in browser environments
    persistence: 'localStorage'
  }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('users', {
  name: 'John Doe',
  email: 'john@example.com'
});

// Find records
const users = await instance.database.find('users', {
  where: { email: 'john@example.com' }
});

// Update a record
const updatedUser = await instance.database.update(
  'users',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete a record
await instance.database.delete('users', { where: { id: user.id } });
```

## Best Practices

- **Use for development only** - The memory adapter is not suitable for production use as data is lost on restart
- **Test with realistic data volumes** - Pre-populate with a representative data set to test performance
- **Reset between tests** - Create a new instance for each test to ensure a clean environment

## Limitations

- No persistence across application restarts
- Not suitable for production environments
- Limited query capabilities compared to SQL-based adapters
- No support for complex joins or transactions

## When to Use

- During development and prototyping
- For automated testing
- For demos and examples
- When you need a lightweight, zero-configuration database

## Related Resources

- [Core Concepts](../core-concepts)
- [Database Adapter Interface](../database-adapters)


# Prisma Adapter
URL: /docs/docs/self-host/v1/adapters/prisma
The Prisma adapter integrates c15t Backend with Prisma ORM, providing type-safe database access with migration support and automatic schema generation.
## Installation

First, install Prisma and initialize your project:

```bash
npm install @prisma/client
npm install -D prisma
npx prisma init
```

## Configuration

1. Define your Prisma schema in `prisma/schema.prisma`:

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
}
```

2. Generate the Prisma client:

```bash
npx prisma generate
```

3. Configure the c15t instance with the Prisma adapter:

```typescript
import { c15tInstance } from '@c15t/backend';
import { prismaAdapter } from '@c15t/backend/db/adapters/prisma';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: prismaAdapter({ 
    client: prisma,
    // Optional: Configure logging
    logging: process.env.NODE_ENV !== 'production'
  }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('User', {
  name: 'John Doe',
  email: 'john@example.com'
});

// Find records
const users = await instance.database.find('User', {
  where: { email: 'john@example.com' },
  orderBy: { createdAt: 'desc' },
  limit: 10
});

// Update a record
const updatedUser = await instance.database.update(
  'User',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete a record
await instance.database.delete('User', { where: { id: user.id } });
```

### Transactions

```typescript
await instance.database.transaction(async (trx) => {
  const user = await trx.create('User', { 
    name: 'Alice',
    email: 'alice@example.com'
  });
  
  await trx.create('Profile', { 
    userId: user.id,
    bio: 'Software engineer'
  });
});
```

### Migrations

Run migrations using the Prisma CLI:

```bash
# Create a migration
npx prisma migrate dev --name add-user-model

# Apply migrations in production
npx prisma migrate deploy
```

## Type Safety

The Prisma adapter provides type safety when used with TypeScript:

```typescript
// Define your types to match your Prisma schema
type User = {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
};

// Type-safe operations
const users = await instance.database.find<User>('User', {
  where: { email: 'john@example.com' }
});
```

## Best Practices

- **Define schema in Prisma format** - Use Prisma's schema format for auto-generated migration files
- **Use migrations for schema changes** - Let Prisma handle database schema migrations
- **Enable query logging in development** - Monitor query performance and debug issues
- **Consider connection pooling** - Configure connection pools for production performance

## Limitations

- Table names must match Prisma model names
- Some advanced query features may require direct Prisma client usage

## Related Resources

- [Prisma Documentation](https://www.prisma.io/docs)
- [Database Adapter Interface](../database-adapters)
- [Core Concepts](../core-concepts)


# Core Concepts
URL: /docs/docs/self-host/v1/core-concepts
Detailed explanation of the fundamental concepts and architecture of the c15t Backend package, including instance management, context system, and request handling.
This document covers the fundamental concepts and architecture of the c15t Backend package.

## Instance Management

### Creating an Instance

The c15t instance is the core of the system, managing all components and their interactions:

```typescript
import { c15tInstance } from '@c15t/backend';
import { memoryAdapter } from '@c15t/backend/db/adapters/memory';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: memoryAdapter({}),
  plugins: [],
  context: {},
});
```

For a quick start guide, see [Getting Started](./index#basic-usage).

### Instance Configuration

The instance configuration includes:

```typescript
interface C15TOptions {
  // Base URL for the API
  baseURL: string;
  
  // Database adapter
  database: DatabaseAdapter;
  
  // Optional base path for API routes
  basePath?: string;
  
  // Trusted origins for CORS
  trustedOrigins?: string[] | ((request: Request) => string[]);
  
  // Plugin configurations
  plugins?: C15TPlugin[];
  
  // Additional context data
  context?: Record<string, unknown>;
  
  // Authentication configuration
  auth?: AuthConfig;
  
  // Rate limiting configuration
  rateLimit?: RateLimitConfig;
}
```

Learn more about database adapters in [Database Adapters](./database-adapters).

## Context System

### Context Structure

The context is a shared state that persists throughout the request lifecycle:

```typescript
interface C15TContext {
  // Request-specific data
  request: Request;
  response?: Response;
  
  // Database access
  database: DatabaseAdapter;
  
  // Authentication data
  auth?: {
    userId: string;
    roles: string[];
    metadata?: Record<string, unknown>;
  };
  
  // Plugin data
  plugins: Record<string, PluginData>;
  
  // Custom context data
  [key: string]: unknown;
}
```

### Context Extensions

Plugins can extend the context with additional data:

```typescript
const contextPlugin: C15TPlugin = {
  id: 'context-plugin',
  name: 'Context Plugin',
  type: 'core',
  init: () => ({
    context: {
      customData: {
        timestamp: Date.now(),
        requestId: generateId(),
      },
    },
  }),
};
```

Learn more about plugins in [Plugin System](./plugins#context-extensions).

## Request Handling

### Request Flow

1. **Request Reception**
   ```typescript
   const request = new Request('http://localhost:3000/api/c15t/status', {
     method: 'GET',
     headers: {
       'Accept': 'application/json',
       'Origin': 'http://localhost:3000',
     },
   });
   ```

2. **Request Processing**
   ```typescript
   const response = await instance.handler(request);
   ```

3. **Response Generation**
   ```typescript
   if (response.isOk()) {
     const data = await response.value.json();
     console.log(data);
   } else {
     console.error(response.error);
   }
   ```

For API endpoint details, see the instance handler documentation above.

### Request Lifecycle

1. **Pre-processing**
   ```typescript
   const preProcessed = await instance.preProcess(request);
   ```

2. **Authentication**
   ```typescript
   const authenticated = await instance.authenticate(preProcessed);
   ```

3. **Authorization**
   ```typescript
   const authorized = await instance.authorize(authenticated);
   ```

4. **Handler Execution**
   ```typescript
   const result = await instance.executeHandler(authorized);
   ```

5. **Post-processing**
   ```typescript
   const response = await instance.postProcess(result);
   ```

## Response Processing

### Response Types

```typescript
interface C15TResponse<T = unknown> {
  // Response data
  data?: T;
  
  // Response metadata
  metadata?: {
    timestamp: string;
    requestId: string;
    processingTime: number;
  };
  
  // Response status
  status: number;
  
  // Response headers
  headers: Headers;
}
```

For API response formats, see the request handling examples above.

### Response Formatting

```typescript
const formatResponse = (data: unknown): C15TResponse => ({
  data,
  metadata: {
    timestamp: new Date().toISOString(),
    requestId: generateId(),
    processingTime: Date.now() - startTime,
  },
  status: 200,
  headers: new Headers({
    'Content-Type': 'application/json',
  }),
});
```

## Error Handling

### Error Types

```typescript
// Authentication errors
class AuthenticationError extends DoubleTieError {
  constructor(message: string) {
    super(message, 401);
  }
}

// Authorization errors
class AuthorizationError extends DoubleTieError {
  constructor(message: string) {
    super(message, 403);
  }
}

// Validation errors
class ValidationError extends DoubleTieError {
  constructor(message: string, details?: Record<string, unknown>) {
    super(message, 400, details);
  }
}

// Database errors
class DatabaseError extends DoubleTieError {
  constructor(message: string) {
    super(message, 500);
  }
}
```

For error handling in plugins, see [Plugin System](./plugins#error-handling).

### Error Handling

```typescript
try {
  const response = await instance.handler(request);
} catch (error) {
  if (error instanceof AuthenticationError) {
    // Handle authentication errors
  } else if (error instanceof AuthorizationError) {
    // Handle authorization errors
  } else if (error instanceof ValidationError) {
    // Handle validation errors
  } else if (error instanceof DatabaseError) {
    // Handle database errors
  } else {
    // Handle unexpected errors
  }
}
```

## Middleware System

### Middleware Types

1. **Request Middleware**
   ```typescript
   const requestMiddleware = async (request: Request, ctx: C15TContext) => {
     // Modify request
     return { request };
   };
   ```

2. **Response Middleware**
   ```typescript
   const responseMiddleware = async (response: Response, ctx: C15TContext) => {
     // Modify response
     return { response };
   };
   ```

3. **Error Middleware**
   ```typescript
   const errorMiddleware = async (error: Error, ctx: C15TContext) => {
     // Handle error
     return { error };
   };
   ```

Learn more about middleware in [Plugin System](./plugins#middleware-plugins).

### Middleware Chain

```typescript
const middlewareChain = [
  requestMiddleware,
  authMiddleware,
  validationMiddleware,
  responseMiddleware,
];

const result = await middlewareChain.reduce(
  async (acc, middleware) => middleware(acc, ctx),
  request
);
```

## Event System

### Event Types

```typescript
interface C15TEvent {
  type: string;
  data: unknown;
  timestamp: string;
  metadata?: Record<string, unknown>;
}
```

### Event Handling

```typescript
const eventHandler = async (event: C15TEvent) => {
  switch (event.type) {
    case 'request.received':
      // Handle request received
      break;
    case 'response.sent':
      // Handle response sent
      break;
    case 'error.occurred':
      // Handle error occurred
      break;
  }
};
```

### Event Emission

```typescript
const emitEvent = async (type: string, data: unknown) => {
  const event: C15TEvent = {
    type,
    data,
    timestamp: new Date().toISOString(),
  };
  await eventHandler(event);
};
```

## Testing

### Test Utilities

```typescript
import { createTestInstance, createTestRequest } from '@c15t/backend/testing';

describe('Core Functionality', () => {
  it('should handle requests', async () => {
    const instance = createTestInstance();
    const request = createTestRequest({
      url: 'http://localhost:3000/api/c15t/status',
      method: 'GET',
    });
    
    const response = await instance.handler(request);
    expect(response.status).toBe(200);
  });
});
```

### Mock Context

```typescript
import { createMockContext } from '@c15t/backend/testing';

const ctx = createMockContext({
  database: mockDatabase,
  auth: {
    userId: 'test-user',
    roles: ['admin'],
  },
});
```

## Performance Optimization

### Caching

```typescript
const cache = new Map<string, unknown>();

const getCachedData = async (key: string) => {
  if (cache.has(key)) {
    return cache.get(key);
  }
  
  const data = await fetchData();
  cache.set(key, data);
  return data;
};
```

For database performance, see [Database Adapters](./database-adapters#performance-considerations).

### Connection Pooling

```typescript
const pool = new Pool({
  max: 20,
  idleTimeoutMillis: 30000,
});

const getConnection = async () => {
  return await pool.connect();
};
```

### Request Batching

```typescript
const batchRequests = async (requests: Request[]) => {
  return await Promise.all(
    requests.map(request => instance.handler(request))
  );
};
```


# Database Adapters
URL: /docs/docs/self-host/v1/database-adapters
Comprehensive guide to the database adapter system in c15t Backend, covering available adapters, query interface, and performance considerations.
The c15t Backend package provides a flexible database adapter system that allows you to use different database backends while maintaining a consistent interface.

## Overview

Database adapters provide a standardized way to interact with different database systems. Each adapter implements the `DatabaseAdapter` interface:

```typescript
interface DatabaseAdapter {
  create: <T extends Record<string, unknown>>(table: string, data: T) => Promise<T>;
  find: <T extends Record<string, unknown>>(table: string, query: Query) => Promise<T[]>;
  update: <T extends Record<string, unknown>>(table: string, query: Query, data: Partial<T>) => Promise<T>;
  delete: (table: string, query: Query) => Promise<void>;
}
```

## Available Adapters

### Memory Adapter

The memory adapter is perfect for development and testing. It stores data in memory and is reset when the application restarts.

```typescript
import { memoryAdapter } from '@c15t/backend/db/adapters/memory';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: memoryAdapter({}),
});
```

#### Features

- In-memory storage
- No persistence
- Fast for development
- Automatic cleanup

### Kysely Adapter

The Kysely adapter provides type-safe SQL query building with support for multiple databases.

```typescript
import { kyselyAdapter } from '@c15t/backend/db/adapters/kysely';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: kyselyAdapter({
    dialect: 'postgres',
    connection: {
      host: 'localhost',
      port: 5432,
      database: 'c15t',
      user: 'postgres',
      password: 'password',
    },
  }),
});
```

#### Supported Databases

- PostgreSQL
- MySQL
- SQLite
- Microsoft SQL Server

#### Features

- Type-safe queries
- Query building
- Transaction support
- Connection pooling

### Prisma Adapter

The Prisma adapter integrates with Prisma ORM for type-safe database access.

```typescript
import { prismaAdapter } from '@c15t/backend/db/adapters/prisma';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: prismaAdapter({ client: prisma }),
});
```

#### Features

- Prisma ORM integration
- Type safety
- Schema management
- Migration support

### Drizzle Adapter

The Drizzle adapter provides integration with Drizzle ORM.

```typescript
import { drizzleAdapter } from '@c15t/backend/db/adapters/drizzle';
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';

const pool = new Pool({
  connectionString: 'postgres://user:password@localhost:5432/c15t',
});

const db = drizzle(pool);

const instance = c15tInstance({
	baseURL: 'http://localhost:3000',
	database: drizzleAdapter(
		db as unknown as { [p: string]: unknown },
		{
			provider: 'pg',
		},
	),
});
```

#### Features

- Drizzle ORM integration
- Type safety
- Schema management
- Query building

## Creating Custom Adapters

You can create custom adapters by implementing the `DatabaseAdapter` interface:

```typescript
class CustomAdapter implements DatabaseAdapter {
  async create<T extends Record<string, unknown>>(
    table: string,
    data: T
  ): Promise<T> {
    // Implementation
  }

  async find<T extends Record<string, unknown>>(
    table: string,
    query: Query
  ): Promise<T[]> {
    // Implementation
  }

  async update<T extends Record<string, unknown>>(
    table: string,
    query: Query,
    data: Partial<T>
  ): Promise<T> {
    // Implementation
  }

  async delete(table: string, query: Query): Promise<void> {
    // Implementation
  }
}
```

## Query Interface

The query interface is consistent across all adapters:

```typescript
interface Query {
  where?: Record<string, unknown>;
  orderBy?: Record<string, 'asc' | 'desc'>;
  limit?: number;
  offset?: number;
  include?: Record<string, boolean>;
}
```

### Example Queries

```typescript
// Find with conditions
const users = await adapter.find('users', {
  where: { active: true },
  orderBy: { createdAt: 'desc' },
  limit: 10,
});

// Update with conditions
const updated = await adapter.update(
  'users',
  { where: { id: '123' } },
  { name: 'New Name' }
);

// Delete with conditions
await adapter.delete('users', { where: { id: '123' } });
```

## Transaction Support

Some adapters support transactions:

```typescript
// Kysely adapter example
const result = await adapter.transaction(async (trx) => {
  await trx.create('users', { name: 'John' });
  await trx.create('profiles', { userId: '123' });
  return 'success';
});
```

## Error Handling

Adapters handle errors consistently:

```typescript
try {
  const result = await adapter.create('users', data);
} catch (error) {
  if (error instanceof DatabaseError) {
    // Handle database-specific errors
  } else {
    // Handle other errors
  }
}
```

## Best Practices

1. **Connection Management**
   ```typescript
   // Create a single connection pool
   const pool = new Pool({
     max: 20, // Maximum number of connections
     idleTimeoutMillis: 30000,
   });
   ```

2. **Error Handling**
   ```typescript
   const adapter = kyselyAdapter({
     dialect: 'postgres',
     connection: {
       // ... connection config
     },
     onError: (error) => {
       // Log errors
       console.error('Database error:', error);
     },
   });
   ```

3. **Query Optimization**
   ```typescript
   // Use indexes
   await adapter.create('users', {
     email: 'user@example.com',
     // Add indexed fields
   });

   // Use appropriate query conditions
   const users = await adapter.find('users', {
     where: { email: { $like: '%@example.com' } },
     limit: 100,
   });
   ```

## Migration Support

Adapters that support migrations provide methods for managing database schema:

```typescript
// Kysely adapter example
const migrations = await adapter.getMigrations();
await adapter.runMigrations(migrations);
```

## Performance Considerations

1. **Connection Pooling**
   - Configure appropriate pool size
   - Monitor connection usage
   - Handle connection errors

2. **Query Optimization**
   - Use indexes
   - Limit result sets
   - Optimize join operations

3. **Caching**
   - Implement caching where appropriate
   - Use appropriate cache invalidation
   - Monitor cache hit rates

## Security

1. **Input Validation**
   ```typescript
   // Validate input before database operations
   const validatedData = validateUserInput(data);
   await adapter.create('users', validatedData);
   ```

2. **SQL Injection Prevention**
   - Use parameterized queries
   - Validate input
   - Escape special characters

3. **Access Control**
   - Implement row-level security
   - Use appropriate database roles
   - Monitor access patterns

## Monitoring and Debugging

1. **Query Logging**
   ```typescript
   const adapter = kyselyAdapter({
     dialect: 'postgres',
     connection: {
       // ... connection config
     },
     debug: true, // Enable query logging
   });
   ```

2. **Performance Monitoring**
   - Track query execution time
   - Monitor connection pool usage
   - Log slow queries

3. **Error Tracking**
   - Log database errors
   - Track failed queries
   - Monitor connection issues


# MySQL Adapter
URL: /docs/docs/self-host/v1/databases/mysql
The MySQL adapter provides integration with MySQL and MariaDB, widely-used relational database systems known for reliability, performance, and broad compatibility.
## Installation

Install the MySQL adapter and its dependencies:

| Package manager | Command                                          |
| :-------------- | :----------------------------------------------- |
| npm             | `npm install @c15t/backend mysql2 @types/mysql2` |
| pnpm            | `pnpm add @c15t/backend mysql2 @types/mysql2`    |
| yarn            | `yarn add @c15t/backend mysql2 @types/mysql2`    |
| bun             | `bun add @c15t/backend mysql2 @types/mysql2`     |

## Configuration

Configure the MySQL adapter with your connection details:

```typescript
import { c15tInstance } from '@c15t/backend';
import { mysqlAdapter } from '@c15t/backend/db/adapters/mysql';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: mysqlAdapter({
    // Connection string approach
    connectionString: 'mysql://username:password@localhost:3306/c15t',
    
    // Or detailed configuration
    connection: {
      host: 'localhost',
      port: 3306,
      database: 'c15t',
      user: 'root',
      password: 'password',
      ssl: false, // Set to true for SSL connections
      charset: 'utf8mb4', // Full Unicode support
    },
    
    // Connection pool configuration
    pool: {
      min: 2,
      max: 10,
      idleTimeoutMillis: 30000
    },
    
    // Query logging (for development)
    debug: process.env.NODE_ENV !== 'production',
    
    // Use MySQL 8+ features (default: true)
    useModernFeatures: true,
  }),
});
```

## Schema Management

Initialize your database schema:

```typescript
const createSchema = async (db) => {
  await db.raw(`
    CREATE TABLE IF NOT EXISTS users (
      id CHAR(36) PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    
    CREATE TABLE IF NOT EXISTS consents (
      id CHAR(36) PRIMARY KEY,
      user_id CHAR(36) NOT NULL,
      purpose VARCHAR(255) NOT NULL,
      granted BOOLEAN NOT NULL,
      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      metadata JSON,
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    
    CREATE INDEX idx_consents_user_id ON consents(user_id);
    CREATE INDEX idx_consents_purpose ON consents(purpose);
  `);
};

// Use in initialization
const instance = c15tInstance({
  database: mysqlAdapter({
    connection: {
      host: 'localhost',
      port: 3306,
      database: 'c15t',
      user: 'root',
      password: 'password',
    },
    onInit: createSchema,
  }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('users', {
  id: crypto.randomUUID(),
  name: 'John Doe',
  email: 'john@example.com'
});

// Find records
const users = await instance.database.find('users', {
  where: { email: { $like: '%@example.com' } },
  orderBy: { created_at: 'desc' },
  limit: 10,
  offset: 20
});

// Update a record
const updatedUser = await instance.database.update(
  'users',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete a record
await instance.database.delete('users', { where: { id: user.id } });
```

### Transactions

```typescript
await instance.database.transaction(async (trx) => {
  // All operations in this function use the same transaction
  const user = await trx.create('users', {
    id: crypto.randomUUID(),
    name: 'Alice Johnson',
    email: 'alice@example.com'
  });
  
  await trx.create('consents', {
    id: crypto.randomUUID(),
    user_id: user.id,
    purpose: 'marketing',
    granted: true,
    metadata: JSON.stringify({ source: 'website', campaign: 'summer2023' })
  });
  
  // Transaction automatically commits unless an error is thrown
});
```

### Advanced Queries

```typescript
// JSON filtering (MySQL 8+)
const users = await instance.database.find('consents', {
  where: {
    $raw: "JSON_EXTRACT(metadata, '$.source') = ?",
    $params: ['website']
  }
});

// Raw SQL for complex queries
const stats = await instance.database.raw(`
  SELECT 
    purpose, 
    COUNT(*) as total_count,
    SUM(IF(granted, 1, 0)) as granted_count
  FROM consents
  GROUP BY purpose
  ORDER BY total_count DESC
`);
```

### Using MySQL-Specific Features

```typescript
// JSON operations (MySQL 8+)
await instance.database.update(
  'consents',
  { where: { id: 'some-uuid' } },
  {
    metadata: {
      $raw: "JSON_SET(metadata, '$.preferences', ?)",
      $params: [JSON.stringify({ email: true, sms: false })]
    }
  }
);

// Full-text search (requires FULLTEXT index)
const searchResults = await instance.database.find('users', {
  where: {
    $raw: "MATCH(name, email) AGAINST(? IN BOOLEAN MODE)",
    $params: ['john email']
  }
});
```

## Performance Optimization

```typescript
// Create optimized indexes
await instance.database.raw(`
  -- Standard index for lookups
  CREATE INDEX idx_users_email ON users(email);
  
  -- Fulltext index for search
  CREATE FULLTEXT INDEX idx_users_fulltext ON users(name, email);
`);

// Set server variables
await instance.database.raw(`
  SET GLOBAL innodb_buffer_pool_size = 1073741824; -- 1GB
  SET GLOBAL max_connections = 200;
`);
```

## Best Practices

- **Use InnoDB tables** for transactions and foreign key support
- **Set appropriate character sets** (utf8mb4 recommended for full Unicode support)
- **Configure connection pooling** for efficient resource management
- **Create proper indexes** on frequently queried columns
- **Use prepared statements** to prevent SQL injection (handled automatically)
- **Consider table partitioning** for very large tables
- **Regularly optimize tables** for performance maintenance

## Monitoring and Management

```typescript
// Check database health
const health = await instance.database.raw(`
  SELECT 
    DATABASE() AS database,
    VERSION() AS version,
    @@character_set_database AS charset,
    @@collation_database AS collation
`);

// Monitoring query performance
const slowQueries = await instance.database.raw(`
  SELECT query, count_star, sum_timer_wait
  FROM performance_schema.events_statements_summary_by_digest
  ORDER BY sum_timer_wait DESC
  LIMIT 10
`);
```

## Limitations

- JSON support is less powerful than PostgreSQL (especially in MySQL 5.7)
- Requires a running MySQL/MariaDB server
- Default isolation level may differ from other databases
- Some ALTER TABLE operations require table rebuilds

## Related Resources

- [MySQL Documentation](https://dev.mysql.com/doc/)
- [MariaDB Documentation](https://mariadb.com/kb/en/documentation/)
- [mysql2 GitHub Repository](https://github.com/sidorares/node-mysql2)
- [Database Adapter Interface](../database-adapters)
- [Core Concepts](../core-concepts)


# PostgreSQL Adapter
URL: /docs/docs/self-host/v1/databases/postgres
The PostgreSQL adapter provides integration with PostgreSQL, a powerful, open-source relational database system known for reliability, feature robustness, and performance.
## Installation

Install the PostgreSQL adapter and its dependencies:

| Package manager | Command                                  |
| :-------------- | :--------------------------------------- |
| npm             | `npm install @c15t/backend pg @types/pg` |
| pnpm            | `pnpm add @c15t/backend pg @types/pg`    |
| yarn            | `yarn add @c15t/backend pg @types/pg`    |
| bun             | `bun add @c15t/backend pg @types/pg`     |

## Configuration

Configure the PostgreSQL adapter with your connection details:

```typescript
import { c15tInstance } from '@c15t/backend';
import { postgresAdapter } from '@c15t/backend/db/adapters/postgres';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: postgresAdapter({
    // Connection string approach
    connectionString: 'postgresql://username:password@localhost:5432/c15t',
    
    // Or detailed configuration
    connection: {
      host: 'localhost',
      port: 5432,
      database: 'c15t',
      user: 'postgres',
      password: 'password',
      ssl: false, // Set to true for SSL connections
    },
    
    // Connection pool configuration
    pool: {
      min: 2,
      max: 10,
      idleTimeoutMillis: 30000
    },
    
    // Query logging (for development)
    debug: process.env.NODE_ENV !== 'production',
    
    // Schema to use (default: public)
    schema: 'public',
  }),
});
```

## Schema Management

Initialize your database schema:

```typescript
const createSchema = async (db) => {
  await db.raw(`
    CREATE TABLE IF NOT EXISTS users (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name TEXT NOT NULL,
      email TEXT UNIQUE NOT NULL,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS consents (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      purpose TEXT NOT NULL,
      granted BOOLEAN NOT NULL,
      timestamp TIMESTAMPTZ DEFAULT NOW(),
      metadata JSONB
    );
    
    CREATE INDEX IF NOT EXISTS idx_consents_user_id ON consents(user_id);
    CREATE INDEX IF NOT EXISTS idx_consents_purpose ON consents(purpose);
  `);
};

// Use in initialization
const instance = c15tInstance({
  database: postgresAdapter({
    connectionString: 'postgresql://username:password@localhost:5432/c15t',
    onInit: createSchema,
  }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('users', {
  name: 'John Doe',
  email: 'john@example.com'
  // id and created_at will be auto-generated
});

// Find records with powerful filtering
const users = await instance.database.find('users', {
  where: { email: { $like: '%@example.com' } },
  orderBy: { created_at: 'desc' },
  limit: 10,
  offset: 20
});

// Update a record
const updatedUser = await instance.database.update(
  'users',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete a record
await instance.database.delete('users', { where: { id: user.id } });
```

### Transactions

```typescript
await instance.database.transaction(async (trx) => {
  // All operations in this function use the same transaction
  const user = await trx.create('users', {
    name: 'Alice Johnson',
    email: 'alice@example.com'
  });
  
  await trx.create('consents', {
    user_id: user.id,
    purpose: 'marketing',
    granted: true,
    metadata: { source: 'website', campaign: 'summer2023' }
  });
  
  // Transaction automatically commits unless an error is thrown
});
```

### Advanced Queries

```typescript
// JSON filtering (PostgreSQL specific)
const users = await instance.database.find('consents', {
  where: {
    'metadata->source': 'website',
    'metadata->campaign': 'summer2023'
  }
});

// Raw SQL for complex queries
const stats = await instance.database.raw(`
  SELECT 
    purpose, 
    COUNT(*) as total_count,
    SUM(CASE WHEN granted THEN 1 ELSE 0 END) as granted_count
  FROM consents
  GROUP BY purpose
  ORDER BY total_count DESC
`);
```

### Using PostgreSQL-Specific Features

```typescript
// JSONB operations
await instance.database.update(
  'consents',
  { where: { id: 'some-uuid' } },
  {
    metadata: {
      $query: 'jsonb_set(metadata, \'{preferences}\', $1)',
      $params: ['{"email":true,"sms":false}']
    }
  }
);

// Full-text search
const searchResults = await instance.database.find('users', {
  where: {
    $raw: 'to_tsvector(name || \' \' || email) @@ to_tsquery($1)',
    $params: ['john & email']
  }
});
```

## Performance Optimization

```typescript
// Create optimized indexes
await instance.database.raw(`
  -- B-tree index for exact lookups
  CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
  
  -- GIN index for JSONB
  CREATE INDEX IF NOT EXISTS idx_consents_metadata ON consents USING GIN (metadata);
  
  -- Partial index for active users
  CREATE INDEX IF NOT EXISTS idx_active_users ON users(created_at) 
  WHERE created_at > NOW() - INTERVAL '30 days';
`);
```

## Best Practices

- **Use connection pooling** for efficient resource management
- **Implement database indexes** for frequently queried columns
- **Use transactions** for operations that must succeed or fail together
- **Consider using prepared statements** for repetitive queries (handled automatically)
- **Leverage PostgreSQL-specific features** like JSON/JSONB, array types, and full-text search
- **Regularly VACUUM and ANALYZE** your database for performance maintenance
- **Set appropriate statement timeouts** to prevent long-running queries

## Monitoring and Management

```typescript
// Check database health
const health = await instance.database.raw(`
  SELECT 
    current_database() AS database,
    current_setting('server_version') AS version,
    pg_size_pretty(pg_database_size(current_database())) AS size
`);

// Monitoring query performance
const slowQueries = await instance.database.raw(`
  SELECT query, calls, total_time, mean_time
  FROM pg_stat_statements
  ORDER BY total_time DESC
  LIMIT 10
`);
```

## Limitations

- Requires a running PostgreSQL server
- More complex setup compared to SQLite
- Connection management adds complexity

## Related Resources

- [PostgreSQL Documentation](https://www.postgresql.org/docs/)
- [node-postgres Documentation](https://node-postgres.com/)
- [Database Adapter Interface](../database-adapters)
- [Core Concepts](../core-concepts)


# SQLite Adapter
URL: /docs/docs/self-host/v1/databases/sqlite
The SQLite adapter provides a lightweight, file-based database solution perfect for small to medium applications, local development, and embedded systems.
## Installation

Install the SQLite adapter and its dependencies:

| Package manager | Command                                                          |
| :-------------- | :--------------------------------------------------------------- |
| npm             | `npm install @c15t/backend better-sqlite3 @types/better-sqlite3` |
| pnpm            | `pnpm add @c15t/backend better-sqlite3 @types/better-sqlite3`    |
| yarn            | `yarn add @c15t/backend better-sqlite3 @types/better-sqlite3`    |
| bun             | `bun add @c15t/backend better-sqlite3 @types/better-sqlite3`     |

## Configuration

Configure the SQLite adapter with your database file path:

```typescript
import { c15tInstance } from '@c15t/backend';
import { sqliteAdapter } from '@c15t/backend/db/adapters/sqlite';

const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: sqliteAdapter({
    // File path for the SQLite database (use :memory: for in-memory database)
    filename: './data/c15t.db',
    
    // Optional: Enable WAL mode for better concurrency (default: true)
    useWAL: true,
    
    // Optional: Set journal mode (default: 'wal')
    journalMode: 'wal', // 'delete', 'truncate', 'persist', 'memory', 'wal', 'off'
    
    // Optional: Enable foreign keys (default: true)
    foreignKeys: true,
    
    // Optional: Set busy timeout in milliseconds (default: 5000)
    busyTimeout: 5000,
    
    // Optional: Initialize schema if not exists
    initSchema: true,
  }),
});
```

### In-Memory Database

For testing or development, you can use an in-memory database:

```typescript
const instance = c15tInstance({
  database: sqliteAdapter({
    filename: ':memory:',
  }),
});
```

## Schema Management

Initialize your database schema:

```typescript
const createSchema = async (db) => {
  await db.exec(`
    CREATE TABLE IF NOT EXISTS users (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      email TEXT UNIQUE NOT NULL,
      created_at INTEGER DEFAULT (unixepoch())
    );
    
    CREATE TABLE IF NOT EXISTS consents (
      id TEXT PRIMARY KEY,
      user_id TEXT NOT NULL,
      purpose TEXT NOT NULL,
      granted BOOLEAN NOT NULL,
      timestamp INTEGER DEFAULT (unixepoch()),
      FOREIGN KEY (user_id) REFERENCES users(id)
    );
    
    CREATE INDEX IF NOT EXISTS idx_consents_user_id ON consents(user_id);
  `);
};

// Use in initialization
const instance = c15tInstance({
  database: sqliteAdapter({
    filename: './data/c15t.db',
    onInit: createSchema,
  }),
});
```

## Usage Examples

### Basic CRUD Operations

```typescript
// Create a new record
const user = await instance.database.create('users', {
  id: crypto.randomUUID(),
  name: 'John Doe',
  email: 'john@example.com'
});

// Find records
const users = await instance.database.find('users', {
  where: { email: 'john@example.com' },
  orderBy: { created_at: 'desc' },
  limit: 10
});

// Update a record
const updatedUser = await instance.database.update(
  'users',
  { where: { id: user.id } },
  { name: 'John Smith' }
);

// Delete a record
await instance.database.delete('users', { where: { id: user.id } });
```

### Transactions

```typescript
await instance.database.transaction(async (trx) => {
  // All operations inside use the same transaction
  const user = await trx.create('users', {
    id: crypto.randomUUID(),
    name: 'Alice Johnson',
    email: 'alice@example.com'
  });
  
  await trx.create('consents', {
    id: crypto.randomUUID(),
    user_id: user.id,
    purpose: 'marketing',
    granted: true
  });
  
  // Transaction automatically commits unless an error is thrown
});
```

### Advanced Queries

```typescript
// Complex where conditions
const users = await instance.database.find('users', {
  where: {
    $or: [
      { name: { $like: '%John%' } },
      { email: { $like: '%@example.com' } }
    ],
    created_at: { $gt: Date.now() - 86400000 } // Last 24 hours
  }
});

// Raw queries for specific needs
const stats = await instance.database.raw(`
  SELECT purpose, COUNT(*) as count
  FROM consents
  WHERE granted = true
  GROUP BY purpose
  ORDER BY count DESC
`);
```

## Performance Optimization

```typescript
// Enable pragmas for better performance
await instance.database.raw(`
  PRAGMA synchronous = NORMAL;
  PRAGMA cache_size = -64000; -- 64MB
  PRAGMA temp_store = MEMORY;
  PRAGMA mmap_size = 268435456; -- 256MB
`);
```

## Backup and Maintenance

```typescript
// Backup database
await instance.database.raw(`
  VACUUM INTO '/backup/c15t-backup.db';
`);

// Optimize database
await instance.database.raw(`
  PRAGMA optimize;
  VACUUM;
`);
```

## Best Practices

- **Use WAL mode** for better concurrency and performance
- **Create proper indexes** on columns frequently used in WHERE clauses
- **Use transactions** for operations that must be atomic
- **Implement regular backups** using VACUUM INTO
- **Set busy timeout** to handle concurrent access conflicts
- **Use prepared statements** to prevent SQL injection (handled automatically by the adapter)

## Limitations

- Limited concurrency compared to client-server databases
- No built-in user management or access control
- Maximum database size limited to 281 TB (though practical limits are much lower)
- Limited support for ALTER TABLE operations

## Related Resources

- [SQLite Documentation](https://www.sqlite.org/docs.html)
- [Better-SQLite3 Documentation](https://github.com/WiseLibs/better-sqlite3)
- [Database Adapter Interface](../database-adapters)
- [Core Concepts](../core-concepts)


# Getting Started (v1)
URL: /docs/docs/self-host/v1
Quick start guide for setting up and using the c15t Backend package, including installation, basic configuration, and common issues.
Welcome to c15t Backend! This guide will help you get started with the consent management system.

## Installation

Install the package using your preferred package manager:

| Package manager | Command                     |
| :-------------- | :-------------------------- |
| npm             | `npm install @c15t/backend` |
| pnpm            | `pnpm add @c15t/backend`    |
| yarn            | `yarn add @c15t/backend`    |
| bun             | `bun add @c15t/backend`     |

## Basic Usage

Create an instance of c15t:

```typescript
import { c15tInstance } from "@c15t/backend";
import { memoryAdapter } from "@c15t/backend/db/adapters/memory";

const instance = c15tInstance({
  baseURL: "http://localhost:3000",
  database: memoryAdapter({})
});
```

For more details on instance configuration, see [Core Concepts](./v1/core-concepts#instance-management).

## Configuration

### Basic Options

```typescript
const instance = c15tInstance({
  baseURL: "http://localhost:3000",
  database: memoryAdapter({}),
  plugins: [],
  context: {}
});
```

### With Plugins

```typescript
const instance = c15tInstance({
  baseURL: "http://localhost:3000",
  database: memoryAdapter({}),
  plugins: [authPlugin, loggingPlugin]
});
```

Learn more about plugins in the [Plugin System](./plugins) documentation.

## Database Setup

### Memory Adapter (Development)

```typescript
import { memoryAdapter } from "@c15t/backend/db/adapters/memory";

const instance = c15tInstance({
  database: memoryAdapter({})
});
```

### Kysely Adapter (Production)

```typescript
import { kyselyAdapter } from "@c15t/backend/db/adapters/kysely";

const instance = c15tInstance({
  database: kyselyAdapter({
    dialect: "postgres",
    connection: {
      host: "localhost",
      port: 5432,
      database: "c15t",
      user: "postgres",
      password: "password"
    }
  })
});
```

For more database options and configuration, see [Database Adapters](./v1/database-adapters).

## Handling Requests

```typescript
const request = new Request("http://localhost:3000/api/c15t/status", {
  method: "GET"
});

const response = await instance.handler(request);
```

Learn more about request handling in [Core Concepts](./core-concepts#request-handling).

## Next Steps

1. Learn about [Core Concepts](./v1/core-concepts) to understand the system architecture
2. Explore [Database Adapters](./v1/database-adapters) for different storage options
3. Check out the [Plugin System](./v1/plugins) for extensibility
4. Review the request handling examples above for available functionality

## Common Issues

### Database Connection Issues

If you're having trouble connecting to the database:

1. Check your connection string
2. Verify database credentials
3. Ensure the database is running
4. Review [Database Adapters](./v1/database-adapters#error-handling) for more details

### Authentication Problems

For authentication issues:

1. Verify your JWT secret
2. Check token expiration
3. Review plugin configuration in the [Plugin System](./plugins) documentation

### Plugin Loading

If plugins aren't loading:

1. Check plugin dependencies
2. Verify plugin order
3. Review [Plugin System](./v1/plugins#common-issues) documentation


# Plugin System
URL: /docs/docs/self-host/v1/plugins
Complete guide to the plugin system in c15t Backend, including plugin types, lifecycle hooks, context extensions, and best practices.
The c15t Backend plugin system provides a powerful way to extend and customize the functionality of your consent management system. This guide covers everything you need to know about plugins, from basic usage to advanced features.

## Overview

Plugins are modular components that can:

- Extend the context with additional data
- Modify requests and responses
- Add new routes and endpoints
- Provide custom middleware
- Hook into the request lifecycle

## Plugin Types

### Core Plugins

Core plugins are essential system components that provide fundamental functionality:

```typescript
const corePlugin: C15TPlugin = {
  id: 'core-plugin',
  name: 'Core Plugin',
  type: 'core',
  init: () => ({
    context: {
      systemInfo: {
        version: '1.0.0',
        environment: process.env.NODE_ENV,
      },
    },
  }),
};
```

### Feature Plugins

Feature plugins add specific functionality to your system:

```typescript
const featurePlugin: C15TPlugin = {
  id: 'feature-plugin',
  name: 'Feature Plugin',
  type: 'feature',
  init: () => ({
    routes: [
      {
        path: '/api/custom',
        method: 'GET',
        handler: async (request, ctx) => {
          return new Response(JSON.stringify({ message: 'Custom endpoint' }));
        },
      },
    ],
  }),
};
```

### Middleware Plugins

Middleware plugins process requests and responses:

```typescript
const middlewarePlugin: C15TPlugin = {
  id: 'middleware-plugin',
  name: 'Middleware Plugin',
  type: 'middleware',
  onRequest: async (request, ctx) => {
    // Add request processing
    return { request };
  },
  onResponse: async (response, ctx) => {
    // Add response processing
    return { response };
  },
};
```

## Plugin Lifecycle

### Initialization

Plugins are initialized when the c15t instance is created:

```typescript
const instance = c15tInstance({
  baseURL: 'http://localhost:3000',
  database: memoryAdapter({}),
  plugins: [
    corePlugin,
    featurePlugin,
    middlewarePlugin,
  ],
});
```

### Request Lifecycle

Plugins can hook into various stages of request processing:

```typescript
const lifecyclePlugin: C15TPlugin = {
  id: 'lifecycle-plugin',
  name: 'Lifecycle Plugin',
  type: 'middleware',
  onRequest: async (request, ctx) => {
    console.log('Request received');
    return { request };
  },
  onBeforeHandler: async (request, ctx) => {
    console.log('Before handler');
    return { request };
  },
  onAfterHandler: async (response, ctx) => {
    console.log('After handler');
    return { response };
  },
  onResponse: async (response, ctx) => {
    console.log('Response sent');
    return { response };
  },
};
```

## Context Extensions

Plugins can extend the context with additional data:

```typescript
const contextPlugin: C15TPlugin = {
  id: 'context-plugin',
  name: 'Context Plugin',
  type: 'core',
  init: () => ({
    context: {
      customData: {
        timestamp: Date.now(),
        requestId: generateId(),
      },
    },
  }),
};
```

## Custom Routes

Plugins can add custom routes to your API:

```typescript
const routePlugin: C15TPlugin = {
  id: 'route-plugin',
  name: 'Route Plugin',
  type: 'feature',
  init: () => ({
    routes: [
      {
        path: '/api/custom',
        method: 'GET',
        handler: async (request, ctx) => {
          const data = await ctx.database.find('custom', {});
          return new Response(JSON.stringify(data));
        },
      },
      {
        path: '/api/custom',
        method: 'POST',
        handler: async (request, ctx) => {
          const data = await request.json();
          const result = await ctx.database.create('custom', data);
          return new Response(JSON.stringify(result));
        },
      },
    ],
  }),
};
```

## Error Handling

Plugins can handle errors at different levels:

```typescript
const errorPlugin: C15TPlugin = {
  id: 'error-plugin',
  name: 'Error Plugin',
  type: 'middleware',
  onError: async (error, ctx) => {
    console.error('Plugin error:', error);
    return {
      response: new Response(
        JSON.stringify({ error: 'Internal server error' }),
        { status: 500 }
      ),
    };
  },
};
```

## Plugin Dependencies

Plugins can declare dependencies on other plugins:

```typescript
const dependentPlugin: C15TPlugin = {
  id: 'dependent-plugin',
  name: 'Dependent Plugin',
  type: 'feature',
  dependencies: ['core-plugin', 'auth-plugin'],
  init: (ctx) => {
    // Access dependent plugin data
    const coreData = ctx.plugins['core-plugin'].data;
    const authData = ctx.plugins['auth-plugin'].data;
    
    return {
      context: {
        combinedData: {
          ...coreData,
          ...authData,
        },
      },
    };
  },
};
```

## Best Practices

1. **Plugin Organization**
   ```typescript
   // plugins/index.ts
   export const plugins: C15TPlugin[] = [
     corePlugin,
     authPlugin,
     loggingPlugin,
     customPlugin,
   ];
   ```

2. **Error Handling**
   ```typescript
   const safePlugin: C15TPlugin = {
     id: 'safe-plugin',
     name: 'Safe Plugin',
     type: 'middleware',
     onRequest: async (request, ctx) => {
       try {
         // Plugin logic
         return { request };
       } catch (error) {
         console.error('Plugin error:', error);
         return { error };
       }
     },
   };
   ```

3. **Performance Optimization**
   ```typescript
   const optimizedPlugin: C15TPlugin = {
     id: 'optimized-plugin',
     name: 'Optimized Plugin',
     type: 'middleware',
     onRequest: async (request, ctx) => {
       // Cache expensive operations
       const cacheKey = request.url;
       const cached = await ctx.cache.get(cacheKey);
       if (cached) {
         return { request, cached };
       }
       
       // Perform operation
       const result = await expensiveOperation();
       await ctx.cache.set(cacheKey, result);
       
       return { request, result };
     },
   };
   ```

## Testing Plugins

### Unit Testing

```typescript
describe('Custom Plugin', () => {
  it('should extend context', async () => {
    const plugin = customPlugin;
    const ctx = { context: {} };
    
    const result = await plugin.init(ctx);
    expect(result.context).toHaveProperty('customData');
  });
  
  it('should handle requests', async () => {
    const plugin = customPlugin;
    const request = new Request('http://localhost:3000');
    const ctx = { context: {} };
    
    const result = await plugin.onRequest(request, ctx);
    expect(result.request).toBeDefined();
  });
});
```

### Integration Testing

```typescript
describe('Plugin Integration', () => {
  it('should work with other plugins', async () => {
    const instance = c15tInstance({
      baseURL: 'http://localhost:3000',
      database: memoryAdapter({}),
      plugins: [plugin1, plugin2],
    });
    
    const request = new Request('http://localhost:3000/api/test');
    const response = await instance.handler(request);
    
    expect(response.status).toBe(200);
  });
});
```

## Common Issues

1. **Plugin Order**
   - Plugins are executed in the order they are provided
   - Dependencies should be listed first
   - Core plugins should be initialized before feature plugins

2. **Context Access**
   - Always check for context existence
   - Use optional chaining for nested properties
   - Provide default values when needed

3. **Error Propagation**
   - Handle errors at the appropriate level
   - Log errors for debugging
   - Return appropriate error responses


# Cloudflare Workers
URL: /docs/docs/self-host/v2/examples/cloudflare
Example of self-hosting c15t and Cloudflare Workers.
> ℹ️ **Info:**
> To view the full example, see the Cloudflare example repository.

```tsx title="src/index.ts"
import { c15tInstance } from "@c15t/backend/v2";
import { kyselyAdapter } from "@c15t/backend/v2/db/adapters/kysely";
import { Kysely, PostgresDialect } from "kysely";
import { Pool } from "pg";

const handler = (env: Env) => {
  const instance = c15tInstance({
    appName: "c15t-self-host",
    basePath: "/api/c15t",
    adapter: kyselyAdapter({
      db: new Kysely({
        dialect: new PostgresDialect({
          pool: new Pool({
            connectionString: env.DATABASE_URL
          })
        })
      }),
      provider: "postgresql"
    }),

    trustedOrigins: ["localhost", "vercel.app"],
    advanced: {
      disableGeoLocation: true,
      openapi: {
        enabled: true
      }
    },
    logger: {
      level: "error"
    }
  });

  return async (request: Request): Promise<Response> => {
    try {
      return await instance.handler(request);
    } catch (error) {
      console.error("Error handling request:", error);

      return new Response(
        JSON.stringify({
          error: "Internal Server Error",
          message: error instanceof Error ? error.message : String(error)
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" }
        }
      );
    }
  };
};

export default {
  async fetch(request: Request, env: Env): Promise<Response> {
    return await handler(env)(request);
  }
};
```


# Next.js App Directory
URL: /docs/docs/self-host/v2/examples/nextjs
Example of self-hosting c15t and Next.js app directory.
> ℹ️ **Info:**
> To view the full example, see the Next.js example repository.

```tsx title="app/api/c15t/[...all]/route.ts"
import { c15tInstance } from "@c15t/backend/v2";
import { kyselyAdapter } from "@c15t/backend/v2/db/adapters/kysely";
import { Kysely, PostgresDialect } from "kysely";
import type { NextRequest } from "next/server";
import { Pool } from "pg";

const handler = c15tInstance({
  appName: "c15t-self-host",
  basePath: "/api/c15t",
  adapter: kyselyAdapter({
    db: new Kysely({
      dialect: new PostgresDialect({
        pool: new Pool({
          connectionString: process.env.DATABASE_URL
        })
      })
    }),
    provider: "postgresql"
  }),

  trustedOrigins: ["localhost", "vercel.app"],
  advanced: {
    disableGeoLocation: true,
    openapi: {
      enabled: true
    }
  },
  logger: {
    level: "error"
  }
});

const handleRequest = async (request: NextRequest) => handler.handler(request);

export {
  handleRequest as GET,
  handleRequest as POST,
  handleRequest as OPTIONS
};
```


# Getting Started
URL: /docs/docs/self-host/v2
Quick start guide for self-hosting c15t with the @c15t/backend package.
## DB Setup + Migrations

1. **Run the Self Host CLI**

   | Package manager | Command              |
   | :-------------- | :------------------- |
   | npm             | `npx @c15t/cli`      |
   | pnpm            | `pnpm dlx @c15t/cli` |
   | yarn            | `yarn dlx @c15t/cli` |
   | bun             | `bunx @c15t/cli`     |

## Manual Setup

1. **Install @c15t/backend Package**

   | Package manager | Command                     |
   | :-------------- | :-------------------------- |
   | npm             | `npm install @c15t/backend` |
   | pnpm            | `pnpm add @c15t/backend`    |
   | yarn            | `yarn add @c15t/backend`    |
   | bun             | `bun add @c15t/backend`     |

2. **Create a c15t instance**

   ```tsx
   import { c15tInstance } from '@c15t/backend/v2';
   import { kyselyAdapter } from '@c15t/backend/v2/db/adapters/kysely';
   import { Kysely } from 'kysely';

   const handler = c15tInstance({
     appName: 'example-app',
     basePath: '/',
     adapter: kyselyAdapter({
       db: new Kysely({ }),
       provider: 'postgresql',
     }),
     trustedOrigins: ['localhost', 'vercel.app'],
     advanced: {
       disableGeoLocation: true,
       openapi: {
         enabled: true,
       },
     },
     logger: {
       level: 'debug',
     },
   });

   const handleRequest = async (request: NextRequest) => handler.handler(request);
   ```


# Migrating from v1
URL: /docs/docs/self-host/v2/migrate-from-v1
Migrating from v1 to v2 of the c15t backend.
There has been several major changes to the c15t backend since v1. For the most part, the migration should be straightforward.

## Notable Changes

- `@c15t/backend/v2` now uses FumaDB to integrate with a variety of databases.
- `@c15t/backend/v2` stores date & time as EPOCH milliseconds instead of ISO strings.
- `@c15t/backend/v2` has a slightly different instance interface.
- `@c15t/backend/v2` does not support custom prefixes or table names.

> ⚠️ **Warning:**
> As your consent backend is less production-critical, it could be worth statrting with a new database and doing a data migration. This ensures your databases schema 100% matches the new FumaDB schema.

## Migratiing your database

| Package manager | Command                      |
| :-------------- | :--------------------------- |
| npm             | `npx @c15t/cli migrate`      |
| pnpm            | `pnpm dlx @c15t/cli migrate` |
| yarn            | `yarn dlx @c15t/cli migrate` |
| bun             | `bunx @c15t/cli migrate`     |

If you encounter any issues, and your schema has not been altered e.g. custom prefixes or table names. You can run the following SQL add the table FumaDB expects.

```sql
CREATE TABLE private_c15t_settings (
  key character varying(255) NOT NULL,
  value text NOT NULL,
  PRIMARY KEY (key)
);

INSERT INTO private_c15t_settings VALUES
('name-variants', '{"subject":{"convex":"subject","drizzle":"subject","prisma":"subject","mongodb":"subject","sql":"subject"},"subject.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"subject.isIdentified":{"convex":"isIdentified","drizzle":"isIdentified","prisma":"isIdentified","mongodb":"isIdentified","sql":"isIdentified"},"subject.externalId":{"convex":"externalId","drizzle":"externalId","prisma":"externalId","mongodb":"externalId","sql":"externalId"},"subject.identityProvider":{"convex":"identityProvider","drizzle":"identityProvider","prisma":"identityProvider","mongodb":"identityProvider","sql":"identityProvider"},"subject.lastIpAddress":{"convex":"lastIpAddress","drizzle":"lastIpAddress","prisma":"lastIpAddress","mongodb":"lastIpAddress","sql":"lastIpAddress"},"subject.createdAt":{"convex":"createdAt","drizzle":"createdAt","prisma":"createdAt","mongodb":"createdAt","sql":"createdAt"},"subject.updatedAt":{"convex":"updatedAt","drizzle":"updatedAt","prisma":"updatedAt","mongodb":"updatedAt","sql":"updatedAt"},"domain":{"convex":"domain","drizzle":"domain","prisma":"domain","mongodb":"domain","sql":"domain"},"domain.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"domain.name":{"convex":"name","drizzle":"name","prisma":"name","mongodb":"name","sql":"name"},"domain.description":{"convex":"description","drizzle":"description","prisma":"description","mongodb":"description","sql":"description"},"domain.allowedOrigins":{"convex":"allowedOrigins","drizzle":"allowedOrigins","prisma":"allowedOrigins","mongodb":"allowedOrigins","sql":"allowedOrigins"},"domain.isVerified":{"convex":"isVerified","drizzle":"isVerified","prisma":"isVerified","mongodb":"isVerified","sql":"isVerified"},"domain.isActive":{"convex":"isActive","drizzle":"isActive","prisma":"isActive","mongodb":"isActive","sql":"isActive"},"domain.createdAt":{"convex":"createdAt","drizzle":"createdAt","prisma":"createdAt","mongodb":"createdAt","sql":"createdAt"},"domain.updatedAt":{"convex":"updatedAt","drizzle":"updatedAt","prisma":"updatedAt","mongodb":"updatedAt","sql":"updatedAt"},"consentPolicy":{"convex":"consentPolicy","drizzle":"consentPolicy","prisma":"consentPolicy","mongodb":"consentPolicy","sql":"consentPolicy"},"consentPolicy.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"consentPolicy.version":{"convex":"version","drizzle":"version","prisma":"version","mongodb":"version","sql":"version"},"consentPolicy.type":{"convex":"type","drizzle":"type","prisma":"type","mongodb":"type","sql":"type"},"consentPolicy.name":{"convex":"name","drizzle":"name","prisma":"name","mongodb":"name","sql":"name"},"consentPolicy.effectiveDate":{"convex":"effectiveDate","drizzle":"effectiveDate","prisma":"effectiveDate","mongodb":"effectiveDate","sql":"effectiveDate"},"consentPolicy.expirationDate":{"convex":"expirationDate","drizzle":"expirationDate","prisma":"expirationDate","mongodb":"expirationDate","sql":"expirationDate"},"consentPolicy.content":{"convex":"content","drizzle":"content","prisma":"content","mongodb":"content","sql":"content"},"consentPolicy.contentHash":{"convex":"contentHash","drizzle":"contentHash","prisma":"contentHash","mongodb":"contentHash","sql":"contentHash"},"consentPolicy.isActive":{"convex":"isActive","drizzle":"isActive","prisma":"isActive","mongodb":"isActive","sql":"isActive"},"consentPolicy.createdAt":{"convex":"createdAt","drizzle":"createdAt","prisma":"createdAt","mongodb":"createdAt","sql":"createdAt"},"consentPurpose":{"convex":"consentPurpose","drizzle":"consentPurpose","prisma":"consentPurpose","mongodb":"consentPurpose","sql":"consentPurpose"},"consentPurpose.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"consentPurpose.code":{"convex":"code","drizzle":"code","prisma":"code","mongodb":"code","sql":"code"},"consentPurpose.name":{"convex":"name","drizzle":"name","prisma":"name","mongodb":"name","sql":"name"},"consentPurpose.description":{"convex":"description","drizzle":"description","prisma":"description","mongodb":"description","sql":"description"},"consentPurpose.isEssential":{"convex":"isEssential","drizzle":"isEssential","prisma":"isEssential","mongodb":"isEssential","sql":"isEssential"},"consentPurpose.dataCategory":{"convex":"dataCategory","drizzle":"dataCategory","prisma":"dataCategory","mongodb":"dataCategory","sql":"dataCategory"},"consentPurpose.legalBasis":{"convex":"legalBasis","drizzle":"legalBasis","prisma":"legalBasis","mongodb":"legalBasis","sql":"legalBasis"},"consentPurpose.isActive":{"convex":"isActive","drizzle":"isActive","prisma":"isActive","mongodb":"isActive","sql":"isActive"},"consentPurpose.createdAt":{"convex":"createdAt","drizzle":"createdAt","prisma":"createdAt","mongodb":"createdAt","sql":"createdAt"},"consentPurpose.updatedAt":{"convex":"updatedAt","drizzle":"updatedAt","prisma":"updatedAt","mongodb":"updatedAt","sql":"updatedAt"},"consent":{"convex":"consent","drizzle":"consent","prisma":"consent","mongodb":"consent","sql":"consent"},"consent.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"consent.subjectId":{"convex":"subjectId","drizzle":"subjectId","prisma":"subjectId","mongodb":"subjectId","sql":"subjectId"},"consent.domainId":{"convex":"domainId","drizzle":"domainId","prisma":"domainId","mongodb":"domainId","sql":"domainId"},"consent.policyId":{"convex":"policyId","drizzle":"policyId","prisma":"policyId","mongodb":"policyId","sql":"policyId"},"consent.purposeIds":{"convex":"purposeIds","drizzle":"purposeIds","prisma":"purposeIds","mongodb":"purposeIds","sql":"purposeIds"},"consent.metadata":{"convex":"metadata","drizzle":"metadata","prisma":"metadata","mongodb":"metadata","sql":"metadata"},"consent.ipAddress":{"convex":"ipAddress","drizzle":"ipAddress","prisma":"ipAddress","mongodb":"ipAddress","sql":"ipAddress"},"consent.userAgent":{"convex":"userAgent","drizzle":"userAgent","prisma":"userAgent","mongodb":"userAgent","sql":"userAgent"},"consent.status":{"convex":"status","drizzle":"status","prisma":"status","mongodb":"status","sql":"status"},"consent.withdrawalReason":{"convex":"withdrawalReason","drizzle":"withdrawalReason","prisma":"withdrawalReason","mongodb":"withdrawalReason","sql":"withdrawalReason"},"consent.givenAt":{"convex":"givenAt","drizzle":"givenAt","prisma":"givenAt","mongodb":"givenAt","sql":"givenAt"},"consent.validUntil":{"convex":"validUntil","drizzle":"validUntil","prisma":"validUntil","mongodb":"validUntil","sql":"validUntil"},"consent.isActive":{"convex":"isActive","drizzle":"isActive","prisma":"isActive","mongodb":"isActive","sql":"isActive"},"auditLog":{"convex":"auditLog","drizzle":"auditLog","prisma":"auditLog","mongodb":"auditLog","sql":"auditLog"},"auditLog.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"auditLog.entityType":{"convex":"entityType","drizzle":"entityType","prisma":"entityType","mongodb":"entityType","sql":"entityType"},"auditLog.entityId":{"convex":"entityId","drizzle":"entityId","prisma":"entityId","mongodb":"entityId","sql":"entityId"},"auditLog.actionType":{"convex":"actionType","drizzle":"actionType","prisma":"actionType","mongodb":"actionType","sql":"actionType"},"auditLog.subjectId":{"convex":"subjectId","drizzle":"subjectId","prisma":"subjectId","mongodb":"subjectId","sql":"subjectId"},"auditLog.ipAddress":{"convex":"ipAddress","drizzle":"ipAddress","prisma":"ipAddress","mongodb":"ipAddress","sql":"ipAddress"},"auditLog.userAgent":{"convex":"userAgent","drizzle":"userAgent","prisma":"userAgent","mongodb":"userAgent","sql":"userAgent"},"auditLog.changes":{"convex":"changes","drizzle":"changes","prisma":"changes","mongodb":"changes","sql":"changes"},"auditLog.metadata":{"convex":"metadata","drizzle":"metadata","prisma":"metadata","mongodb":"metadata","sql":"metadata"},"auditLog.createdAt":{"convex":"createdAt","drizzle":"createdAt","prisma":"createdAt","mongodb":"createdAt","sql":"createdAt"},"auditLog.eventTimezone":{"convex":"eventTimezone","drizzle":"eventTimezone","prisma":"eventTimezone","mongodb":"eventTimezone","sql":"eventTimezone"},"consentRecord":{"convex":"consentRecord","drizzle":"consentRecord","prisma":"consentRecord","mongodb":"consentRecord","sql":"consentRecord"},"consentRecord.id":{"convex":"id","drizzle":"id","prisma":"id","mongodb":"_id","sql":"id"},"consentRecord.subjectId":{"convex":"subjectId","drizzle":"subjectId","prisma":"subjectId","mongodb":"subjectId","sql":"subjectId"},"consentRecord.consentId":{"convex":"consentId","drizzle":"consentId","prisma":"consentId","mongodb":"consentId","sql":"consentId"},"consentRecord.actionType":{"convex":"actionType","drizzle":"actionType","prisma":"actionType","mongodb":"actionType","sql":"actionType"},"consentRecord.details":{"convex":"details","drizzle":"details","prisma":"details","mongodb":"details","sql":"details"},"consentRecord.createdAt":{"convex":"createdAt","drizzle":"createdAt","prisma":"createdAt","mongodb":"createdAt","sql":"createdAt"}}'),
('version', '1.0.0');
```


# Options Reference
URL: /docs/docs/self-host/v2/options
Reference for all options available for the c15t instance.
### appName

Defaults to `c15t`, is used in the logger and in the OpenAPI spec.

### basePath

The path to the c15t API, defaults to `/`. If you're self-hosting c15t with Next.js, you should set this to `/api/c15t`.

### adapter (required)

This is the database adapter to use for the c15t instance. Learn more about the available adapters in the [supported databases](/docs/self-host/supported-databases) page.

### trustedOrigins

This is the list of origins that are trusted for CORS and CSRF protection.

## Advanced Options

### disableGeoLocation

This will disable geo-location detection and the banner will always be shown.

### customTranslations

This allows you to override the default @c15t/translations with your own. Server side translations can help reduce the bundle size of your banner.

### ipAddress

This allows you to override the default ip address headers.

### openapi

Configure the OpenAPI spec generation.

### telemetry

Configure telemetry for the c15t instance.

## Type Definitions

| Property    | Value                                 |
| :---------- | :------------------------------------ |
| Type Name   | \`C15TOptions\`                       |
| Source Path | \`./packages/backend/src/v2/core.ts\` |

\*AutoTypeTable: Could not extract \`C15TOptions\` from \`./packages/backend/src/v2/core.ts\`. Verify the path/name and that the file is included by your tsconfig.\*


# Supported Databases
URL: /docs/docs/self-host/v2/supported-databases
List of supported databases for self-hosting c15t with the @c15t/backend package.
The c15t uses FumaDB to integrate with a variety of databases.

## Supported ORMs

- Drizzle ORM (full support, query mode required)
- Prisma ORM (full support)
- TypeORM (via Kysely, no MongoDB support)

## Supported Databases

- MongoDB (full support)
- MySQL (full support, via Kysely)
- PostgreSQL (full support, via Kysely)
- SQLite (full support, via Kysely)
- Microsoft SQL Server (full support, via Kysely)
- Cockroach DB (full support, via Kysely)

For an up to date list of supported databases, see the [FumaDB documentation](https://fumadb.vercel.app/docs/supported).

## Available Adapters

```tsx
import { drizzleAdapter } from "@c15t/backend/v2/db/adapters/drizzle";
import { kyselyAdapter } from "@c15t/backend/v2/db/adapters/kysely";
import { prismaAdapter } from "@c15t/backend/v2/db/adapters/prisma";
import { mongoAdapter } from "@c15t/backend/v2/db/adapters/mongo";
import { typeormAdapter } from "@c15t/backend/v2/db/adapters/typeorm";
```


