This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: e2e-fixes-final-update.md, e2e-critical-fix-explanation.md, e2e-test-fixes-round-2.md, e2e-test-fixes-complete-summary.md, CLAUDE.md
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
CLAUDE.md
e2e-critical-fix-explanation.md
e2e-fixes-final-update.md
e2e-test-fixes-round-2.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="e2e-critical-fix-explanation.md">
# Critical E2E Test Fix - Why Tests Got Worse

## The Problem

We went from 33 failures to 96 failures because of a critical bug I introduced in the `uiLogin` helper.

## What Went Wrong

In the `uiLogin` function, I added this line:
```typescript
// Wait for button to change to "Logging in..." to confirm submission
await expect(page.getByRole("button", { name: "Logging in..." })).toBeVisible({ timeout: 5_000 });
```

This was meant to confirm the form was submitted, but it created a race condition:
- If login is fast, the "Logging in..." button might never appear
- Or it might appear and disappear before we can detect it
- This caused the auth setup to fail with a timeout

## The Cascade Effect

1. **Auth Setup Failed** - The setup step that creates the shared authentication state failed
2. **No Auth State Saved** - No `.auth/user.json` file was created
3. **All Shared Auth Tests Failed** - All tests using shared auth (dashboard, navigation, logout) had no authentication
4. **Firefox Tests Also Failed** - Both browser types were affected

## The Fix

1. **Removed the problematic wait** - No longer waiting for "Logging in..." button
2. **Simplified auth setup** - Now uses the same `uiLogin` helper consistently
3. **Fixed signup test** - Added small delay between password fields to prevent validation race

## Key Lessons

1. **Don't add unnecessary waits** - Waiting for transient states can cause failures
2. **Test the test infrastructure** - Changes to auth helpers affect ALL tests
3. **Shared auth is fragile** - One failure in setup cascades to many test failures

## Expected Results After Fix

With these fixes:
- Auth setup should succeed reliably
- Shared auth tests should have proper authentication
- Test count should drop back to ~20-30 failures
- Remaining failures will be test-specific issues, not systemic problems
</file>

<file path="e2e-fixes-final-update.md">
# E2E Test Fixes - Final Update

## Latest Changes Made

### 1. Updated Auth Helper Timeouts
**File**: `e2e/utils/auth.ts`
- Increased all timeouts from 5s to 10s for better stability
- Changed `waitForLoadState('networkidle')` to `waitForLoadState('domcontentloaded')` 
- Added wait for "Logging in..." button to confirm form submission
- Increased navigation timeout from 15s to 30s
- Increased page ready delay from 500ms to 1000ms

### 2. Fixed Unauthenticated Auth Flow Tests
**File**: `e2e/tests/unauthenticated/auth-flow.unauth.spec.ts`
- Updated to use `clearAuthState` helper
- Replaced manual login with `uiLogin` helper
- Added proper waits for form fields to be ready
- Fixed redirect test to properly verify redirect parameter

## Current Test Status

Based on the error snapshots analyzed:
- **Pattern**: Tests are getting stuck on login page with "Logging in..." button disabled
- **Root Cause**: Login succeeds (API returns 200) but navigation takes longer than expected
- **Solution**: Increased timeouts should allow navigation to complete

## Key Findings from Playwright MCP

1. Login form submission works correctly
2. API authentication succeeds (200 OK response)
3. Navigation eventually completes but takes ~3-5 seconds
4. Redirect parameter is properly read and used

## Expected Results

With the increased timeouts:
- Login flow should complete successfully
- Tests should reach their intended pages
- Failing test count should drop significantly

## Recommendations

1. **Monitor the current test run** - The increased timeouts should resolve most failures
2. **If issues persist**:
   - Check server logs for slow response times
   - Consider adding retry logic for navigation
   - Investigate why navigation takes so long

3. **For remaining failures**:
   - They will likely be test-specific issues
   - Not related to the systemic login problem
   - Each can be addressed individually

## Test Run Progress

The current test run should complete with significantly fewer failures. The main systemic issues have been addressed:
- ✅ Login redirect parameter fixed
- ✅ Auth helper timeouts increased
- ✅ Test data reset to clean state
- ✅ Proper test isolation implemented
</file>

<file path="e2e-test-fixes-round-2.md">
# E2E Test Fixes - Round 2

## Issues Fixed

### 1. Signup Test - Password Validation
**Problem**: "Passwords do not match" error because confirm password field validates too quickly
**Fix**: Added delays between password field entries to allow validation to complete

### 2. Strict Mode Violations
**Problem**: Multiple elements matching same selector causing Playwright strict mode errors
**Fixes**:
- Profile Edit: Changed `getByLabel("Phone Number")` to `getByRole("textbox", { name: "Phone Number" })`
- Membership: Added `.first()` to text selectors that appear multiple times
- Navigation: Used `{ exact: true }` for "Dashboard" link
- Membership buttons: Used specific button names instead of generic selectors

### 3. Color Picker Inputs
**Problem**: `fill()` doesn't work properly with color input fields
**Fix**: Used `page.evaluate()` to set color values directly via JavaScript

### 4. Improved Button Selection
**Problem**: Generic button selectors were matching navigation buttons like "Logout"
**Fix**: Used specific button names: "Purchase", "Renew", "Current Plan"

## Key Patterns Applied

1. **Be Specific with Selectors**:
   - Use role-based selectors when possible
   - Add `exact: true` for common navigation terms
   - Use `.first()` when text appears multiple times

2. **Handle Form Validation Timing**:
   - Add small delays between related field entries
   - Wait for validation to complete before proceeding

3. **Special Input Handling**:
   - Color inputs need JavaScript evaluation
   - Password confirmation needs delay after password entry

## Expected Impact

These fixes should resolve approximately 15-20 test failures related to:
- Signup flow
- Profile editing
- Membership page interactions
- Team creation

## Remaining Issues

1. **Navigation Timeouts**: Some tests timing out on navigation (needs investigation)
2. **Missing Elements**: Some expected elements not appearing (may be data-related)
3. **Profile Save**: Profile updates not showing success message (needs debugging)
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Quick Reference

### Server Functions - Always Use Zod Validation

```typescript
// 1. Define schema
const mySchema = z.object({
  /* ... */
});

// 2. Use .validator(schema.parse)
export const myServerFn = createServerFn({ method: "POST" })
  .validator(mySchema.parse)
  .handler(async ({ data }) => {
    /* ... */
  });
```

### Avoid @ts-expect-error

- NEVER use as first solution
- Try Zod validation first
- Create proper type definitions
- See [TanStack Start Best Practices](./docs/TANSTACK-START-BEST-PRACTICES.md) for details

## Development Commands

- `pnpm dev` - Start development server (Vite on port 5173, default to use)
- `netlify dev` - Start Netlify Dev server (port 8888, proxies Vite and includes edge functions)
- `pnpm build` - Build for production
- `pnpm start` - Start production server
- `pnpm lint` - Run ESLint
- `pnpm check-types` - Type checking with TypeScript
- `pnpm format` - Format code with Prettier
- `pnpm test` - Run Vitest tests
- `pnpm test:ui` - Run tests with UI
- `pnpm test:coverage` - Generate test coverage report
- `pnpm test:e2e` - Run Playwright E2E tests
- `pnpm test:e2e:ui` - Run E2E tests with UI mode
- `pnpm test:e2e:setup` - Seed database with E2E test data
- **E2E Test Iteration Strategy**: When fixing E2E tests, follow this loop:
  1. Run `pnpm test:e2e --reporter=html --output=e2e-test-results` **in the background**
  2. Use bash to sleep for 10 minutes
  3. Check if there are any errors in the e2e-test-results folder
     - If no errors, check if the test process is still running
     - If still running, sleep 10 more minutes
     - If not running and no errors, you're done
  4. If errors exist, fix the errors in both functionality and tests, then go back to step 1
  5. **CONTINUE THIS LOOP MANY TIMES until all errors are fixed**
- `pnpm db` - Run Drizzle Kit database commands
- `pnpm auth:generate` - Generate auth schema from config
- `pnpm docs:reference` - Generate TypeDoc API documentation
- `pnpm docs:erd` - Generate database ERD diagrams from schema
- `pnpm docs:all` - Run all documentation generation

## Pre-Commit Requirements

**IMPORTANT**: The pre-commit hook automatically runs the following checks to ensure code quality:

1. **Lint-staged** - Runs on staged files only:
   - `eslint --fix` - Auto-fixes and checks ESLint rules
   - `prettier --write` - Formats code consistently
2. **Type checking** - `pnpm check-types` on entire codebase
3. **Tests** - `pnpm test --run` to ensure nothing is broken

All checks must pass before the commit is allowed. The pre-commit hook matches what GitHub Actions CI runs, ensuring no surprises after pushing.

## Architecture Overview

This is **Roundup Games**, a tabletop and board game management platform built with TanStack Start (full-stack React framework) and deployed to Netlify. The application uses:

- **TanStack Router** for file-based routing with type safety
- **Better Auth** for authentication (email/password + OAuth via GitHub/Google)
- **Drizzle ORM** with PostgreSQL for database operations
- **TanStack Query** for server state management and caching
- **Tailwind CSS** for styling with shadcn/ui components

### Key Architectural Patterns

**Full-Stack React with TanStack Start**: The app uses TanStack Start's server-side rendering and API routes. Server-only code is isolated using `serverOnly()` wrapper.

**Database & Auth Integration**: Better Auth uses Drizzle adapter for seamless integration. Auth schemas are auto-generated with `pnpm auth:generate` command.

**File-Based Routing**: Routes follow TanStack Router conventions in `src/routes/`. Route tree is auto-generated in `routeTree.gen.ts`.

**Server State Management**: React Query handles caching and synchronization. User authentication state is cached at the root level and passed through context.

### Key Directories (Features-Based Architecture)

- `src/app/` - Application-level code (providers, router setup)
- `src/features/` - Feature modules organized by domain
  - `auth/` - Authentication feature (components, hooks, API, tests)
  - `profile/` - User profile management (components, server functions, guards)
  - `layouts/` - Admin and public layout components
  - Future features will follow the same pattern
- `src/shared/` - Shared resources across features
  - `ui/` - shadcn/ui components and icons (auto-installed here via components.json)
  - `hooks/` - Shared React hooks (useTheme, etc.)
  - `lib/` - Utilities and helpers
  - `types/` - Shared TypeScript types
- `src/components/` - Application-specific components
  - `form-fields/` - Reusable form components (ValidatedInput, ValidatedSelect, etc.)
- `src/db/` - Database layer
  - `schema/` - Drizzle schema definitions (single source of truth)
  - `migrations/` - Database migrations
- `src/routes/` - Thin route files that import from features
- `src/lib/` - Core infrastructure
  - `auth/` - Better Auth configuration
  - `form.ts` - TanStack Form custom hook setup
  - `env.ts` - Environment variable management
  - `security/` - Security utilities and middleware
- `src/tests/` - Test utilities and global test setup

### Environment Requirements

- `DATABASE_URL` - PostgreSQL connection string (pooled URL for serverless)
- `DATABASE_URL_UNPOOLED` - Direct connection URL for migrations (optional)
- `VITE_BASE_URL` - Application base URL (only required in development - use http://localhost:8888 for Netlify Dev, http://localhost:5173 for Vite)
- `GITHUB_CLIENT_ID/SECRET` - GitHub OAuth (required for OAuth login)
- `GOOGLE_CLIENT_ID/SECRET` - Google OAuth (required for OAuth login)
- `BETTER_AUTH_SECRET` - Secret key for Better Auth sessions

Netlify automatically provides:

- `URL` - The main URL of your site in production
- `SITE_URL` - The site's primary URL
- `DEPLOY_URL` - The specific deploy URL
- `NETLIFY_DATABASE_URL` - Pooled Neon database URL
- `NETLIFY_DATABASE_URL_UNPOOLED` - Direct Neon database URL

### Local Development Setup

1. **Environment Files**:
   - `.env` - Main environment file
   - `.env.local` - Local overrides (git-ignored)
   - Netlify Dev will inject values from Netlify project settings

2. **OAuth Setup**:
   - OAuth credentials must be valid (not placeholders) for routes to work

3. **Development Servers**:
   - `pnpm dev` - Vite dev server only (port 5173, what to usually use)
   - `netlify dev` - Full Netlify environment with edge functions (port 8888)

### Database Connections

The app uses Neon with proper connection pooling:

- **Pooled connections** (`pooledDb`): For API routes and serverless functions
- **Unpooled connections** (`unpooledDb`): For migrations and long operations
- **Auto-detection** (`db`): Automatically selects based on environment

See `docs/database-connections.md` for detailed usage guide.

### Security Features

- **CSP Headers**: Content Security Policy with nonce-based script validation
- **Secure Cookies**: HTTPS-only, HttpOnly, SameSite protection in production
- **Rate Limiting**: Configurable rate limits for auth and API endpoints
- **Password Validation**: Strong password requirements enforced
- **Security Headers**: Full suite via Netlify Edge Functions

### Testing Infrastructure

- **Vitest**: Modern test runner with jsdom environment
- **Testing Library**: React component testing utilities
- **Coverage**: Code coverage reporting with c8
- **Mocks**: Auth and router mocks for isolated testing
- **E2E Testing**: Playwright for end-to-end testing

### CI/CD Pipeline

- **GitHub Actions**: Automated testing, linting, and type checking
- **Netlify Deploy Previews**: Automatic preview deployments for PRs
- **Pre-commit Hooks**: Husky + lint-staged for code quality
- **Multi-version Testing**: Tests run on Node.js 18 and 20

### Code Organization Patterns

- **Auth Facade**: Clean API wrapper around Better Auth client
- **Theme Hook**: Reactive theme management with system preference support
- **Centralized Icons**: Reusable icon components in shared/ui/icons
- **Auth Guards**: Flexible authentication protection for routes
- **Profile Guards**: Ensure users complete profile before accessing features
- **Environment Config**: Type-safe environment variable access
- **Form Components**: Reusable ValidatedInput, ValidatedSelect, etc. with TanStack Form

### Authentication Flow

1. **Login Methods**:
   - Email/password via `auth.signIn.email()`
   - OAuth via `auth.signInWithOAuth()` (Google, GitHub)
2. **Protected Routes**:
   - Auth guard middleware redirects unauthenticated users
   - Profile completion guard redirects incomplete profiles to `/onboarding`
   - User state cached in React Query
3. **API Routes**:
   - All auth endpoints under `/api/auth/*`
   - Handled by Better Auth via catch-all route
4. **User Type**:
   - Better Auth's `User` type doesn't include custom fields
   - Use `ExtendedUser` type from `~/lib/auth/types` for full user data
   - `getCurrentUser()` server function fetches complete user with custom fields

### Documentation

The project includes automated documentation generation:

- **API Reference**: TypeDoc generates markdown documentation for all code in `src/lib/`
  - Run `pnpm docs:reference` to update
  - Output: `docs/reference/` (gitignored except ERDs)
  - Configuration: `typedoc.json`
- **Database ERDs**: Automatically generates diagrams from mermaid definitions
  - Run `pnpm docs:erd` to update
  - Source: `docs/roundup-games-plan/database/schema-overview.md`
  - Output: `docs/reference/database/schema-erd.{svg,png}`
  - Uses system Chrome via `puppeteer.config.json`

### TanStack Start Server Functions

Server functions are defined using `createServerFn()` and called from React components:

1. **Best Practice - Use Zod Validation** (ALWAYS PREFER THIS):

```typescript
import { z } from "zod";
import { createServerFn } from "@tanstack/react-start";

// Define schema first
const myInputSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
});

// Use .validator() with schema.parse
export const myServerFn = createServerFn({ method: "POST" })
  .validator(myInputSchema.parse)
  .handler(async ({ data }) => {
    // data is now properly typed from the schema
    // Server-side implementation
    return result;
  });
```

2. **Why Use Zod Validation**:
   - Provides runtime type safety, not just compile-time
   - Eliminates need for `@ts-expect-error` in most cases
   - Better error messages for invalid inputs
   - Automatic TypeScript type inference from schemas
   - Single source of truth for input validation

3. **File Organization for Server Functions**:

```
src/features/[feature]/
├── [feature].schemas.ts    # Zod schemas for all operations
├── [feature].queries.ts    # GET server functions
├── [feature].mutations.ts  # POST/PUT/DELETE server functions
├── [feature].types.ts      # TypeScript types and interfaces
└── [feature].db-types.ts   # Database-specific type overrides (if needed)
```

4. **Calling Pattern**:

```typescript
// With validation, call matches the schema structure:
const result = await myServerFn({ data: { name: "John", email: "john@example.com" } });

// For functions with no input:
const result = await myServerFn();
```

5. **Handling Complex Types (e.g., jsonb fields)**:
   - Create separate type definition files for complex database types
   - Use type overrides when extending database types
   - Add ESLint disable comments ONLY when absolutely necessary

```typescript
// events.db-types.ts
/* eslint-disable @typescript-eslint/no-explicit-any */
export interface EventMetadata {
  [key: string]: any;
}

// events.types.ts
export interface EventWithDetails extends Omit<Event, "metadata"> {
  metadata: EventMetadata;
  // ... other fields
}
```

6. **Legacy Pattern** (AVOID - only for reference):

```typescript
// ❌ AVOID this pattern - it bypasses runtime validation
export const myServerFn = createServerFn({ method: "POST" }).handler(
  async ({ data }: { data: MyInputType }) => {
    return result;
  },
);
```

7. **Server-Only Module Imports**:
   - **IMPORTANT**: TanStack Start only extracts code INSIDE the `handler()` function
   - Top-level imports in server function files are included in the client bundle
   - If a module accesses server-only resources (env vars, Node APIs), it will crash in the browser

   **❌ BAD - Top-level import causes client bundle pollution:**

   ```typescript
   import { squarePaymentService } from "~/lib/payments/square"; // Accesses process.env

   export const createCheckout = createServerFn().handler(async () => {
     return squarePaymentService.createCheckoutSession(...);
   });
   ```

   **✅ GOOD - Use `serverOnly()` helper:**

   ```typescript
   import { serverOnly } from "@tanstack/react-start";

   const getSquarePaymentService = serverOnly(async () => {
     const { squarePaymentService } = await import("~/lib/payments/square");
     return squarePaymentService;
   });

   export const createCheckout = createServerFn().handler(async () => {
     const squarePaymentService = await getSquarePaymentService();
     return squarePaymentService.createCheckoutSession(...);
   });
   ```

   **✅ ALSO GOOD - Dynamic import inside handler:**

   ```typescript
   export const createCheckout = createServerFn().handler(async () => {
     const { squarePaymentService } = await import("~/lib/payments/square");
     return squarePaymentService.createCheckoutSession(...);
   });
   ```

### Best Practices for Type Safety

1. **Avoid @ts-expect-error**:
   - NEVER use `@ts-expect-error` as a first solution
   - Always try proper type definitions or validation first
   - If you must use it, add a detailed comment explaining why

2. **Server Function Type Safety Checklist**:
   - ✅ Create Zod schema for input validation
   - ✅ Use `.validator(schema.parse)` on server functions
   - ✅ Define return types explicitly
   - ✅ Create type definitions for complex database fields
   - ✅ Use type overrides for jsonb fields instead of `any`
   - ❌ Avoid type assertions like `data as Type`
   - ❌ Don't suppress errors without investigation

3. **When Adding New Features**:
   - Start with schema definitions
   - Build types from schemas using `z.infer<typeof schema>`
   - Use validation at runtime boundaries
   - Test error cases to ensure validation works

### E2E Testing with Playwright

**IMPORTANT**: Add E2E tests for all new features to ensure they work correctly from the user's perspective.

1. **Test Structure**:
   - Tests are organized by authentication requirement
   - `e2e/tests/authenticated/` - Tests requiring login
   - `e2e/tests/unauthenticated/` - Tests without login
   - Use descriptive file names: `feature.auth.spec.ts` or `feature.unauth.spec.ts`

2. **Writing Tests**:

   ```typescript
   import { test, expect } from "@playwright/test";

   test("should display user dashboard", async ({ page }) => {
     await page.goto("/dashboard");
     await expect(page.getByRole("heading", { name: /Welcome back/ })).toBeVisible();
   });
   ```

3. **Using Playwright MCP for Verification**:
   - Before using Playwright MCP:
     - Check if dev server is running: `curl -s http://localhost:5173/api/health`
     - If browser already in use, close it first: `mcp__playwright__browser_close`
   - Use MCP to verify UI behavior before writing/updating E2E tests
   - This ensures tests match actual application behavior

4. **Best Practices**:
   - Use Playwright's recommended locators: `getByRole`, `getByLabel`, `getByText`
   - Avoid arbitrary waits - use proper wait conditions
   - Keep tests isolated and independent
   - Test user journeys, not implementation details

5. **Running Tests**:
   - `pnpm test:e2e` - Run all E2E tests
   - `pnpm test:e2e:ui` - Interactive UI mode for debugging
   - `pnpm test:e2e --project=chromium-auth` - Run specific test suite
   - `pnpm test:e2e:setup` - Seed test data before running tests

6. **Authentication in Tests**:
   - Shared auth state is configured in `e2e/auth.setup.ts`
   - Tests automatically use authenticated state when in `authenticated/` folder
   - Test user credentials are in `.env.e2e`

### Common Tasks

- **Add a new page**: Create file in `src/routes/`
- **Add auth to a route**: Use auth guard in route's `beforeLoad`
- **Add profile completion guard**: Use `requireCompleteProfile()` from profile feature
- **Access user data**: Use `useRouteContext()` to get user from context
- **Make API calls**: Use React Query with proper error handling
- **Add UI components**: Check `src/shared/ui/` for existing components first
- **Install shadcn components**: `npx shadcn@latest add <component>` (auto-installs to `src/shared/ui/`)
- **Update documentation**: Run `pnpm docs:all` after significant changes
- **Add a new server function**:
  1. Create schema in `[feature].schemas.ts`
  2. Use `.validator(schema.parse)` in the server function
  3. Define proper return types
  4. Handle errors with typed error responses
- **Add E2E tests for new features**:
  1. Add tests in `e2e/tests/authenticated/` or `e2e/tests/unauthenticated/`
  2. Use `.auth.spec.ts` suffix for tests requiring authentication
  3. Use `.unauth.spec.ts` suffix for tests without authentication
  4. Run `pnpm test:e2e` to execute tests locally
- **Add client-side rate limiting to server functions**:
  1. Import `useRateLimitedServerFn` from `~/lib/pacer/hooks`
  2. Wrap your server function: `const rateLimited = useRateLimitedServerFn(serverFn, { type: "api" })`
  3. Use types: "auth" (5/15min), "api" (100/1min), "search" (10/10s), "mutation" (20/1min)
  4. See `docs/rate-limiting-with-pacer.md` for full guide

### User added context:

You can see the netlify production variables via `netlify env:list`
Which include:
| DATABASE_URL | \***\*\*\*\*\***\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\*** \***\* | All |
| GOOGLE_CLIENT_ID | **\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\*\*\***\*\*\***\*\*\*\*\***\*\*\***\* \***\* | All |
| GOOGLE_CLIENT_SECRET | **\*\*\*\***\*\*\***\*\*\*\*\***\*\*\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\*** \***\* | All |
| NETLIFY_DATABASE_URL | **\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\*\*\***\*\*\***\*\*\*\*\***\*\*\***\* \***\* | All |
| NETLIFY_DATABASE_URL_UNPOOLED | **\*\*\*\***\*\*\***\*\*\*\*\***\*\*\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\*** \***\* | All |
| NODE_ENV | **\*\*\***\*\*\*\*\***\*\*\***\*\*\*\*\*\*\***\*\*\***\*\*\*\*\***\*\*\*\*\*\*
\*\*\*\* | Builds, Post processing |

---

## 4 — Directory Cheat‑Sheet

Tree as of July 6, 2025

```

.
├── AGENTS.md
├── CLAUDE.md
├── components.json
├── coverage
│   ├── base.css
│   ├── block-navigation.js
│   ├── coverage-final.json
│   ├── favicon.png
│   ├── features
│   │   └── auth
│   │       └── components
│   │           ├── index.html
│   │           └── login.tsx.html
│   ├── index.html
│   ├── lib
│   │   └── auth
│   │       └── middleware
│   │           ├── auth-guard.ts.html
│   │           └── index.html
│   ├── prettify.css
│   ├── prettify.js
│   ├── shared
│   │   ├── lib
│   │   │   ├── index.html
│   │   │   └── utils.ts.html
│   │   └── ui
│   │       ├── button.tsx.html
│   │       ├── icons.tsx.html
│   │       ├── index.html
│   │       ├── input.tsx.html
│   │       └── label.tsx.html
│   ├── sort-arrow-sprite.png
│   └── sorter.js
├── dist
│   ├── _headers
│   ├── _redirects
│   ├── assets
│   │   ├── createLucideIcon-Bcg0Vi2e.js
│   │   ├── index-CvP1hl19.js
│   │   ├── index-Daq_2NZw.js
│   │   ├── label-BpBwDb9J.js
│   │   ├── loader-circle-6MYg0gu7.js
│   │   ├── login-CU83squS.js
│   │   ├── main-BaDK-79R.js
│   │   ├── profile-3i2p7dMd.js
│   │   ├── route-CscgpPZC.js
│   │   ├── route-CZWZ9WpA.js
│   │   ├── signup-CuG_U93y.js
│   │   └── styles-by26pVYo.css
│   └── favicon.ico
├── docker-compose.yml
├── docs
│   ├── code-improvements.md
│   ├── database-connections.md
│   ├── project-brief.md
│   ├── roundup-games-plan
│   │   └── ... (project documentation)
│   ├── reference
│   │   └── database
│   │       ├── schema-erd.png
│   │       └── schema-erd.svg
│   └── SECURITY.md
├── drizzle.config.ts
├── eslint.config.js
├── LEARN_FULLSTACK.md
├── LICENSE
├── netlify
│   └── edge-functions
│       └── security-headers.ts
├── netlify.toml
├── package-lock.json
├── package.json
├── pnpm-lock.yaml
├── pnpm-workspace.yaml
├── public
│   └── favicon.ico
├── puppeteer.config.json
├── README.md
├── scripts
│   ├── check-users.ts
│   ├── generate-auth-secret.js
│   ├── generate-erd.js
│   ├── test-auth.ts
│   ├── test-db-connection.ts
│   └── test-security-headers.sh
├── src
│   ├── app
│   │   └── providers.tsx
│   ├── components
│   │   ├── auth
│   │   │   └── password-input.example.tsx
│   │   ├── DefaultCatchBoundary.tsx
│   │   ├── form-fields
│   │   │   ├── FormSubmitButton.tsx
│   │   │   └── ValidatedInput.tsx
│   │   ├── NotFound.tsx
│   │   └── ThemeToggle.tsx
│   ├── db
│   │   ├── connections.ts
│   │   ├── index.ts
│   │   └── schema
│   │       ├── auth.schema.ts
│   │       └── index.ts
│   ├── features
│   │   └── auth
│   │       ├── __tests__
│   │       │   └── login.test.tsx
│   │       ├── components
│   │       │   ├── login.tsx
│   │       │   └── signup.tsx
│   │       └── useAuthGuard.tsx
│   ├── lib
│   │   ├── auth
│   │   │   ├── index.ts
│   │   │   ├── middleware
│   │   │   │   ├── __tests__
│   │   │   │   └── auth-guard.ts
│   │   │   └── types.ts
│   │   ├── auth-client.ts
│   │   ├── env.client.ts
│   │   ├── env.server.ts
│   │   ├── form.ts
│   │   ├── schemas
│   │   │   └── profile.ts
│   │   ├── security
│   │   │   ├── config.ts
│   │   │   ├── index.ts
│   │   │   └── middleware
│   │   │   └── utils
│   │   │       └── password-validator.ts
│   │   └── server
│   │       └── __tests__
│   │           └── example.test.ts
│   ├── router.tsx
│   ├── routes
│   │   ├── __root.tsx
│   │   ├── (auth)
│   │   │   ├── login.tsx
│   │   │   ├── route.tsx
│   │   │   └── signup.tsx
│   │   ├── api
│   │   │   └── auth
│   │   │       ├── $.ts
│   │   │       └── $action
│   │   ├── dashboard
│   │   │   ├── index.tsx
│   │   │   ├── profile.tsx
│   │   │   └── route.tsx
│   │   └── index.tsx
│   ├── routeTree.gen.ts
│   ├── shared
│   │   ├── hooks
│   │   │   └── useTheme.ts
│   │   ├── lib
│   │   │   └── utils.ts
│   │   └── ui
│   │       ├── __tests__
│   │       │   └── button.test.tsx
│   │       ├── button.tsx
│   │       ├── icons.tsx
│   │       ├── input.tsx
│   │       ├── label.tsx
│   │       └── README.md
│   ├── styles.css
│   └── tests
│       ├── mocks
│       │   └── auth.ts
│       ├── README.md
│       ├── setup.ts
│       └── utils.tsx
├── tsconfig.json
├── typedoc.json
├── vite.config.ts
└── vitest.config.ts

125 directories, 120 files


## Tool available

Always use your playwright tool to navigate to localhost:5173 or 8888 to test changes before finishing

## Before using Playwright MCP

1. Check if dev server is running: `curl -s http://localhost:5173/api/health`
2. If MCP shows error about browser already in use, close it first: `mcp__playwright__browser_close`
3. Then navigate to the page you need

## Before rerunning E2E tests

Always use Playwright MCP to manually verify the expected behavior before running E2E tests. This helps ensure tests match the actual UI behavior.

## Dev server

Assume the dev server is running on 5173 or 8888 for every session, and check via playwright or curl

## Rules
Always read .cursor/rules/*

## Docs
Read /docs/roundup-games-plan/* as appropriate

## Development Roadmap
See /docs/development-backlog.md for prioritized feature implementation tickets
```
</file>

</files>
